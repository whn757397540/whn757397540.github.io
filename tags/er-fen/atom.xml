<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 二分 | hnnwang's Blog]]></title>
  <link href="http://whn757397540.github.io/tags/er-fen/atom.xml" rel="self"/>
  <link href="http://whn757397540.github.io/"/>
  <updated>2015-08-10T11:29:47+08:00</updated>
  <id>http://whn757397540.github.io/</id>
  <author>
    <name><![CDATA[hnnwang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[二分查找及其应用总结]]></title>
    <link href="http://whn757397540.github.io/blog/2015/03/14/er-fen-cha-zhao-ji-qi-ying-yong-zong-jie/"/>
    <updated>2015-03-14T18:55:45+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/03/14/er-fen-cha-zhao-ji-qi-ying-yong-zong-jie</id>
    <content type="html"><![CDATA[<p>二分查找及其应用总结
二分搜索法，是通过不断缩小解可能存在的范围，从而求的问题最优解的方法。经常会出现的是二分搜索和其他算法结合的题目。</p>

<!--more-->


<p>(PS:有关二分姿势的选取，可以看看<a href="http://blog.csdn.net/u012139398/article/details/38637311">峰霸这短小精悍的博文</a></p>

<ol>
<li>首先，最基本的，从有序数组中查找某个值。</li>
</ol>


<p>这个问题，再stl中有lower_bound()和upper_bound()来解决，这里给出一个内部算法结构，再简单说说STL的用法</p>

<pre><code class="c++">int lowerBound(int a[], int n, int aim)//返回值是&gt;=aim的第一个位置，如果不存在，返回最后一个元素之后的一个位置（也就是n）
{
    int l = -1, r = n;//初始化解的存在范围，这里求lower_bound的时候采取的是左闭右开的

    while(r-l &gt; 1)//重复循环，一知道解的范围足够小
    {
        int mid = (l+r)/2;
        if (a[mid] &gt;= aim)//如果mid满足条件
            r = mid;//解的存在范围变为(l, mid]
        else
            l = mid;//解的存在范围变为(mid, r]
    }
    return r;
}
</code></pre>

<p>当然，这只是针对整数的情况，而根据实际情况，还会有可能是其他的元素，或者其他的要求，要视情况而定。不再多说，提一下STL库里的两个函数的用法:</p>

<p>首先，lower_bound(a, a+n, d)返回的是数组a里面（a可以是任何有序的数组）,元素值>=d的第一个元素的位置，如果不存在，则返回的是最后一个元素之后的第一个位置，注意，他的返回值是指针！</p>

<p>然后，upper_bound(a, a+n, d)，与lower_bound（）类似，不过这里找的是>d的第一个元素的位置，不包括等于，不存在的情况与lowerbound相同，返回值也是指针</p>

<ol>
<li>假定一个解并判断是否可行（二分答案法）</li>
</ol>


<p>这种解题方法并不是第一次用了，什么情况下用这种方法呢？如果在求解最大化或最小化的问题中，能够比较简单的判断条件是否满足，那么使用二分搜索法就可以很好得解决问题。</p>

<p>举个简单的例子：</p>

<p><a href="http://poj.org/problem?id=1064">POJ 1064 Cable master</a></p>

<p>我们如果假定答案是x的话，那么每条绳子最多可以切成floor(L[i] / x)段，那么我们只需要判断所有的绳子最多可以切成多少段，如果能切得比K段更多（或者相等），那么就能知道有可能切得更长，这个判断就对应了之前代码的a[mid] >= aim的条件了；同样，反之就说明切得太长了，需要往短了切。所以呢，参考下之前的代码，很容易能写出这一题的代码！我的<a href="/acm/poj/poj1064/">代码</a>仅供参考。</p>

<p>这种类型的题目还很多，记住两个要点：最大化或者最小化问题中;能够比较简单地判断条件是否满足；在满足以上两个条件的情况下，二分搜索法是一个很好的办法，复杂度是O（判断的复杂度×log(maxans)）.</p>

<ol>
<li>最大化最小值问题</li>
</ol>


<p>类似最大化最小值或者最小化最大值的问题，通常用二分搜索法就可以很好的解决（实际上，跟2的二分答案法是差不多的）。不多说，挂个例题和解法就过了。</p>

<p><a href="http://poj.org/problem?id=2456">POJ 2456 Aggressive cows</a></p>

<p>定义一个canMake(int d)函数,代表可以安排牛的位置使离得最近的互相仇恨的牛的距离不小于d。这个问题只用贪心法就很容易判断了（具体过程不说了）。之后进行二分答案就好！</p>

<p>参考<a href="/acm/poj/poj2456/">代码</a></p>

<ol>
<li>最大化平均值</li>
</ol>


<p>这种题呢，说实话，还没有太多印象遇到过，不过既然书上提到了，这里就来讲一讲罗！先来看问题：</p>

<p>有n个物品的重量和价值分别为wi和vi，要从中选出k个物品是的单位重量的价值最大。</p>

<p>这个问题，我刚开始看到的想法就是直接贪心按照单价排序不就好了嘛，可是后来发现这种贪心是错误的（给的样例就能证明）。那么我们可以这样来假设，定义:</p>

<p>C(x) = 可以选择使得单位重量的价值不小于x。</p>

<p>那么原问题就等于是求满足C(x)的最大的x。那么解决了判断问题，就又可以二分答案了。关键我们是怎么判断C(x)呢？假设我们选了某个物品的集合S那么它们的单位重量的价值就是 sigma(vi)/sigma(wi)。</p>

<p>因此就变成了判断是否存在S满足下面的条件</p>

<p>sigma(vi)/sigma(wi) >= x;</p>

<p>把这个不等式变形就得到</p>

<p>sigma(vi - x*wi) >= 0.</p>

<p>因此，我们只需要对vi-x*wi的值进行排序贪心的选取，判断从大到小前k个的和不小于0就行了。每次判断的复杂度是O（nlogn）.</p>

<p>通过上面的内容，我们会发现，不管怎么样，用到二分答案的时候，我们需要先找到一个判断条件，然后对答案进行二分。二分，更重要的是这种思想，它不仅仅是能够搜索数值，还能有更广阔的应用！</p>

<p><a href="/blog/archives">&lt;–返回</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BUPT暑假训练2013级个人排位赛12]]></title>
    <link href="http://whn757397540.github.io/blog/2014/08/10/buptshu-jia-xun-lian-2013ji-ge-ren-pai-wei-sai-12/"/>
    <updated>2014-08-10T10:48:00+08:00</updated>
    <id>http://whn757397540.github.io/blog/2014/08/10/buptshu-jia-xun-lian-2013ji-ge-ren-pai-wei-sai-12</id>
    <content type="html"><![CDATA[<h2>第十二场</h2>

<p>A题 <a href="http://code.bupt.edu.cn/problem/p/494/">BOJ 494. Study sister’s barbarian</a></p>

<p>poj原题，原题链接在这里<a href="http://poj.org/problem?id=2828">POJ2828</a></p>

<p>难在分析，离线处理，倒着分析。分析就会发现，如果是到这来的话，那么所给的位置，应该就代表空格的位置，也就是给你的位置是k的话，就代表第k个空格。（为什么？自己想一想）然后就是找第k个空格的位置插进去了。</p>

<p>直接暴力肯定不行啦，优化一点。空格个数怎么统计？树状数组呗，可以很容易在logn的时间内求出前n项和，查找位置的话，二分即可，分析下复杂度，是nlog<sup>2</sup> n,在POJ上来说，已然绰绰有余了，因为POJ上的时限是4s（感觉优化的暴力也能过），而在BOJ上，时限为2s,上述做法，姿势要好才能过。有没有更快的方法呢？有，线段树。</p>

<p>什么？线段树不是比树状数组要慢吗？确实，不过那是对于同样的时间复杂度来说的，这道题，目前我还没想到nlogn复杂度的树状数组想法，但是用线段树，很容易就能在nlogn的时间内解出来。区间存空格个数就行了，比较的时候比较左边的空格跟你的目标的大小就行。代码</p>

<pre><code class="c++">#include &lt;cstdio&gt;
#include &lt;iostream&gt;
const int N = 200005;

struct TREE
{
    int l,r;
    int data;
}a[4*N];

int b[N],c[N],ans[N];
bool flag;

void buildTree(int now,int l,int r)
{
    int lson = 2*now,rson = 2*now+1;

    a[now].l=l;
    a[now].r=r;

    if (l == r)
    {
        a[now].data = 1;
        return;
    }
    int mid=(l + r) &gt;&gt; 1;
    buildTree(lson,l,mid);
    buildTree(rson,mid+1,r);
    a[now].data=a[lson].data+a[rson].data;
}

void Insert(int now,int aim,int dat)
{

    if (a[now].l==a[now].r)
    {
        a[now].data = 0;
        ans[a[now].l] = dat;
        return;
    }

    int lson = 2*now,rson = 2*now+1;

    if (aim&lt;=a[lson].data)
        Insert(lson,aim,dat);
    else
        Insert(rson,aim-a[lson].data,dat);

    a[now].data = a[lson].data + a[rson].data;
}



int main()
{
    int n;

    while (scanf("%d",&amp;n) != EOF)
    {
        for (int i = 0; i &lt; n; i++)
        {
            scanf("%d%d",&amp;b[i],&amp;c[i]);
            b[i]+=1;
        }
        buildTree(1,1,n);
        for (int i = n - 1; i &gt;= 0; i--)
        {
            flag=false;
            Insert(1,b[i],c[i]);
        }
        for (int i = 1;i &lt; n; i++)
            printf("%d ",ans[i]);
        printf("%d\n",ans[n]);
    }
}
</code></pre>

<p>D题 <a href="http://code.bupt.edu.cn/problem/p/491/">BOJ 491. Study sister’s wizard</a></p>

<p>呵呵，哈希就好，用预处理后O（1)的那种姿势。这里我用的另外一种姿势，主要是字符串长度给定了，所以求hash的时候，求出第一个串来以后，依次递推，每次去首加尾就好。</p>

<p>求完后吧hash值存到一个数组中，分别比较连续的序列是否相等就行。复杂度为O（n）具体看代码吧</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;cstring&gt;
#include &lt;cmath&gt;

typedef unsigned long long ull;

using namespace std;

const ull B=1e9+7;
const int N=1e5+7;
ull a[N];
int m,l;
int cnt;

void getHash(char s[])
{
    int len=strlen(s);
    cnt=0;

    ull Hash=0;
    ull BB=1;
    for (int i=0;i&lt;l;i++)
    {
        Hash=Hash*B+s[i];
        if (i&gt;0) BB*=B;
    }
    a[0]=Hash;
    for (int i=1;i&lt;=len-l;i++)
    {
        Hash=(Hash-s[i-1]*BB)*B+s[i+l-1];
        a[i]=Hash;
    }
}

int main()
{
    char s[N];
    while (scanf("%d%d",&amp;m,&amp;l)!=EOF)
    {
        scanf("%s",s);
        int len=strlen(s);
        getHash(s);
        cnt=1;
        int ans=0;
        //for (int i=0;i&lt;=len-l;i++)
           // printf("%ul ",a[i]);
        //cout&lt;&lt;endl;
        for (int k=0;k&lt;l;k++)
        {
            for (int i=k+l;i&lt;=len-l;i+=l)
            {
                if (a[i]==a[i-l]) cnt++;
                else
                {
                    if (cnt&gt;=m)
                        ans+=cnt-m+1;
                    cnt=1;
                }
            }
            if (cnt&gt;=m)
                ans+=cnt-m+1;
            cnt=1;
        }
        printf("%d\n",ans);


    }
}
</code></pre>

<p>E题 <a href="http://code.bupt.edu.cn/problem/p/490/">BOJ 490. Study sister’s dragon</a></p>

<p>能想到用dp来求就好做了。用dp[i][j]代表取到第i堆，状态为j(前几堆的异或和为j)的概率，然后就很容易写出dp方程</p>

<p>dp[i][j]+=dp[i-1][j xor k]*1/a[i];</p>

<p>由于只跟之前一个状态有关系，可以用滚动数组来节省空间。代码在这里</p>

<pre><code class="c++">#include &lt;cstdio&gt;

int main()
{
    int n;
    while (scanf("%d",&amp;n) != EOF)
    {
        int num;
        double dp[2][130]={0};
        scanf("%d",&amp;num);
        for (int i = 1;i &lt;= num; i ++)
            dp[0][i] = 1.000/num;
        int now=0;
        for (int i = 1;i &lt; n;i ++)
        {
            scanf("%d", &amp;num);
            for (int j = 0; j &lt; 128; j++)
            {
                dp[now^1][j]=0;
                for (int k = 1; k &lt;=num; k ++)
                    dp[now^1][j]+=dp[now][j^k]*(1.000)/num;
            }
            now^=1;
        }
        printf("%.6lf\n",dp[now][0]);
    }
}
</code></pre>

<p>G题 <a href="http://code.bupt.edu.cn/problem/p/497/">BOJ 497. Study sister’s clan</a></p>

<p>就是一道裸的图论题，强联通分量缩点，然后跑一遍最短路（Dijkstra或者SPFA都可，自己选择吧）就能出结果啦，照模板抄就行了。代码</p>

<pre><code class="c++">#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;vector&gt;
#include &lt;iostream&gt;
#include &lt;queue&gt;

#define MAX_V 2222
#define INF 555555
using namespace std;

int n;
vector&lt;int&gt; G[MAX_V];
vector&lt;int&gt; rG[MAX_V];
vector&lt;int&gt; vs;
bool used[MAX_V];
int cmp[MAX_V];
int d[MAX_V];

void addEdge(int from,int to)
{
    G[from].push_back(to);
    rG[to].push_back(from);
}

void dfs(int v)
{
    used[v] = true;
    for (int i = 0; i &lt; G[v].size(); i ++)
        if (!used[G[v][i]]) dfs(G[v][i]);
    vs.push_back(v);
}

void rdfs(int v, int k)
{
    used[v] = true;
    cmp[v] = k;
    for (int i = 0; i &lt; rG[v].size(); i ++)
    {
        if (!used[rG[v][i]]) rdfs(rG[v][i],k);
    }
}

int scc()
{
    memset(cmp,0,sizeof(cmp));
    memset(used,0,sizeof(used));
    vs.clear();
    for (int v = 1; v &lt;= n; v ++)
        if(!used[v]) dfs(v);
    memset(used,0,sizeof(used));
    int k=0;
    for (int i = vs.size() - 1;i &gt;=0; i--)
        if (!used[vs[i]]) rdfs(vs[i],k++);
    return k;
}

struct HeadNode
{
    int d,u;
    bool operator &lt; (const HeadNode&amp; rhs) const{
        return d &gt; rhs.d;
    }
};
void dijkstra(int s)
{
    priority_queue&lt;HeadNode&gt; q;
    for (int i = 1; i &lt;= n; i ++) d[i]=INF;
    d[s] = 0;
    memset(used,0,sizeof(used));
    q.push((HeadNode){0,s});
    while (!q.empty())
    {
        HeadNode x = q.top();q.pop();
        int u = x.u;
        if (used[u]) continue;
        used[u]=true;
        for (int i = 0; i &lt; G[u].size(); i++)
        {
            int to = G[u][i];
            if (d[to] &gt; d[u] + (cmp[u]==cmp[to] ? 0 : 1))
            {
                d[to] = d[u] + (cmp[u]==cmp[to]? 0 : 1);
                q.push((HeadNode){d[to],to});
            }
        }
    }
}
int main()
{
    int t;
    cin&gt;&gt;t;
    while (t--)
    {
        int m,k;
        scanf("%d%d%d",&amp;n,&amp;m,&amp;k);
        for (int i=1;i&lt;=m;i++)
        {
            int u,v;
            scanf("%d%d",&amp;u,&amp;v);
            addEdge(u,v);
        }
        scc();
        int a,b;
        scanf("%d%d",&amp;a,&amp;b);
        if (cmp[a] == cmp[b])
            printf("Input Error\n");
        else
        {
            dijkstra(a);
            if (d[b] &gt; k)
                printf("Sad\n");
            else
                printf("Good Job\n");
        }
        for (int i = 1;i &lt;= n;i ++)
        {
            G[i].clear();
            rG[i].clear();
        }
    }
    return 0;
}
</code></pre>

<p><a href="/blog/archives/">&lt;&ndash;BACK</a></p>
]]></content>
  </entry>
  
</feed>
