<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 动态规划 | hnnwang's Blog]]></title>
  <link href="http://whn757397540.github.io/tags/dong-tai-gui-hua/atom.xml" rel="self"/>
  <link href="http://whn757397540.github.io/"/>
  <updated>2015-08-10T11:29:47+08:00</updated>
  <id>http://whn757397540.github.io/</id>
  <author>
    <name><![CDATA[hnnwang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BUPT暑假训练2013级个人排位赛12]]></title>
    <link href="http://whn757397540.github.io/blog/2014/08/10/buptshu-jia-xun-lian-2013ji-ge-ren-pai-wei-sai-12/"/>
    <updated>2014-08-10T10:48:00+08:00</updated>
    <id>http://whn757397540.github.io/blog/2014/08/10/buptshu-jia-xun-lian-2013ji-ge-ren-pai-wei-sai-12</id>
    <content type="html"><![CDATA[<h2>第十二场</h2>

<p>A题 <a href="http://code.bupt.edu.cn/problem/p/494/">BOJ 494. Study sister’s barbarian</a></p>

<p>poj原题，原题链接在这里<a href="http://poj.org/problem?id=2828">POJ2828</a></p>

<p>难在分析，离线处理，倒着分析。分析就会发现，如果是到这来的话，那么所给的位置，应该就代表空格的位置，也就是给你的位置是k的话，就代表第k个空格。（为什么？自己想一想）然后就是找第k个空格的位置插进去了。</p>

<p>直接暴力肯定不行啦，优化一点。空格个数怎么统计？树状数组呗，可以很容易在logn的时间内求出前n项和，查找位置的话，二分即可，分析下复杂度，是nlog<sup>2</sup> n,在POJ上来说，已然绰绰有余了，因为POJ上的时限是4s（感觉优化的暴力也能过），而在BOJ上，时限为2s,上述做法，姿势要好才能过。有没有更快的方法呢？有，线段树。</p>

<p>什么？线段树不是比树状数组要慢吗？确实，不过那是对于同样的时间复杂度来说的，这道题，目前我还没想到nlogn复杂度的树状数组想法，但是用线段树，很容易就能在nlogn的时间内解出来。区间存空格个数就行了，比较的时候比较左边的空格跟你的目标的大小就行。代码</p>

<pre><code class="c++">#include &lt;cstdio&gt;
#include &lt;iostream&gt;
const int N = 200005;

struct TREE
{
    int l,r;
    int data;
}a[4*N];

int b[N],c[N],ans[N];
bool flag;

void buildTree(int now,int l,int r)
{
    int lson = 2*now,rson = 2*now+1;

    a[now].l=l;
    a[now].r=r;

    if (l == r)
    {
        a[now].data = 1;
        return;
    }
    int mid=(l + r) &gt;&gt; 1;
    buildTree(lson,l,mid);
    buildTree(rson,mid+1,r);
    a[now].data=a[lson].data+a[rson].data;
}

void Insert(int now,int aim,int dat)
{

    if (a[now].l==a[now].r)
    {
        a[now].data = 0;
        ans[a[now].l] = dat;
        return;
    }

    int lson = 2*now,rson = 2*now+1;

    if (aim&lt;=a[lson].data)
        Insert(lson,aim,dat);
    else
        Insert(rson,aim-a[lson].data,dat);

    a[now].data = a[lson].data + a[rson].data;
}



int main()
{
    int n;

    while (scanf("%d",&amp;n) != EOF)
    {
        for (int i = 0; i &lt; n; i++)
        {
            scanf("%d%d",&amp;b[i],&amp;c[i]);
            b[i]+=1;
        }
        buildTree(1,1,n);
        for (int i = n - 1; i &gt;= 0; i--)
        {
            flag=false;
            Insert(1,b[i],c[i]);
        }
        for (int i = 1;i &lt; n; i++)
            printf("%d ",ans[i]);
        printf("%d\n",ans[n]);
    }
}
</code></pre>

<p>D题 <a href="http://code.bupt.edu.cn/problem/p/491/">BOJ 491. Study sister’s wizard</a></p>

<p>呵呵，哈希就好，用预处理后O（1)的那种姿势。这里我用的另外一种姿势，主要是字符串长度给定了，所以求hash的时候，求出第一个串来以后，依次递推，每次去首加尾就好。</p>

<p>求完后吧hash值存到一个数组中，分别比较连续的序列是否相等就行。复杂度为O（n）具体看代码吧</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;cstring&gt;
#include &lt;cmath&gt;

typedef unsigned long long ull;

using namespace std;

const ull B=1e9+7;
const int N=1e5+7;
ull a[N];
int m,l;
int cnt;

void getHash(char s[])
{
    int len=strlen(s);
    cnt=0;

    ull Hash=0;
    ull BB=1;
    for (int i=0;i&lt;l;i++)
    {
        Hash=Hash*B+s[i];
        if (i&gt;0) BB*=B;
    }
    a[0]=Hash;
    for (int i=1;i&lt;=len-l;i++)
    {
        Hash=(Hash-s[i-1]*BB)*B+s[i+l-1];
        a[i]=Hash;
    }
}

int main()
{
    char s[N];
    while (scanf("%d%d",&amp;m,&amp;l)!=EOF)
    {
        scanf("%s",s);
        int len=strlen(s);
        getHash(s);
        cnt=1;
        int ans=0;
        //for (int i=0;i&lt;=len-l;i++)
           // printf("%ul ",a[i]);
        //cout&lt;&lt;endl;
        for (int k=0;k&lt;l;k++)
        {
            for (int i=k+l;i&lt;=len-l;i+=l)
            {
                if (a[i]==a[i-l]) cnt++;
                else
                {
                    if (cnt&gt;=m)
                        ans+=cnt-m+1;
                    cnt=1;
                }
            }
            if (cnt&gt;=m)
                ans+=cnt-m+1;
            cnt=1;
        }
        printf("%d\n",ans);


    }
}
</code></pre>

<p>E题 <a href="http://code.bupt.edu.cn/problem/p/490/">BOJ 490. Study sister’s dragon</a></p>

<p>能想到用dp来求就好做了。用dp[i][j]代表取到第i堆，状态为j(前几堆的异或和为j)的概率，然后就很容易写出dp方程</p>

<p>dp[i][j]+=dp[i-1][j xor k]*1/a[i];</p>

<p>由于只跟之前一个状态有关系，可以用滚动数组来节省空间。代码在这里</p>

<pre><code class="c++">#include &lt;cstdio&gt;

int main()
{
    int n;
    while (scanf("%d",&amp;n) != EOF)
    {
        int num;
        double dp[2][130]={0};
        scanf("%d",&amp;num);
        for (int i = 1;i &lt;= num; i ++)
            dp[0][i] = 1.000/num;
        int now=0;
        for (int i = 1;i &lt; n;i ++)
        {
            scanf("%d", &amp;num);
            for (int j = 0; j &lt; 128; j++)
            {
                dp[now^1][j]=0;
                for (int k = 1; k &lt;=num; k ++)
                    dp[now^1][j]+=dp[now][j^k]*(1.000)/num;
            }
            now^=1;
        }
        printf("%.6lf\n",dp[now][0]);
    }
}
</code></pre>

<p>G题 <a href="http://code.bupt.edu.cn/problem/p/497/">BOJ 497. Study sister’s clan</a></p>

<p>就是一道裸的图论题，强联通分量缩点，然后跑一遍最短路（Dijkstra或者SPFA都可，自己选择吧）就能出结果啦，照模板抄就行了。代码</p>

<pre><code class="c++">#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;vector&gt;
#include &lt;iostream&gt;
#include &lt;queue&gt;

#define MAX_V 2222
#define INF 555555
using namespace std;

int n;
vector&lt;int&gt; G[MAX_V];
vector&lt;int&gt; rG[MAX_V];
vector&lt;int&gt; vs;
bool used[MAX_V];
int cmp[MAX_V];
int d[MAX_V];

void addEdge(int from,int to)
{
    G[from].push_back(to);
    rG[to].push_back(from);
}

void dfs(int v)
{
    used[v] = true;
    for (int i = 0; i &lt; G[v].size(); i ++)
        if (!used[G[v][i]]) dfs(G[v][i]);
    vs.push_back(v);
}

void rdfs(int v, int k)
{
    used[v] = true;
    cmp[v] = k;
    for (int i = 0; i &lt; rG[v].size(); i ++)
    {
        if (!used[rG[v][i]]) rdfs(rG[v][i],k);
    }
}

int scc()
{
    memset(cmp,0,sizeof(cmp));
    memset(used,0,sizeof(used));
    vs.clear();
    for (int v = 1; v &lt;= n; v ++)
        if(!used[v]) dfs(v);
    memset(used,0,sizeof(used));
    int k=0;
    for (int i = vs.size() - 1;i &gt;=0; i--)
        if (!used[vs[i]]) rdfs(vs[i],k++);
    return k;
}

struct HeadNode
{
    int d,u;
    bool operator &lt; (const HeadNode&amp; rhs) const{
        return d &gt; rhs.d;
    }
};
void dijkstra(int s)
{
    priority_queue&lt;HeadNode&gt; q;
    for (int i = 1; i &lt;= n; i ++) d[i]=INF;
    d[s] = 0;
    memset(used,0,sizeof(used));
    q.push((HeadNode){0,s});
    while (!q.empty())
    {
        HeadNode x = q.top();q.pop();
        int u = x.u;
        if (used[u]) continue;
        used[u]=true;
        for (int i = 0; i &lt; G[u].size(); i++)
        {
            int to = G[u][i];
            if (d[to] &gt; d[u] + (cmp[u]==cmp[to] ? 0 : 1))
            {
                d[to] = d[u] + (cmp[u]==cmp[to]? 0 : 1);
                q.push((HeadNode){d[to],to});
            }
        }
    }
}
int main()
{
    int t;
    cin&gt;&gt;t;
    while (t--)
    {
        int m,k;
        scanf("%d%d%d",&amp;n,&amp;m,&amp;k);
        for (int i=1;i&lt;=m;i++)
        {
            int u,v;
            scanf("%d%d",&amp;u,&amp;v);
            addEdge(u,v);
        }
        scc();
        int a,b;
        scanf("%d%d",&amp;a,&amp;b);
        if (cmp[a] == cmp[b])
            printf("Input Error\n");
        else
        {
            dijkstra(a);
            if (d[b] &gt; k)
                printf("Sad\n");
            else
                printf("Good Job\n");
        }
        for (int i = 1;i &lt;= n;i ++)
        {
            G[i].clear();
            rG[i].clear();
        }
    }
    return 0;
}
</code></pre>

<p><a href="/blog/archives/">&lt;&ndash;BACK</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BUPT暑假训练2013级个人排位赛]]></title>
    <link href="http://whn757397540.github.io/blog/2014/08/07/buptshu-jia-xun-lian-2013ji-ge-ren-pai-wei-sai-11/"/>
    <updated>2014-08-07T10:47:56+08:00</updated>
    <id>http://whn757397540.github.io/blog/2014/08/07/buptshu-jia-xun-lian-2013ji-ge-ren-pai-wei-sai-11</id>
    <content type="html"><![CDATA[<h2>第十一场</h2>

<!--more-->


<p>A题 <a href="http://code.bupt.edu.cn/problem/p/488/">BOJ 488. 小妹妹个数</a></p>

<p>我感到了满满的恶意，这道题让我的世界观都颠覆了。。。说下收获：</p>

<p>一种乱搞的方法———-打表。
bool数组竟然可以开到10亿，惊呆了。。。</p>

<p>B题 <a href="http://code.bupt.edu.cn/problem/p/480/">BOJ 480. 田田背课文递</a></p>

<p>没什么说的，跟第九场地3题一样，不过数据范围大了点，不过时限也给的很宽。后缀数组加高度数组。附代码</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;cstdlib&gt;
#include &lt;cmath&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;

using namespace std;
const int N=100005;
int n,k;
int Rank[N];
int lcp[N];
int tmp[N];
int sa[N];
bool compare_sa(int i,int j)
{
    if (Rank[i]!=Rank[j])
        return Rank[i]&lt;Rank[j];
    else
    {
        int ri = i+k&lt;=n?Rank[i+k]:-1;
        int rj = j+k&lt;=n?Rank[j+k]:-1;
        return ri &lt; rj;
    }
}

void construct_sa(string s,int sa[])
{
    n=s.length();

    for (int i=0;i&lt;=n;i++)
    {
        sa[i]=i;
        Rank[i]=i&lt;n ? s[i]:-1;
    }
    for (k=1;k&lt;=n;k*=2)
    {
        sort(sa,sa+n+1,compare_sa);

        tmp[sa[0]]=0;
        for (int i=1;i&lt;=n;i++)
            tmp[sa[i]] = tmp[sa[i-1]] + (compare_sa(sa[i-1],sa[i])?1:0);
        for (int i=0;i&lt;=n;i++)
            Rank[i]=tmp[i];
    }

}

void construct_lcp(string s,int sa[],int lcp[])
{
    n=s.length();
    for (int i=0;i&lt;=n;i++)
        Rank[sa[i]]=i;

    int h=0;
    lcp[0]=0;
    for (int i=0;i&lt;n;i++)
    {
        int j=sa[Rank[i]-1];
        if (h&gt;0) h--;
        for (;j+h&lt;n&amp;&amp;i+h&lt;n;h++)
            if (s[j+h]!=s[i+h]) break;
        lcp[Rank[i]-1]=h;
    }
}

int main()
{
    string s;
    cin&gt;&gt;s;
    memset(lcp,0,sizeof(lcp));
    memset(sa,0,sizeof(sa));
    construct_sa(s,sa);
    construct_lcp(s,sa,lcp);
    int ans=0;
    for (int i=1 ;i&lt;=s.length(); i++)
        ans=max(ans,lcp[i]);
    printf("%d\n",ans+1);

}
</code></pre>

<p>C题 <a href="http://code.bupt.edu.cn/problem/p/478/">BOJ 478. 小妹妹采蘑菇</a></p>

<p>迄今为止做过的最简单的概率dp。。。思路如下。</p>

<p>设dp[i]代表还有i种蘑菇没采时的步数的期望。那么显然，dp[n]=0,dp[0]就是我们要求的状态。</p>

<p>在dp[i]这个状态时，可以通过再采一个蘑菇转移到下面两种状态:</p>

<p>. dp[i],就是采的蘑菇是已经采到过的，概率是(n-i)/n;
. dp[i+1],就是采的蘑菇是一种新的蘑菇，概率为i/n;
这样的话，根据E(X+Y)=p(X)<em>E(X)+p(Y)</em>E(Y),就有dp[i]+1=(n-i)/n *dp[i] + i/n * dp[i-1];最终化简得到如下式子，dp[i-1]=dp[i]+n/i;（PS：因为采了一个蘑菇，所以前面应该是dp[i]+1，否则就与两个子状态的母状态不等价了。） 代码在这里。</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;cstdlib&gt;
#include &lt;cmath&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;

using namespace std;

const int N=105;

double dp[N];

int main()
{
    int n;
    while (scanf("%d",&amp;n)!=EOF)
    {
        dp[n]=0;
        for (int i=n-1;i&gt;=0;i--)
            dp[i]=dp[i+1]+(double)n/(i+1);
        printf("%.6lf\n",dp[0]);
    }
}
</code></pre>

<p>这种题有很多种思考方法，不过其核心是不变的，就是构造一个递推关系，一般这个递推关系都会用到当前状态本身，把它放到同一边就行。有关这方面，我建议去<a href="http://blog.csdn.net/morgan_xww/article/details/6775853">这个博客</a>看看。</p>

<p>D题 <a href="http://code.bupt.edu.cn/problem/p/482/">BOJ 482. 焦级长的激光炮</a></p>

<p>这题暂时先算了吧，我打算搞一到两个星期的图论（图论这块太渣了T_T），打算搞完以后写个专题总结，到时候再来看这道题。是个匹配问题。</p>

<p>E题 <a href="http://code.bupt.edu.cn/problem/p/489/">BOJ 489. 小妹妹去划船</a></p>

<p>这题其实挺水的，估计没有人不会，思路就不写了。学到了一点，也是以前没有注意的一点，用指针必须申请内存，即便你是用指针来表示字符串。挂下代码吧！</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;cstdlib&gt;
#include &lt;cmath&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;

using namespace std;
const int MAXN=100005;
const double esp=1e-9;
int S[MAXN],N[MAXN],W[MAXN],E[MAXN];
int t,cnts,cntn,cntw,cnte,sx,sy,ex,ey;
int main()
{
    char s[MAXN];
    while (~scanf("%d%d%d%d%d",&amp;t,&amp;sx,&amp;sy,&amp;ex,&amp;ey))
    {
        scanf("%s",s);
        cnts=cntn=cntw=cnte=0;
        int len=strlen(s);
        for (int i=0;i&lt;len;i++)
        {
            switch (s[i])
            {
                case 'S': S[++cnts]=i+1; break;
                case 'N': N[++cntn]=i+1; break;
                case 'W': W[++cntw]=i+1; break;
                case 'E': E[++cnte]=i+1; break;
            }
        }
        int dx=ex-sx,dy=ey-sy;
        int ans=0;
        if (ex&gt;sx)
        {
            if (cnte&gt;=dx)
                ans=max(ans,E[dx]);
            else
            {
                printf("-1\n");
                continue;
            }
        }
        else if (ex&lt;sx)
        {
            if (cntw&gt;=(-dx))
                ans=max(ans,W[-dx]);
            else
            {
                printf("-1\n");
                continue;
            }
        }

        if (ey&gt;sy)
        {
            if (cntn&gt;=dy)
                ans=max(ans,N[dy]);
            else
            {
                printf("-1\n");
                continue;
            }
        }
        else if (ey&lt;sy)
        {
            if (cnts&gt;=(-dy))
                ans=max(ans,S[-dy]);
            else
            {
                printf("-1\n");
                continue;
            }
        }
        printf("%d\n",ans);
    }
}
</code></pre>

<p><a href="/blog/archives/">&lt;&ndash;BACK</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BUPT暑假训练2013级个人排位赛]]></title>
    <link href="http://whn757397540.github.io/blog/2014/08/01/buptshu-jia-xun-lian-2013ji-ge-ren-pai-wei-sai-8/"/>
    <updated>2014-08-01T09:16:16+08:00</updated>
    <id>http://whn757397540.github.io/blog/2014/08/01/buptshu-jia-xun-lian-2013ji-ge-ren-pai-wei-sai-8</id>
    <content type="html"><![CDATA[<h2>第八场</h2>

<!-- more -->


<p>A题 <a href="http://code.bupt.edu.cn/problem/p/448/">BOJ 448. 游戏</a></p>

<p>枚举边就行了，我枚举的方法是，记录下第一个边的向量，然后设置一个变量来标记第一个边是否时被计数进去，然后再设置一个标记来标记之前一个边是否被记录进去，用向量判断钝角，注意别重就行。代码</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;cstdlib&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;


using namespace std;

double x1,y1,x2,y2,x3,y3;
bool judge=false;

int main()
{
    int n;
    while (scanf("%d",&amp;n)!=EOF)
    {
        int sum=0;
        bool judgeFirst=false;
        judge=false;
        scanf("%lf%lf",&amp;x1,&amp;y1);
        scanf("%lf%lf",&amp;x2,&amp;y2);
        scanf("%lf%lf",&amp;x3,&amp;y3);

        double x0=x2-x1,y0=y2-y1;
        double recx=x1,recy=y1;
        if (x0*(x3-x2)+y0*(y3-y2)&gt;0)
        {
            sum+=2;
            judge=true;
            judgeFirst=true;
        }
        x1=x2;y1=y2;x2=x3;y2=y3;
        for (int i=3;i&lt;=n;i++)
        {
            if (i!=n) scanf("%lf%lf",&amp;x3,&amp;y3);
            else
            {
                x3=recx;
                y3=recy;
            }
            if ((x2-x1)*(x3-x2)+(y2-y1)*(y3-y2)&gt;0)
            {
                if (judge)
                    sum+=1;
                else
                {
                    sum+=2;
                    judge=true;
                }
            }
            else
                judge=false;
            x1=x2;y1=y2;x2=x3;y2=y3;
        }
        if ((recx-x1)*x0+(recy-y1)*y0&gt;0)
            if (judge&amp;&amp;judgeFirst);
            else if (judge||judgeFirst)
                sum+=1;
            else
                sum+=2;
        printf("%d\n",sum);
    }
}
</code></pre>

<p>B题 <a href="http://code.bupt.edu.cn/problem/p/468/">BOJ 468. 小妹妹送快递</a></p>

<p>个人比较偏向并查集的做法，应该说是kruskal最小生成树的想法，挺简单的。就不具体分析了。代码</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;string&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;cstdlib&gt;
#include &lt;cmath&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;

using namespace std;
#define N 10005
struct data
{
    int x,y,c;
}a[10*N];

int father[N];

int getfather(int);
bool PlusJudge(int,int);
void GetPlus(int,int);
bool cmp(data,data);

int main()
{
    int T;
    cin&gt;&gt;T;
    while (T--)
    {
        int n,m;
        int ans=1;
        cin&gt;&gt;n&gt;&gt;m;
        for (int i=1;i&lt;=n;i++)
            father[i]=i;
        for (int i=0;i&lt;m;i++)
            scanf("%d%d%d",&amp;a[i].x,&amp;a[i].y,&amp;a[i].c);
        sort(a,a+m,cmp);

        for (int i=0;i&lt;m;i++)
        {
            GetPlus(a[i].x,a[i].y);
            ans=max(ans,a[i].c);
            if (PlusJudge(1,n))
                break;
        }

        if (PlusJudge(1,n) )
            printf("%d\n",ans);
        else
            printf("shimatta!\n");
    }
    return 0;
}

int getfather(int i)
{

    if (father[i] != i) father[i] = getfather( father[i] );
    return father[i];
}

bool PlusJudge(int i,int j)
{
    if ( getfather( i ) == getfather( j ) )
        return true;
    else
        return false;
}

void GetPlus(int i,int j)
{
    int a = getfather( i );
    int b = getfather( j );
    father[b] = a;
}

bool cmp(data a,data b)
{
    return a.c&lt;b.c;
}
</code></pre>

<p>C题 <a href="http://code.bupt.edu.cn/problem/p/472/">BOJ  472. 学姐点名</a></p>

<p>卡代码量，卡时间，就酱紫。方法有两种。</p>

<p>算出学号之和（用公式就可以，求和也行），然后求出所给的数据之和，然后相减。代码</p>

<pre><code class="c++">#include &lt;cstdio&gt;
int main()
{
    int n;
    while (scanf("%d",&amp;n)!=EOF)
    {
        int i,sum=0;
        for (i=1;i&lt;n;i++)
        {
            int num;
            scanf("%d",&amp;num);
            sum+=num;
        }
        int a;
        if (n%2) a=(n+1)/2*n;
        else a=n/2*(n+1);
        printf("%d\n",a-sum);
    }
}
</code></pre>

<p>1到n求异或，然后读入的时候再异或回来，剩下的数就是要找的学弟编号，利用了异或的性质，代码就不附了，很简单。</p>

<p>D题 <a href="http://code.bupt.edu.cn/problem/p/452/">BOJ 452. 解码锦标赛</a></p>

<p>dp，我感觉难点在找对手身上。 先说dp关系式dp[i][j]，i代表选手编号，j代表当前轮数（我是把最开始的那一轮算作第0轮的。），dp[i][j]=dp[i][j-1]<em>(sigma(dp[k][j-1]</em>w[i][k])其中k代表i在当前轮可能遇到的对手（递推式应该很好理解）。</p>

<p>接下来就是找对手了，我在这里卡了好久。</p>

<p>首先，我们吧所有的选手编号转换为二进制，就会发现是1 vs 10 11 vs 100 101 vs 110 111 vs 1000……，这可能感觉还是不太好，可以尝试再把它减1，就会发现是酱紫：0 vs 1 10 vs 11 100 vs 101 110 vs 111 1000 vs 1001……，这就很好看了，因为一个数对1取异或，就是他的对手，这多好的性质 呀，所以，第一轮的对手很容易找到了就。但是第二轮呢，这就不是一个对手了，怎么办？ 咱们观察下，第二轮（以及更高的轮次）都可以看作是组与组之间的对战，对与第二轮，所有数都除以2（整除），把得到结果相同的归为一组，进行对战，就会发现，依然是 0 vs 1,10 vs 11,100 vs 101……，同理，下一轮，就再除以个2(就是原来的数除以4)，还会是这种对局，酱紫的话，对手的问题就解决了，哈哈，这题就可以做了。结合分析看代码吧！</p>

<p>。</p>

<pre><code class="c++">#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;

using namespace std;
const int N=10;

double dp[1 &lt;&lt; N + 1][1 &lt;&lt; N + 1],w[1 &lt;&lt; N + 1][1 &lt;&lt; N + 1];

double others(int i,int j)
{
    int temp= 1 &lt;&lt; j ;
    double res=0.0;

    i-=1;
    int cnt=i/temp;

    for (int k = ((cnt^1)*temp+1); k &lt;= (((cnt^1)+1) * temp);k ++)
        res+=dp[k][j]*w[i+1][k];
    return res;
}
int main()
{
    int n;
    while (scanf("%d",&amp;n),n!=0)
    {
        for (int i = 1;i &lt;= ( 1 &lt;&lt; n );i ++)
        {
            dp[i][0]=1;
            for (int j = 1;j &lt;= (1 &lt;&lt; n);j++)
                scanf("%lf",&amp;w[i][j]);
        }
        for (int i = 1;i &lt;= ( 1 &lt;&lt; n);i ++)
            dp[i][1]=w[i][((i-1)^1)+1];

        for (int j = 2;j &lt;= n;j ++)
            for (int i = 1;i &lt;= (1&lt;&lt;n);i++)
                dp[i][j]=dp[i][j-1]*others(i,j-1);
        int ans;
        double winner=0;
        for (int i = 1;i &lt;= (1&lt;&lt;n) ;i ++)
        {
            if (dp[i][n] &gt; winner+0.001)
            {
                ans=i;
                winner = dp[i][n];
            }
        }
        printf("%d\n",ans);

    }
}
</code></pre>

<p>这次的E题，比赛时间全砸上了，思路没错，不过线段树可能写的有些毛病，而且我认为这次的E题有研究一下的必要，不光是因为他是可以用线段树做的（我最近在搞线段树），他还可以用树状数组（二次差分），用5个树状数组来维护就行。还可以用分块的思想来做。</p>

<p>E题 <a href="http://code.bupt.edu.cn/problem/p/451/">BOJ 451. 田田的算数题</a></p>

<p>有三种方法，线段树，树状数组，桶分（当然，也有可能还有其他方法）。</p>

<p>线段树方法。</p>

<p>原理其实很简单。</p>

<p>等差数列是可以叠加的（就是说，如果你在[ l , r ]区间先后加上一个首项为x1,公差为d1的等差数列和一个首项为x2公差为d2的等差数列，相当于直接加上一个首项为（x1+x2)公差为(d1+d2)的等差数列。）</p>

<p>等差数列，只需要知道首项x，公差d和元素个数n，就能根据公式求出和来，而元素个数n正好是[ l , r ]区间的长度r-l+1。</p>

<p>对于需要从中间截断的时候，我们也可以求出后一半区间的首项来。</p>

<p>有了以上两点保证，就很容易求了，维护一个区间求和的域，再在懒标记中维护一个区间首项的域和一个区间公差的域，就很容易写出来（满足第一条性质，所以不用判断是否有懒标记，直接叠加就可以了）。不过线段树写起来确实有点烦，注不要出错就行。这里附上我的代码</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;cstdlib&gt;
#include &lt;cmath&gt;
#include &lt;algorithm&gt;
#include &lt;queue&gt;
#include &lt;vector&gt;
#define N 100005
using namespace std;
typedef long long ll;
long long ans;

struct tree
{
    int l,r;
    ll data;
}a[4*N];

bool haveRec[4*N];
struct record
{
    ll x,d;
}rec[4*N];
long long getSum(ll x,ll d,ll n)
{
    return (n*x+n*(n-1)/2*d);
}
void buildTree(int now,int l,int r)
{
    int lson=2*now,rson=2*now+1;
    a[now].l=l;
    a[now].r=r;
    a[now].data=0;
    rec[now].x=rec[now].d=0;
    if (l==r) return;
    int mid= (l+r) &gt;&gt; 1;
    buildTree(lson,l,mid);
    buildTree(rson,mid+1,r);
}
void Insert(int now,int aim,ll det)
{
    int lson=2*now,rson=2*now+1;
    if (a[now].l==aim&amp;&amp;a[now].r==aim)
    {
        a[now].data+=det;
        return;
    }
    int mid=(a[now].l+a[now].r) &gt;&gt; 1 ;
    if (aim&lt;=mid)
        Insert(lson,aim,det);
    else
        Insert(rson,aim,det);
    a[now].data=a[lson].data+a[rson].data;

}
void InsertRec(int now,int l,int r,int x,int d)
{
    int lson=2*now,rson=2*now+1;
    if (a[now].l==l&amp;&amp;a[now].r==r)
    {
        rec[now].x+=x;
        rec[now].d+=d;
        return;
    }
    int mid=(a[now].l+a[now].r) &gt;&gt; 1;
    rec[lson].x+=rec[now].x;
    rec[lson].d+=rec[now].d;
    rec[rson].x+=(rec[now].x+(mid+1-a[now].l)*rec[now].d);
    rec[rson].d+=rec[now].d;
    if (r&lt;=mid)
        InsertRec(lson,l,r,x,d);
    else if (l&gt;mid)
        InsertRec(rson,l,r,x,d);
    else
    {
        InsertRec(lson,l,mid,x,d);
        InsertRec(rson,mid+1,r,x+(mid+1-l)*d,d);
    }
    a[now].data=a[lson].data+a[rson].data+getSum(rec[lson].x,rec[lson].d,a[lson].r-a[lson].l+1)+getSum(rec[rson].x,rec[rson].d,a[rson].r-a[rson].l+1);
    rec[now].x=0;
    rec[now].d=0;
}
void Search(int now,int l,int r)
{
    int lson=2*now,rson=2*now+1;
    if (a[now].l==l&amp;&amp;a[now].r==r)
    {
        ans+=a[now].data+getSum(rec[now].x,rec[now].d,r-l+1);
        return;
    }
    int mid=(a[now].l+a[now].r) &gt;&gt; 1;

    rec[lson].x+=rec[now].x;
    rec[lson].d+=rec[now].d;
    rec[rson].x+=(rec[now].x+(mid+1-a[now].l)*rec[now].d);
    rec[rson].d+=rec[now].d;
    if (r&lt;=mid)
        Search(lson,l,r);
    else if (l&gt;mid)
        Search(rson,l,r);
    else
    {
        Search(lson,l,mid);
        Search(rson,mid+1,r);
    }
    a[now].data=a[lson].data+a[rson].data+getSum(rec[lson].x,rec[lson].d,a[lson].r-a[lson].l+1)+getSum(rec[rson].x,rec[rson].d,a[rson].r-a[rson].l+1);
    rec[now].x=0;
    rec[now].d=0;
}
int main()
{
    int T;
    cin&gt;&gt;T;
    while(T--)
    {
        ll n,m;
        scanf("%lld%lld",&amp;n,&amp;m);
        buildTree(1,1,n);
        for (int i=1;i&lt;=n;i++)
        {
            ll num;
            scanf("%lld",&amp;num);
            Insert(1,i,num);
        }
        for (int i=1;i&lt;=m;i++)
        {
            int order;
            scanf("%d",&amp;order);
            if (order==1)
            {
                int l,r;
                ll x,d;
                scanf("%d%d%lld%lld",&amp;l,&amp;r,&amp;x,&amp;d);
                InsertRec(1,l,r,x,d);
            }
            else if(order==2)
            {
                int l,r;
                scanf("%d%d",&amp;l,&amp;r);
                ans=0;
                Search(1,l,r);
                printf("%lld\n",ans);
            }
   }
}
</code></pre>

<p>树状数组方法 我这里的树状数组方法，是利用了差分的思想，二次差分，看这个之前，你得先要知道如何用差分的思想用树状数组来来解决区间加减一个数的区间修改和查询的方法，不知道的可以去看我的<a href="">这篇博客</a>熟悉了这种推导方法，接下来的推导才能看得懂。好了，废话少说，来进入题解。 首先，通过以前的推导我们知道，如果设b[i]=a[i]-a[i-1] (设a[0]=0),我们会有</p>

<p>sigma(a[i])=n<em>b[1]+(n-1)</em>b[2]+……b[1]=(n+1)sigma(b[i])-sigma(i*b[i])——（1） (这个式子是接下來推导的基础)</p>

<p>同样我们设c[i]=b[i]-b[i-1] (同样设b[0]=0),酱紫的话，就可以通过维护c[i]的几个特定的值（应该是3个）来维护一段区间的公差d了，这个是怎么作用的请根据前面那片博客的做法来自行推导，不难。</p>

<p>前面用b[i]来维护区间加减一个数的思想是用b[i]来表示a[i]的前n项和，同理，这里也应该是用c[i]来表示a[i]的前n项和那么我们需要把（1）式化成用c[i]来表示的形式。我们看到，（1）式中有sigma(b[i])和sigma(i*b[i])，很容易知道</p>

<p>sigma(b[i])=(n+1)sigma(c[i])-sigma(i*c[i]———————————————(2)</p>

<p>那么关键就在于求sigma(i*b[i]),把它展开,并把b[i]=c[i]+b[i-1]代入会发现是这个样子</p>

<p>sigma(i*b[i])</p>

<p>=b[1]+2<em>b[2]+3</em>b[3]+……+n*b[n]</p>

<p>=c[1]+2<em>(c[2]+b[1])+3</em>(c[3]+b[2])+……+n*(c[n]+b[n-1])</p>

<p>=sigma(i<em>c[i])+sigma(b[i])(i=1..n-1)+sigma(i</em>b[i])(i=1..n-1)————————(3)</p>

<p>到这里，我们看最后一项，这不就是i*c[i]的前n-1项和吗？那么我们就可以一直递推下去了，就得到如下的式子</p>

<p>=sigma(i<em>c[i])+sigma(i</em>c[i])(i=1..n-1)+sigma(i<em>c[i])(i=1..n-1)+……+1</em>c[1]+sigma(b[i])(i=1..n-1)+sigma(b[i])(i=1..n-2)+……+b[1]</p>

<p>我们的目标是c，b什么的最讨厌了，所以我们要想办法把它搞掉，怎么办呢？别急，我们试下把它展开，就得到了下面的式子</p>

<p>=sigma(sigma(i<em>c[i]))+(n-1)</em>b[1]+(n-2)*b[2]+……+b[n-1]</p>

<p>看到后面的b的部分，我就感觉很高兴，我说过，（1)式很重要，熟悉（1)式了的花，会发现，后边的b的部分是可以化成n<em>sigma(b[i])-sigma(i</em>b[i])的，先化成这样不管它再去搞下c的部分，怎么也不能让它有两次求和吧？我们设d[i]=i<em>c[i]，会发现sigma(sigma(i</em>c[i]))=sigma(sigma(d[i]))，这不跟刚才的b是一样的吗？哈哈，看到这里就感觉世界真美好，那么就可以的到接下来的式子了</p>

<p>=(n+1)sigma(i<em>c[i])-sigma(i2</em>c[i])+n<em>sigma(b[i])(i=1..n-1)-sigma(i</em>b[i])——–(4)</p>

<p>到这里可能有人说了，怎么还有b[i]，不是要把b[i]干掉吗？b[i]一直在叫我怎么做？这个不用着急，没法继续往下化了，我们去看看前面，注意到前面有个(3)式，而且(3)式里有个+sigma(i<em>b[i])，而(4)式里有个-sigma(i</em>b[i])，我们把他俩加起来，不就把i*b[i]搞定了？那，还有个b[i]呢，怎么办？带公式直接变成c[i]不解释。经过整合以后，就会得到最终的式子，如下：</p>

<p>sigma(a[i])=(n+1)2<em>sigma(c[i])+(–(3</em>n+4)<em>sigma(i</em>c[i])+sigma(i2<em>c[i])-n</em>(n+1)sigma(c[i])(i=1..n-1)+(n+1)<em>sigma(i</em>c[i])(i=1..n-1))/2</p>

<p>具体的实现请参考那篇博客的思路，这里说一点就是，可以把x和d分开来维护，用b[i]来维护x，用c[i]来维护d,初始设c[i]为0就可以,这样应该是需要5个树状数组；当然，也可以全部都用c[i]来维护，这样可以用4个树状数组（一个原数组的，一个是维护d的3个跟c[i]有关的数组c[i],i<em>c[i]和i2</em>c[i],c[i]初始为0）或者3个树状数组（全部用c[i]来维护，输入原数组的时候更新c[i]的值）不过道理都是一样的，这份代码里有用4个和5个树状数组的代码。仅供参考。</p>

<pre><code class="c++">
/*维护5个树状数组，时间2500ms*/
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;cstdlib&gt;
#include &lt;cmath&gt;
#include &lt;algorithm&gt;
#include &lt;queue&gt;
#include &lt;vector&gt;
#define N 100005
using namespace std;
typedef long long ll;
ll ans;
ll A[N],B[N],C[N],D[N],E[N];
ll n;

ll lowbit(ll x)
{
    return x&amp;(-x);
}

void Update(ll x,ll det,ll a[])
{
    for (ll i = x;i&lt;= n; i+=lowbit(i))
        a[i]+=det;
}

ll GetSum(ll x,ll a[])
{
    ll res=0;
    for (ll i=x;i&gt;0;i-=lowbit(i))
        res+=a[i];
    return res;
}

ll dGetSum(ll n)
{
    ll res=0;
    res=(n+1)*(n+1)*GetSum(n,C)+((n+1)*GetSum(n-1,D)-(3*n+4)*GetSum(n,D)+GetSum(n,E)-n*(n+1)*GetSum(n-1,C))/2;
    return res;

}

ll xGetSum(ll n)
{
    ll res=0;
    res=(n+1)*GetSum(n,A)-GetSum(n,B);
    return res;
}
int main()
{
    int T;
    cin&gt;&gt;T;
    while(T--)
    {
        ll m,num1=0;
        scanf("%lld%lld",&amp;n,&amp;m);
        memset(A,0,sizeof(long long)*(n+2));
        memset(B,0,sizeof(long long)*(n+2));
        memset(C,0,sizeof(long long)*(n+2));
        memset(D,0,sizeof(long long)*(n+2));
        memset(E,0,sizeof(long long)*(n+2));

        for (ll i=1;i&lt;=n;i++)
        {
            ll num;
            scanf("%lld",&amp;num);
            Update(i,num-num1,A);
            Update(i,i*(num-num1),B);
            num1=num;
        }

        for (ll i=1;i&lt;=m;i++)
        {
            ll order;
            scanf("%d",&amp;order);
            if ( order==1 )
            {
                ll l,r,x,d;
                scanf("%lld%lld%lld%lld",&amp;l,&amp;r,&amp;x,&amp;d);
                Update(l,x,A);
                Update(l,l*x,B);
                Update(r+1,-x,A);
                Update(r+1,-(r+1)*x,B);
                if (r&gt;l)
                {
                    Update(l+1,d,C);
                    Update(r+1,-(r-l+1)*d,C);
                    Update(r+2,(r-l)*d,C);
                    Update(l+1,(l+1)*d,D);
                    Update(r+1,-(r-l+1)*(r+1)*d,D);
                    Update(r+2,(r-l)*(r+2)*d,D);
                    Update(l+1,(l+1)*(l+1)*d,E);
                    Update(r+1,-(r+1)*(r+1)*(r-l+1)*d,E);
                    Update(r+2,(r-l)*(r+2)*(r+2)*d,E);
                }
            }
            else if( order==2 )
            {
                ll l,r;
                scanf("%lld%lld",&amp;l,&amp;r);
                ans=xGetSum(r)-xGetSum(l-1)+dGetSum(r)-dGetSum(l-1);
                printf("%lld\n",ans);
            }
        }
    }
}
</code></pre>

<pre><code class="c++">/*维护4个树状数组,时间不到200ms*/

#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;cstdlib&gt;
#include &lt;cmath&gt;
#include &lt;algorithm&gt;
#include &lt;queue&gt;
#include &lt;vector&gt;
#define N 100005
using namespace std;
typedef long long ll;
ll ans;
ll A[N],B[N],C[N],D[N],E[N];
ll n;

ll lowbit(ll x)
{
    return x&amp;(-x);
}

void Update(ll x,ll det,ll a[])
{
    for (ll i = x;i&lt;= n; i+=lowbit(i))
        a[i]+=det;
}

ll GetSum(ll x,ll a[])
{
    ll res=0;
    for (ll i=x;i&gt;0;i-=lowbit(i))
        res+=a[i];
    return res;
}

ll dGetSum(ll n)
{
    ll res=0;
    res=((n*n+3*n+2)*GetSum(n,C)-(2*n+3)*GetSum(n,D)+GetSum(n,E))/2;
//这个公式是列项找规律找出来的，由于都是前n项和，所以比我推导出来的公式快一点，至于怎么能把那个公式化成这个，我也不清楚。。。
    return res;

}

ll xGetSum(ll n)
{
    return GetSum(n,A);
}
int main()
{
    int T;
    cin&gt;&gt;T;
    while(T--)
    {
        ll m,num1=0;
        scanf("%lld%lld",&amp;n,&amp;m);
        memset(A,0,sizeof(ll)*(n+2));
        memset(C,0,sizeof(ll)*(n+2));
        memset(D,0,sizeof(ll)*(n+2));
        memset(E,0,sizeof(ll)*(n+2));

        for (ll i=1;i&lt;=n;i++)
        {
            ll num;
            scanf("%lld",&amp;num);
            Update(i,num,A);
        }

        for (ll i=1;i&lt;=m;i++)
        {
            ll order;
            scanf("%lld",&amp;order);
            if ( order==1 )
            {
                ll l,r,x,d;
                scanf("%lld%lld%lld%lld",&amp;l,&amp;r,&amp;x,&amp;d);
                Update(l,x,C);
                Update(l,l*x,D);
                Update(l,l*l*x,E);
                if (r&gt;l)
                {
                    Update(l+1,d-x,C);
                    Update(l+1,(l+1)*(d-x),D);
                    Update(l+1,(l+1)*(l+1)*(d-x),E);
                    Update(r+1,-x-(r-l+1)*d,C);
                    Update(r+1,(r+1)*(-x-(r-l+1)*d),D);
                    Update(r+1,(r+1)*(r+1)*(-x-(r-l+1)*d),E);
                }
                else
                {
                      Update(r+1,-2*x,C);
                    Update(r+1,(r+1)*(-2*x),D);
                    Update(r+1,(r+1)*(r+1)*(-2*x),E);
                }
                Update(r+2,x+(r-l)*d,C);
                Update(r+2,(r+2)*(x+(r-l)*d),D);
                Update(r+2,(r+2)*(r+2)*(x+(r-l)*d),E);
            }
            else if( order==2 )
            {
                ll l,r;
                scanf("%lld%lld",&amp;l,&amp;r);
                ans=xGetSum(r)-xGetSum(l-1)+dGetSum(r)-dGetSum(l-1);
                printf("%lld\n",ans);
            }
        }
    }
}
</code></pre>

<p>至于维护三个树状数组的，应该理解了的话，很容易搞出来的，我没改代码，大概也是2000ms左右的时间复杂度吧。</p>

<p>另外还有另外一种树状数组的做法，不是利用差分的思想。差分的思想是只有要加的元素通过有限次差分能够得到一个常数，才能用。那种思想应该是只要有公式就可以用的，这种做法我还没有去细致研究，等研究过了还会继续写一篇博客来介绍。具体请参考《挑战程序设计竞赛》这本书，或者去玮神<a href="http://blog.csdn.net/qq_16089147/article/details/38333965">这篇博客</a>看看，也是这道题，还有桶分的解法。</p>

<p><a href="/blog/archives/">&lt;&ndash;BACK</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BUPT暑假训练2013级个人排位赛]]></title>
    <link href="http://whn757397540.github.io/blog/2014/07/26/buptshu-jia-xun-lian-2013ji-ge-ren-pai-wei-sai-6/"/>
    <updated>2014-07-26T09:16:10+08:00</updated>
    <id>http://whn757397540.github.io/blog/2014/07/26/buptshu-jia-xun-lian-2013ji-ge-ren-pai-wei-sai-6</id>
    <content type="html"><![CDATA[<h2>第六场</h2>

<!--more-->


<p>又被精度问题恶心了一天。。。T_T</p>

<p>A题 <a href="http://code.bupt.edu.cn/problem/p/447/">BOJ 447. 修路</a></p>

<p>很裸的一个生成树问题（由于没有权值，所以不是最小生成树），或者说，就是一个并查集。（可悲的是我竟然忘了写EOF而T了一次T_T）。附代码</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;cstdlib&gt;
#include &lt;cmath&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;

#define MOD 1000000007
#define N 10005

using namespace std;

int father[N];
int u[200005],v[200005];

int getfather(int x)
{
    if (x!=father[x]) father[x]=getfather(father[x]);
    return father[x];
}

bool PlusJudge(int x,int y)
{
    int a=getfather(x);
    int b=getfather(y);
    if (a==b) return true;
    else return false;
}

void getPlus(int x,int y)
{
    int a=getfather(x);
    int b=getfather(y);
    father[b]=a;
}

int main()
{
    int n,m;

    while (~scanf("%d%d",&amp;n,&amp;m))
    {
        int cnt=0;
        memset(father,0,sizeof(father));
        memset(u,0,sizeof(u));
        memset(v,0,sizeof(v));
        for (int i=1;i&lt;=n;i++)
            father[i]=i;
        for (int i=1;i&lt;=m;i++)
        {
            int s;
            scanf("%d%d%d",&amp;u[i],&amp;v[i],&amp;s);
            if (s==0)
                getPlus(u[i],v[i]);
        }
        for (int i=1;i&lt;=m;i++)
        {
            if (!PlusJudge(u[i],v[i]))
            {
                getPlus(u[i],v[i]);
                cnt++;
            }
        }
        printf("%d\n",cnt);
    }
}
</code></pre>

<p>B题 <a href="http://code.bupt.edu.cn/problem/p/445/">BOJ 445. 高兴</a></p>

<p>学长讲了之后才发现是一个旅行商问题，用状压DP就可以了。 具体请看代码,代码里解释地挺详细的。不过如果不懂什么是状压DP的话，还是可能会看不懂。关于状态压缩DP，其实百度一下可以看到好多，这里我挂个<a href="http://godfrey90.iteye.com/blog/725562">链接</a>.不懂的可以去看看。</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;cstdlib&gt;
#include &lt;cmath&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;

using namespace std;

#define INF 200000
#define N 20

int dp[N][ 1&lt;&lt;18 ]={0};//dp[i][j],i代表当前最右边是哪个玩具，j代表当前状态，数组存储这种状态的高兴值的最大值
int h[N][N]={0};

int main()
{
    int n;

    while (~scanf("%d",&amp;n))
    {
        for (int i=1 ; i&lt;=n ; i++)
            for (int j=1 ; j&lt;(1&lt;&lt;n) ; j++)
                dp[i][j]=-INF;//没到到过的状态初始化为最小值
        for (int i=1; i&lt;=n ; i++)
            dp[i][1&lt;&lt;(i-1)]=0;//只有一个的设置为0；

        for ( int i=1 ; i&lt;=n ; i++ )
            for (int j=1 ; j&lt;=n ; j++)
                scanf("%d",&amp;h[i][j]);

        int lim= 1&lt;&lt; n ;
        for ( int j=1 ; j&lt;lim ; j++ )//枚举所有状态
            for (int i=1 ; i&lt;=n ; i++)//枚举所有最右边的点
            {
                if ( (j&amp;(1&lt;&lt;(i-1)))==0 )
                    continue;           //如果当前状态没有到过最右侧的点，不符合，跳过。
                if ( dp[i][j]==-INF )
                    continue;           //如果当前点的状态还没有被改变（保持初始化的状态)，不符合，跳过。
                for ( int k=1 ; k&lt;=n ; k++ )//枚举所有玩具，作为下一个放的玩具
                {
                    if ( j&amp;(1&lt;&lt;(k-1)) )
                        continue;       //如果当前状态已经包含这个玩具，跳过。
                    dp[k][j|(1&lt;&lt;(k-1))]=max(dp[k][j|(1&lt;&lt;(k-1))],dp[i][j]+h[i][k]);//维护更新状态
                }
            }
        int ans=-INF;
        for (int i=1;i&lt;=n;i++)
            ans=max(ans,dp[i][lim-1]);
        printf("%d\n",ans);
    }
    return 0;
}
</code></pre>

<p>C题 <a href="http://code.bupt.edu.cn/problem/p/449/">BOJ 449. 排序</a></p>

<p>这题，偶只想说一句呵呵。嘛也不想说了。思路，计数排序。丧心病狂的一点是测试数据，非常多组，90%是小数据，如果你每组都计术排序，并且都用到memset，机会卡到你超时。分情况讨论就行，再在计数排序时间上做一些小优化（我是设了一个数组来记录出现的量）就行了。我后来想了想，不用分情况也行，计数排序输出的之后顺便把用过的数组重置为0就可以了，两个代码放在一起了。</p>

<p>第一次提交代码</p>

<pre><code class="c++">#include &lt;cstring&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;algorithm&gt;
#include &lt;cstdio&gt;

#define N 10005
using namespace std;

int a[N],b[N];
int main()
{
    int n;
    while (scanf("%d",&amp;n)!=EOF)
    {
        if (n&lt;10000)
        {
            for (int i=1;i&lt;=n;i++)
                scanf("%d",&amp;a[i]);
            sort(&amp;a[1],&amp;a[1]+n);
            for (int i=1;i&lt;n;i++)
                printf("%d ",a[i]);
            printf("%d\n",a[n]);
        }
        else
        {
            memset(a,0,sizeof(a));
            memset(b,0,sizeof(b));
            int cnt=0;
            for (int i=1;i&lt;=n;i++)
            {
                int m;
                scanf("%d",&amp;m);
                a[m]++;
                if (a[m]==1) b[cnt++]=m;
            }
            //这里少个sort(b,b+cnt);
            printf("%d",b[0]);
            a[b[0]]--;
            for (int i=0;i&lt;cnt;i++)
                for (int j=1;j&lt;=a[b[i]];j++)
                    printf(" %d",b[i]);
            printf("\n");


        }
    }
}
</code></pre>

<p>第二次AC代码(PS:在我打第二次AC代码的时候，竟然发现第一个代码的else后面竟然忘了给b排序。。。T_T,这都能过，充分说明了大数据是多么的少，而且还都是顺序的！！！大数据直接输出就能过。第一个代码中已经标出了这个错误的位置，为了保存现场，我就不改了。汗。。）</p>

<pre><code class="c++">#include &lt;cstring&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;algorithm&gt;
#include &lt;cstdio&gt;

#define N 10005
using namespace std;

int a[N]={0},b[N];
int main()
{
    int n;
    while (scanf("%d",&amp;n)!=EOF)
    {

            int cnt=0;
            for (int i=1;i&lt;=n;i++)
            {
                int m;
                scanf("%d",&amp;m);
                a[m]++;
                if (a[m]==1) b[cnt++]=m;
            }
            sort(b,b+cnt);
            printf("%d",b[0]);
            a[b[0]]--;
            for (int i=0;i&lt;cnt;i++)
            {
                for (int j=1;j&lt;=a[b[i]];j++)
                    printf(" %d",b[i]);
                a[b[i]]=0;
            }
            printf("\n");


        }
}
</code></pre>

<p>不过学长讲题的时候说到了桶排序，俺不清楚具体是个什么东东，后来去百度了一下（算法导论上的看不懂），在此总结一下吧。</p>

<p>桶排序就是把你想要排序的范围分成n等份存在一个数组中，数组的每个元素是一个桶（这个桶你可以用链表来实现，也可以用vector来实现，实在不行，也可用二维数组，不过十分不推荐），比如10000分成1000，就是0—9为第一个桶，10—19为第二个桶，……依次类推，把元素分到对应的桶中，然后再对每个桶中的元素进行排序（方法随意），最后按照桶的次序输出。这种排序方法在元素分布比较均匀的时候排序会比较快，复杂度可以接近O（n）。具体的请看<a href="http://blog.csdn.net/houapple/article/details/6480100">这里</a>，讲的挺清楚的，不过不推荐看他的代码，看分析就可以了。</p>

<p>根据我的理解，计数排序就是在整数范围内的一种特殊的桶排序（长度为1的），时间复杂度是O（n），不过当元素的值特别大或者元素不是整数的时候的时候，就不能用计数排序了，但是可以用桶排序。写起来也不是很复杂，有必要的时候其实可以用到，算是学到了一点吧。</p>

<p>D题 <a href="http://code.bupt.edu.cn/problem/p/444/">BOJ 444. 爱好和平</a></p>

<p>这题，说是树形dp，我不太清楚，或许是吧。T_T 我就说下思路了。</p>

<p>首先分析清楚，这必定是一个树。用dfs遍历所有节点，记录每个节点的总子孙节点数sum（包括他本身），和他的子节点中总子孙节点数maxSon（也包括那个子节点）最多的节点。记录完毕以后，枚举每个节点，找每个节点的特征值rec=max（maxson,n-sum）中最小的，然后记录那个行星编号就行。代码</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;cstdlib&gt;
#include &lt;cmath&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;

using namespace std;

#define  N 100005

vector&lt;int&gt; tree[N];

struct data
{
    int sum;
    int MAX;
};

data g[N];
int n,m;

void init()
{
    memset(g,0,sizeof(g));
    for (int i=1;i&lt;=n;i++)
        tree[i].clear();
}

void dfs(int now,int father)
{
    if (tree[now].size()==1&amp;&amp;father!=0)
    {
        g[now].sum=1;
        g[now].MAX=0;
        return;
    }
    int MA=0,SU=0;
    for (int i=0;i&lt;tree[now].size();i++)
    {
        if (tree[now][i]==father) continue;
        int son=tree[now][i];
        dfs(son,now);
        MA=max(MA,g[son].sum);
        SU+=g[son].sum;
    }
    g[now].MAX=MA;
    g[now].sum=SU+1;
}
int main()
{
    while (~scanf("%d%d",&amp;n,&amp;m))
    {
        init();
        for (int i=1;i&lt;=m;i++)
        {
            int u,v;
            scanf("%d%d",&amp;u,&amp;v);
            tree[u].push_back(v);
            tree[v].push_back(u);
        }
        dfs(1,0);
        int ans=111111,res;
        for (int i=1;i&lt;=n;i++)
        {
            if (ans&gt;max(g[i].MAX,n-g[i].sum))
            {
                ans=max(g[i].MAX,n-g[i].sum);
                res=i;
            }
        }
        printf("%d\n",res);
    }
}
</code></pre>

<p>E题 <a href="http://code.bupt.edu.cn/problem/p/450/">BOJ 450. 萌学妹的手机</a></p>

<p>这题原型是北师校赛的一题。</p>

<p>一下午，一直在被精度问题虐，中间改了几处错误，还是弄不对结果，要么多1.要么少1,也有相等的。我确信思路是没有问题的，不过在实现上，可能用了过多的浮点运算以及sqrt，导致精度出现问题，有些有那么一个数的误差。具体的思路还是去看<a href="http://blog.csdn.net/u013007900/article/details/38130625">男哥博客</a>吧，思路是一样的，不过实现上他在转化坐标系的时候就直接把坐标变换成整数了(PS:。我也懒得改了，要改的话改的东西太多了。还有就是直接用直角坐标做的，详见<a href="http://blog.csdn.net/ylasce/article/details/38145745">A神博客</a>)</p>

<p>这题今天（27日）中午又做了做，到底还是过了，思路跟男哥的思路是一样的，有一点不一样的是，他求距离是把斜坐标转化成直角坐标来求的，而我是直接用斜坐标求的距离，公式也很简单，这里就说下求坐标轴夹角为a的斜坐标系下向量(x,y)的模长公式，x2+y2+2xy*cos(a);推导也很简单，把向量分解成两个坐标轴方向的向量相加，再平方就是了。放我的代码吧</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;string&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;cstdlib&gt;
#include &lt;cmath&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;

using namespace std;

const double INF=1000000;
const double PI=acos(-1.0);

double DisSqr(double x1,double y1,double x2,double y2)//斜坐标求距离，自己推导就能出来
{
    return pow(x1-x2,2)+pow(y1-y2,2)+2*(x1-x2)*(y1-y2)*cos(PI/3);
}

void changeXY(double &amp;x,double &amp;y)//转化为斜坐标系
{
    x=x-y/tan(PI/3);
    y=y/sin(PI/3);
 }

 void makeXY(double x,double y,int &amp;nx,int &amp;ny)//把给的坐标转化为横\纵方向上的第几个基站。
 {
     int a=(int)(x/sqrt(3)+1e-8),b=(int)(y/sqrt(3)+1e-8);

     int d[9][2]={ {-1,-1},{-1,0},{-1,1},{0,-1},{0,0},{0,1},{1,-1},{1,0},{1,1} };
     //这里，本来按道理只需要4个点就够了，不过由于精度问题，还是直接把范围扩大了一倍。
     double rec=INF;
     for(int i=0;i&lt;=8;i++)
        if (rec&gt;DisSqr((a+d[i][0])*sqrt(3),(b+d[i][1])*sqrt(3),x,y))
        {
            rec=DisSqr((a+d[i][0])*sqrt(3),(b+d[i][1])*sqrt(3),x,y);
            nx=a+d[i][0];
            ny=b+d[i][1];
        }

 }
int main()
{
    int T;
    double Sx,Sy,Dx,Dy;
    int nSx,nSy,nDx,nDy;
    double L;

    scanf("%d",&amp;T);
    while (T--)
    {
        scanf("%lf",&amp;L);
        scanf("%lf%lf",&amp;Sx,&amp;Sy);
        scanf("%lf%lf",&amp;Dx,&amp;Dy);
        changeXY(Sx,Sy);
        changeXY(Dx,Dy);
        makeXY(Sx/L,Sy/L,nSx,nSy);
        makeXY(Dx/L,Dy/L,nDx,nDy);

        int ans;
        int x=nDx-nSx,y=nDy-nSy;

        if (x&gt;=0&amp;&amp;y&gt;=0||x&lt;=0&amp;&amp;y&lt;=0)
            ans=abs(x)+abs(y);
        else
            ans=max(abs(x),abs(y));
        printf("%d\n",ans);
    }
}
</code></pre>

<p><a href="/blog/archives/">&lt;&ndash;BACK</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BUPT暑假训练2013级个人排位赛]]></title>
    <link href="http://whn757397540.github.io/blog/2014/07/22/buptshu-jia-xun-lian-2013ji-ge-ren-pai-wei-sai-4/"/>
    <updated>2014-07-22T09:16:02+08:00</updated>
    <id>http://whn757397540.github.io/blog/2014/07/22/buptshu-jia-xun-lian-2013ji-ge-ren-pai-wei-sai-4</id>
    <content type="html"><![CDATA[<h2>第四场</h2>

<!--more-->


<p>A题 <a href="http://code.bupt.edu.cn/problem/p/437/">BOJ 437. 大家一起点外卖</a></p>

<p>很简单的一题，由于题目数据给的有点问题，所以交了4次才过，事实上，第二次就应该过了。题面也写的有些蛋疼，需要和好好理解才行。</p>

<p>思路也比较简单，就是设一个数组哪些费用的菜有人点过，每读入一个记录一个，然后判断价格能跟他点的菜凑成m的菜有没有人i点过，点过的话，比较他们的差值和当前最小差值，如果更小，则更新当前最小差值，并记录。需要注意不要让数组溢出，记得判断是否小于0或大于100W。附代码</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;cstdlib&gt;
#include &lt;cmath&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;

#define N 500005
#define INF 2222222
using namespace std;

bool judge[2000005]={false};
int n,m;

int main()
{
    int T;
    cin&gt;&gt;T;
    while (T--)
    {
        int ansless,ansbigger,MIN=INF;
        scanf("%d%d",&amp;n,&amp;m);
        memset(judge,false,sizeof(judge));
        for (int i=1;i&lt;=n;i++)
        {
            int v;
            scanf("%d",&amp;v);
            int rest=m-v;
            if (rest&gt;=0&amp;&amp;rest&lt;=1000000)
                if (judge[rest])
                {
                    if (abs(rest-v)&lt;MIN)
                    {
                        MIN=abs(rest-v);
                        ansless=min(rest,v);
                        ansbigger=max(rest,v);
                    }
                }
            judge[v]=true;
        }
        if (MIN==INF) printf("Sad\n");
        else printf("%d %d\n",ansless,ansbigger);
    }
    return 0;
}
</code></pre>

<p>B题 <a href="http://code.bupt.edu.cn/problem/p/438/">BOJ 438 田田的公司</a></p>

<p>赤果果的一道并查集，没什么好说的，注意开long long的数组读的时候要用lld。附代码</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;cstdlib&gt;
#include &lt;cmath&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;

#define N 100005
#define INF 2222222
using namespace std;

int father[N];
int n,m;
long long sum[N];

void init()
{
    for (int i=1;i&lt;=n;i++)
        father[i]=i;
}

int getfather(int x)
{
    if (father[x]!=x) father[x]=getfather(father[x]);
    return father[x];
}

bool judge(int x,int y)
{
    if (getfather(x)==getfather(y))
        return true;
    else
        return false;
}

void getPlus(int x,int y)
{
    int a=getfather(x);
    int b=getfather(y);
    father[a]=b;
    sum[b]=sum[a]+sum[b];
}
int main()
{
    int T;
    cin&gt;&gt;T;
    while (T--)
    {
        scanf("%d%d",&amp;n,&amp;m);
        init();

        for (int i=1;i&lt;=n;i++)
        {
            scanf("%lld",&amp;sum[i]);
        }

        for (int i=1;i&lt;=m;i++)
        {
            int order,x,y;
            scanf("%d",&amp;order);
            if (order==1)
            {
                scanf("%d%d",&amp;x,&amp;y);
                if (!judge(x,y))
                    getPlus(x,y);
            }
            else if (order==2)
            {
                scanf("%d",&amp;x);
                int a=getfather(x);
                printf("%lld\n",sum[a]);
            }
        }
    }
}
</code></pre>

<p>C题 BOJ <a href="http://code.bupt.edu.cn/problem/p/439/">439. 崔逗逗的难题</a></p>

<p>纯粹的数学几何题，推导出公式来就能出结果。如果不清楚精度的问题，那么这道题还是很难作对的。在此记录一下，double里存的数，14位是绝对准确的，15位不能保证，会有误差。long double 要用 %Lf 来读入和输出。代码</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;cstdlib&gt;
#include &lt;cmath&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;

using namespace std;

const double Pi=acos(-1.0000);
double S3=1.000000-(Pi/6.0000+sqrt(3.000)/4.000);
double S1=Pi-3.00000+4.0000*S3;
double S2=4.00000-Pi-8.0000*S3;

int main()
{
    double a;
    while (scanf("%lf",&amp;a)!=EOF)
    {
        printf("%.6f %.6f %.6f\n",(acos(-1)-3.0000+4.0000*(1.0000-(acos(-1)/6.0000+sqrt(3.0000)/4.000)))*pow(a,2),
               (4.0000-acos(-1)-8.0000000*(1.000000-(acos(-1)/6.0000+sqrt(3.000)/4.000)))*pow(a,2.0000),
               4.000000*(1.0000-(acos(-1)/6.000+sqrt(3.00)/4.000))*pow(a,2.00000000));
    }
}
</code></pre>

<p>D题 <a href="http://code.bupt.edu.cn/problem/p/435/">BOJ 435. 崔逗逗给你信心</a></p>

<p>这题我是打表找到规律，符合条件的全都是二进制数中1都不相邻的。也可以证明，m ^ (2m) ^ (3m) = 0等价于m ^ (2m) = 3m,而m + 2m = 3m ，所以只要可以让一个数和他乘2（也就是二进制左移一位）的加法和按位异或等同就行，很明显，必须是1对0，0对1或者0，也就是说，移位以后不能出现1与1对其的情况，所以符合条件的数是不能存在多个个连续的1的。</p>

<p>想到了这点以后，后面的想法跟康托展开有些类似</p>

<p>（PS：这里我说下康托展开，康托展开求的，几个不同的数的全排列中，比当前排列的数小的有多少个，其实运用一下排列组合的思想就很容易得到结果，直接举个例子吧，32514698这个数，从第一位开始，求比他小的数的个数，就是对于第一位，前面没有出现的数中（也就是2—8位的数），比3小的共有2个（1和2），那么第一位比三小的数（自然也就比这个数要小），总共有2<em>7！（7！是后面七个数的全排列）个；第一位是3的数中，只需要按照这个规律来求后面就行了，比如第二位是2，就有1</em>6!,后面也是同理，所以康托展开的公式就是sigma(a[i]*(n-1)!)(这个理解了原理，就一切好说了）</p>

<p>这题其实也就算是二进制里加了些条件的康托展开吧，对，先有一个准备工作，就是求n位的2进制数中，符合条件的总共有多少种(（用数组d[ ]来表示）)。其实是个菲波那契数列，证明如下： 对于任何位数大于3的数，个位有2种情况：1 个位是0；2 个位是1。当个位是0时，只要十位以上的所有位位符合条件，这个数就符合条件，总共有d[n-1]种；当个位是1时，十位必须是0，然后百位以上只要符合，这个数就符合，总共有d[n-2]种。综上，就有d[n]=d[n-1]+d[n-2] (PS:这里把0看成是0位数，不是1位数，因为最高位不能是0)，通过预处理就能把这个数组搞定（最好再求和一次），之后就是康托展开的原理了。对于每位，如果是1，把他看作0，那么无论后面的位是怎样的，都会小于这个数；如果没有连续的1，就一直找到个位；如果出现连续的1，那么找完连续1那一位就可以停止了，因为把1变成0后的所有情况都计算过了。代码</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;cstdlib&gt;
#include &lt;cmath&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;
#define MOD 1000000009
#define N 100
using namespace std;

int b[N]={1,1,1,2};
int sum[N]={1,2,3,5};
int a[N]={0};
void build()
{
    for (int i=4;i&lt;=64;i++)
    {
        b[i]=(b[i-1]+b[i-2])%MOD;
        sum[i]=(sum[i-1]+b[i])%MOD;
    }
}

int main()
{
    long long n;
    build();
    while (scanf("%lld",&amp;n)!=EOF)
    {
        long long rec=n;
        int cnt=0;
        if  (rec==0)
        {
            cnt=1;
            a[0]=0;
        }
        while (rec!=0)
        {
            a[cnt++]=rec&amp;1;
            rec=rec&gt;&gt;1;
        }
        int ans=0;

        for (int i=cnt-1;i&gt;=0;i--)
        {

            if (i!=0&amp;&amp;a[i]==1)
            {
                ans=(ans+sum[i])%MOD;
                if (a[i-1]==1)
                {
                    a[i-1]=0;
                    ans=(ans+sum[i-1])%MOD;
                    break;
                }
            }
            else if(i==0)//十位是0，个位是1或0,或十位是1,个位是0的情况。
            {
                if (a[i]==1)
                    ans=(ans+2)%MOD;
                else
                    ans=(ans+1)%MOD;
            }
        }
        printf("%d\n",ans);
    }
}
</code></pre>

<p>E <a href="http://code.bupt.edu.cn/problem/p/434/">BOJ 434. 焦级长搭积木</a></p>

<p>还是一道dp题，只不过要求输出对应的第k小的策略。 先说dp的思路，dp[n][m][h]代表总共用了n个积木，底层积木数为m，高度为h的情况的方案数。那么对于每一个状状态（层数不为1的），都可以看成是在之前一个状态的底部再加一层。那么就有dp[n][m][h]=dp[m][m][1]<em>dp[n-m][m-1][h-1]+dp[m][m][1]</em>dp[n-m][m+1][h-1]=dp[n-m][m-1][h-1]+dp[n-m][m+1][h-1] (别告诉我你不知道dp[i][i][1]=1); 通过这个状态转移方程，很容易就能在n<em>m</em>h的复杂度内得出结果。接下来的问题是如何进行输出，怎么说呢，其实还是康托展开的思想，对于每一个状态（底层为m个的），它的第二层只可能出现两种情况（m-1和m+1)，m-1的状态肯定小于m+1的状态。那么我们只需要判断k是否大于m-1的所有方案数，如果大于，说明第k小的方案在m+1这种状态中，这是要注意转移到下一个转状态的时候，比较区间也就变了，需要让k减去m-1的所有状态（因为转移到下一个状态以后，m+1已经成了前提条件）；如果不大于，就说名第k小的数在m-1这个状态中。（PS：感谢xxhh的点拨）代码</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;cstdlib&gt;
#include &lt;cmath&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;

using namespace std;

long long dp[600][20][66];
long long k;

void print(int n,int m,int h)
{

    if (h==1)
    {
        printf("%d\n",m);
        return;
    }
    printf("%d ",m);
    if (k&lt;=dp[n-m][m-1][h-1])
        print(n-m,m-1,h-1);
    else
    {
        k-=dp[n-m][m-1][h-1];
        print(n-m,m+1,h-1);
    }
}
int main()
{
    int n,h,m;
    while (~scanf("%d%d%d",&amp;n,&amp;h,&amp;m))
    {
        memset(dp,0,sizeof(dp));
        for (int i=1;i&lt;=10;i++)
            dp[i][i][1]=1;
        for (int H=2;H&lt;=h;H++)
            for (int M=1;M&lt;=10;M++)
                for (int N=M;N&lt;=min(n,H*10);N++)
                    dp[N][M][H]=dp[N-M][M-1][H-1]+dp[N-M][M+1][H-1];
        printf("%lld\n",dp[n][m][h]);

        while (scanf("%lld",&amp;k),k!=-1)
            print(n,m,h);


    }
}
</code></pre>

<p><a href="/blog/archives/">&lt;-BACK</a></p>
]]></content>
  </entry>
  
</feed>
