<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 最短路 | hnnwang's Blog]]></title>
  <link href="http://whn757397540.github.io/tags/zui-duan-lu/atom.xml" rel="self"/>
  <link href="http://whn757397540.github.io/"/>
  <updated>2015-08-10T13:04:28+08:00</updated>
  <id>http://whn757397540.github.io/</id>
  <author>
    <name><![CDATA[hnnwang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[图论总结(一)]]></title>
    <link href="http://whn757397540.github.io/blog/2015/03/14/tu-lun-zong-jie-%5B%3F%5D/"/>
    <updated>2015-03-14T18:54:04+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/03/14/tu-lun-zong-jie-[?]</id>
    <content type="html"><![CDATA[<p>今天搞了一天的图论，重新熟悉了下Dijkstra，SPFA，PRIM和Kruskal算法，这里总结一下！</p>

<!--more-->


<p>先来几道例题（大部分是《挑战程序设计竞赛》中的例题）</p>

<ol>
<li><a href="http://poj.org/problem?id=3255">POJ3255 Roadblocks</a></li>
</ol>


<p>这是一个次短路的题目，题意就是给你R条道路，总共有N个路口，问你从1号路口到N号路口的次短路（如果存在多个最短路，次短路就是比最短路长比其他所有路径都要短的路的长度）。求次短路有几种方法，这里我用的是《挑战程序设计竞赛》中提到的Dijkstra的方法，（至于求K短路的方法，这个等下一次总结再说！）</p>

<p>这个主要是要理解了Dijkstra的思想，我们想一下，从顶点1到某个顶点v的次短路要么是到顶点u的最短路加上u到v的边，要么是到顶点u的次短路加上顶点u到顶点v的边。所以更新的时候要用到到某个顶点u的最短路d[u]和到某个定点u的次短路dd[u],更新的规则如下：①先看d[u]能不能更新，需要更新则更新，同时也要更新次短路；②再看次短路能不能更新，需要更新则更新。（对于上面的两步操作，《挑战程序设计竞赛》上用了一种很巧妙的方法，具体请看代码）。这里说一下，用优先队列优化Dijkstra算法，在这个里面，要根据实际情况选择是用最短路入队还是用次短路入队，具体参考代码！代码如下：</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;set&gt;
#include &lt;algorithm&gt;
#include &lt;map&gt;
#include &lt;queue&gt;
#include&lt;vector&gt;

using namespace std;
const int maxv = 5500;
const int maxe = 200100;
const int INF = 0x3fffffff;
struct Edge
{
    int from, to, cost, next;
    Edge() {}
    Edge(int from, int to, int cost, int next):from(from),to(to),cost(cost),next(next) {}
};
int head[maxv];
Edge E[maxe];
int nume;

void init()
{
    memset(head, -1, sizeof(head));
    nume = 0;
}

void addEdge(int u, int v, int cost)
{
    E[nume] = Edge(u,v,cost,head[u]);
    head[u] = nume++;
}

int d[maxv],dd[maxv];
priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt; &gt;, greater&lt;pair&lt;int, int&gt; &gt; &gt; que;

void dijkstra(int s, int e)
{
    fill(d, d+e+1, INF);
    fill(dd, dd+e+1, INF);
    d[s] = 0;
    que.push(make_pair(0,s));

    while (!que.empty())
    {
        pair&lt;int,int&gt; p = que.top();
        que.pop();
        int v = p.second;
        if (dd[v] &lt; p.first) continue;
        for (int i = head[v]; i != -1; i = E[i].next)
        {
            int from = E[i].from, to = E[i].to, dis = E[i].cost;
            int tmp = p.first + dis;
            if (d[to] &gt; tmp)
            {
                swap(d[to], tmp);
                que.push(make_pair(d[to], to));
            }
            if ( dd[to] &gt; tmp &amp;&amp; d[to] &lt; tmp)
            {
                dd[to] = tmp;
                que.push(make_pair(dd[to], to));
            }
        }
    }
}

int main()
{
    //freopen("in.txt", "r", stdin);
    int n,m;
    while(scanf("%d%d", &amp;n, &amp;m)!=EOF)
    {
        init();
        for (int i = 0; i &lt; m; i++)
        {
            int x,y,v;
            scanf("%d%d%d", &amp;x, &amp;y, &amp;v);
            addEdge(x,y,v);
            addEdge(y,x,v);
        }
        dijkstra(1,n);
        printf("%d\n", dd[n]);
    }

}
</code></pre>

<ol>
<li><a href="http://poj.org/problem?id=3169">POJ 3169 Layout</a></li>
</ol>


<p>这道题就需要思考怎么建图了，不看书我预计是不能够相处这么一种建图的方法的，因为做的少还不会。算是学习一下吧！</p>

<p>题意是给你N头牛，按照从近到远的顺序排列，牛与牛的距离可以是0，然后牛与牛的关系不同，有些牛之间的关系比较好，它们希望彼此之间的间距不要超过一定的距离；有些牛之间的关系比较差，它们希望彼此之间的间距不能小于一定的距离。先给出牛的个数N（编号从1到N，有序），给出你ML组关系好的牛的信息（AL,BL,DL）（AL&lt;=BL）表示牛AL和牛BL之间的距离不能大于DL，给出你MD组关系差的牛的信息（AD,BD,DD)（AD &lt;= BD）表示牛AD和牛BD之间的距离不能小于DD。问你在满足所有这些约束关系的情况中，1号牛和N号牛之间的最大距离。</p>

<p>这里我就借助书上说的思路来讲解一下了，也算是总结了。首先，设第i号牛的距离为的di,我们可以根据约束条件得出下面几个式子:①牛的编号是有序的，而且牛与牛之间的距离可以是0，那么有d[i]&lt;=d[i+1];②对于每对关系好的牛(AL&lt; BL)之间有最大距离限制DL，所以必须满足 d[BL] - d[AL] &lt;= DL;③，对于每对关系比较差的牛（AD &lt; BD）之间有最小距离限制DD，所以必须满足 DD &lt;= d[BD] - d[AD]. 综合上面三组式子，其实可以列一个线性规划，但是显然，这个用计算机来实现很麻烦，现在问题的关键来了，怎么把它跟图联系起来呢？就现在的我来说，我是想不到该怎么办的！不过看了书之后，感觉书上的做法确实很敲秒，事实上，图论的题目难就难在建图，这里才是思考的关键，得慢慢练，下面说建图的方法：</p>

<p>我们来想一下，对于最短路d[u]和d[v]两个顶点，我们总有d[u] + w[u][v] >= d[v]成立（否则d[v]就不是最短路了），那么如果u = 1, v = n，我们就有d[1] + w[1][n] >= d[n]成立，即d[n] &lt;= w[1][n],从这里我们可以看出，d[n]的最大值就是w[1][n]，也就是从1到n的最短距离。</p>

<p>对比一下上面的分析，不难看出其实式子的模样很像，看，对于①，我们可以写成d[i+1] + 0 >= d[i]， 所以我们需要建一个从i+1指向i的长度为0的边；对于②， 我们可以写成d[AL]+DL >= d[BL]，我们应该建一个从AL指向BL的长度为DL的边；对于③，我们可以写成d[BD] - DD >= d[AD],所以我们应该建一个从BD指向AD的长度为-DD的边。从第对牛的关系的分析可知，这里d[u]代表牛u和牛1的距离，所以我们需要求的是d[n]的最大值，而通过对最短路的分析我们可知，d[n]的最大值也就是从1到n的最短距离。（看起来是不是好怪的样子qq_pp），所以我们建好图之后只需要求出最短路d[n]就行！</p>

<p>由于存在负边，所以我们这里用的是SPFA算法（Dijkstra算法不能处理负边的情况），我的代码如下：</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;set&gt;
#include &lt;algorithm&gt;
#include &lt;map&gt;
#include &lt;queue&gt;
#include&lt;vector&gt;

using namespace std;
const int maxv = 1010;
const int maxe = 20200;
const int INF = 0x3fffffff;
struct Edge{
    int from,to,cost,next;
    Edge(){};
    Edge(int from, int to, int cost, int next) : from(from), to(to), cost(cost), next(next){}
}E[maxe];
int head[maxv];
queue&lt;int&gt; que;
int nume;

void init()
{
    nume = 0;
    memset(head, -1, sizeof(head));
}

void addEdge(int u, int to, int cost)
{
    E[nume] = Edge(u,to,cost,head[u]);
    head[u] = nume++;
}

int d[maxv];
int cnt[maxv];
bool inq[maxv];
bool SPFA(int s, int e)
{
    fill(d, d+e+1, INF);
    memset(inq, 0, sizeof(inq));
    memset(cnt, 0, sizeof(cnt));
    //cout&lt;&lt;1&lt;&lt;endl;
    d[s] = 0;
    inq[s] = true;
    que.push(s);
    while(!que.empty())
    {
        int u = que.front();
        que.pop();
        inq[u] = false;
        for (int i = head[u]; i != -1; i = E[i].next)
        {
            int to = E[i].to, w = E[i].cost;
            if (d[u] &lt; INF &amp;&amp; d[to] &gt; d[u] + E[i].cost)
            {
                d[to] = d[u] + E[i].cost;
                if (!inq[to])
                {
                    que.push(to);
                    inq[to] = true;
                    if (++cnt[to] &gt; e)
                            return false;
                }
            }
           // cout&lt;&lt;
        }
       // cout&lt;&lt;u&lt;&lt;endl;
    }
    return true;
}

int main()
{
     int n, ml, md;
     while(scanf("%d%d%d", &amp;n, &amp;ml, &amp;md) == 3)
     {
         init();
         for (int i = 1; i &lt; n; i++)
            addEdge(i+1, i, 0);
         for (int i = 0; i &lt; ml; i++)
         {
             int a,b,dis;
             scanf("%d%d%d", &amp;a, &amp;b, &amp;dis);
             addEdge(a, b, dis);
         }
         for (int i = 0; i &lt; md; i++)
         {
             int a,b,dis;
             scanf("%d%d%d", &amp;a, &amp;b, &amp;dis);
             addEdge(b, a, -dis);
         }
       //  cout&lt;&lt;1&lt;&lt;endl;
         if (SPFA(1, n))
         {
             if (d[n] &lt; INF)
                printf("%d\n", d[n]);
             else
                printf("%d\n", -2);
         }
         else
            printf("%d\n", -1);

     }
}
</code></pre>

<p>以上是Dijkstra算法和SPFA算法的两个例子，这里总结一下二者的区别，首先，从思想上来说，Dijkstra算法是 从一点开始依次更新每一点，每次取距离初始点最近的一个点对接下来的点进行更新；而SPFA是对每一个节点进行多次松弛操作，直到所有的节点都是最短路为止！从实现上来看，Dijkstra的算法代码跟SPFA是非常像的，在我看来，不同点就在于：第一，DJ用的是优先队列，而SPFA用的是普通FIFO队列；第二，DJ每个元素只入队一次，而SPFA可以入队多次（据说一般不超过2次）（好了，我承认，这是在刘汝佳紫书上看的，不过很对不是？）。然后，一般情况下，DJ是比较稳定的，是SPFA的时间复杂度不够稳定，所以，如果不是特殊需要（比如有负边或者负环啦），最好还是用时间比较稳定的DJ。（PS:外国不承认SPFA，只认Bellman-ford，而SPFA就是在Bellman-ford的基础上加了个队列优化。）</p>

<p>最后对于最短路，再说一下路径还原的事情，以DJ为例，我们要还原出最短路来，只需要在更新最短路的过程中加上一个队父亲节点的更新（记录最短路上to节点的父亲节点是最短路上的from节点），最后从目标节点回溯回去即可。正好前些天CF的E题就用到了最短路的还原，实在是敲累了，思想说了，直接挂代码了（这里的代码是我最开始根据最短路DJ的思想敲的，没有板子，姿势可能有点丑，不过也懒得改了）</p>

<p><a href="http://codeforces.com/contest/507/problem/E">CF 507E</a></p>

<p>题意简单说以下，就是给你一个图，这个图中每条路的路径长度都是1，每条路有通(1)和不通(0)两种状态。你要从1号点到n号点，而且你所走的路径上的所有路都要修好（就是如果有0要变成1），其他的所有路都要拆断（就是所有不属于你走的路径上的路如果有1都要变成0），要求走最短路（距离最短），如果有多个最短路，走需要作出的改变最少的那一种路（如果还是有多种，任何一种都行）。要求输出最少的改变数和每个改变的信息！代码如下：</p>

<pre><code class="c++">#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
#include &lt;queue&gt;
#include &lt;vector&gt;

using namespace std;
const int maxv = 200100;
const int maxe = 200100;
struct Edge{
    int from, to, state, next;
    Edge(){}
    Edge(int from, int to, int state, int next):from(from),to(to),state(state),next(next){}
};
int head[maxv];
Edge E[maxe];
int v,cntedge;

void init()
{
    memset(head, -1, sizeof(head));
    cntedge = 0;
}

void addEdge(int u, int v, int state)
{
    E[cntedge] = Edge(u,v,state,head[u]);
    head[u] = cntedge++;
}

int d[maxv],father[maxv],dd[maxv];
priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt; &gt;, greater&lt;pair&lt;int, int&gt; &gt; &gt; que;

void dijkstra(int s, int e)
{
   fill(d, d+e+1, maxv+1);
   fill(dd, dd+e+1, 0);
   fill(father, father+e, -1);
   d[s] = 0;
   pair&lt;int, int&gt; now = make_pair(0, s);
   while (now.second != e)
   {
        for (int v = head[now.second]; v != -1; v = E[v].next)
        {
            int from = E[v].from, to = E[v].to;
            if (d[to] &gt; d[from] + 1 || d[to] == d[from] + 1 &amp;&amp; dd[to] &lt; dd[from] + E[v].state)
            {
                dd[to] = dd[from] + E[v].state;
                d[to] = d[from] + 1;
                father[to] = v;
                que.push(make_pair(d[to], to));
            }
          //  cout&lt;&lt;to&lt;&lt;d[to]&lt;&lt;endl;
           // cout&lt;&lt;v&lt;&lt;" "&lt;&lt;to&lt;&lt;endl;
        }
      //  cout&lt;&lt;now.second&lt;&lt;endl;
        now = que.top();
        // cout&lt;&lt;now.second&lt;&lt;endl;
        que.pop();
        //system("pause");
   }
}
bool judge[maxe];
typedef pair&lt;int, int&gt; P;
typedef pair&lt;P, int&gt; PP;
vector&lt;PP&gt; ans;
void getAns(int aim)
{
    memset(judge, 0, sizeof(judge));
    ans.clear();
    int tp = aim;
    while (father[tp] != -1)
    {
        int e1 = father[tp];
        tp = E[e1].from;
        judge[e1] = true;
        judge[e1^1] = true;
    }
    for (int i = 0; i &lt; cntedge; i++)
    {
        if (judge[i])
        {
            if (E[i].state == 0 &amp;&amp; !(i&amp;1))
                ans.push_back(make_pair(make_pair(E[i].from, E[i].to), 1));
        }
        else
        {
            if (E[i].state == 1 &amp;&amp; !(i&amp;1))
                ans.push_back(make_pair(make_pair(E[i].from, E[i].to), 0));
        }
    }
}
int main()
{
    //freopen("in.txt", "r", stdin);
    int n,m;
    while (scanf("%d%d", &amp;n, &amp;m) == 2)
    {
        init();
        for (int i = 0; i &lt; m; i++)
        {
            int x,y,v;
            scanf("%d%d%d", &amp;x, &amp;y, &amp;v);
            addEdge(x,y,v);
            addEdge(y,x,v);
           // cout&lt;&lt;0&lt;&lt;endl;
        }
        while (!que.empty())
            que.pop();
        //cout&lt;&lt;0&lt;&lt;endl;
        dijkstra(1,n);
       // cout&lt;&lt;1&lt;&lt;endl;
        getAns(n);
       // cout&lt;&lt;2&lt;&lt;endl;
        printf("%d\n", ans.size());
        for (int i = 0; i &lt; ans.size(); i++)
        {
            printf("%d %d %d\n", ans[i].first.first, ans[i].first.second, ans[i].second);
        }

    }

}
</code></pre>

<p>最短路的总结暂时就告一段落了，这也是今天总结最主要的一部分，下面简单来说一说最小生成树！还是先来看例题。</p>

<ol>
<li><a href="http://poj.org/problem?id=3723">POJ 3723 Conscription</a></li>
</ol>


<p>题意：招募女兵n人，男兵m人，每人需要花费10000快，某些女兵同某些男兵之间有一定的亲密度（1–9999），招募某个人的费用是10000-（已经招募了的人之中和自己亲密度的最大值）。问你征募所有人所需的最小费用是多少。</p>

<p>首先，所有人都要招募，所以我就先把所有人都招募进来，总共花费(n+m)*10000，但是有些人花费的要少一些，我们只需要把少的这些从总费用里扣除掉就行。少多少实际上可以用亲密度的最大生成树来表示（或者有可能是最大生成森林），当然，如果权值取亲密度的相反数，那么就是最小生成树了。这里用Kurskal算法比较好，一是点比较多，20000，二是PRIM求最小生成森林也比较麻烦，当然，主要原因是第一点。不多说了，上代码：</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;set&gt;
#include &lt;algorithm&gt;
#include &lt;map&gt;
#include &lt;queue&gt;
#include&lt;vector&gt;

using namespace std;
const int maxv = 20020;
const int maxe = 100100;
const int INF = 0x3fffffff;
struct Edge{
    int x, y, d;
    bool operator &lt;(Edge p)const{return d &lt; p.d;}
};

int n,m,r;
Edge E[maxe];

int father[maxv];

void init(int n)
{
    for (int i = 0; i &lt; n; i++)
        father[i] = i;
}
int getfather(int i)
{
    if (father[i] == i)
        return i;
    return father[i] = getfather(father[i]);
}

bool judge(int i, int j)
{
    int a = getfather(i), b = getfather(j);
    if (a == b)
        return true;
    return false;
}

void getUnion(int i, int j)
{
    int a = getfather(i), b = getfather(j);
    father[a] = b;
}

int main()
{
     int t;
     scanf("%d", &amp;t);
     while(t--)
     {
         scanf("%d%d%d", &amp;n, &amp;m, &amp;r);
         init(n+m);
         for (int i = 0; i &lt; r; i++)
         {
             int x,y,d;
             scanf("%d%d%d", &amp;x, &amp;y, &amp;d);
             E[i] = (Edge){x, y+n, -d};
         }
         sort(E, E+r);
         int ans = (n+m)*10000;
         for (int i = 0; i &lt; r; i++)
         {
             if (!judge(E[i].x, E[i].y))
             {
                 ans += E[i].d;
                 getUnion(E[i].x,E[i].y);
             }
         }
         printf("%d\n", ans);
     }
}
</code></pre>

<p>最后，还找了一道PRIM的练习题，如下</p>

<p><a href="http://poj.org/problem?id=1251">POJ 1251 Jungle Roads</a></p>

<p>赤果果的一道最小生成树的题目，只不过读入的方式不太一样而已。这里只有不到30个点，所以用PRIM还是一点问题都没有的。还是挂一下代码吧！</p>

<p>PRIM代码</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;set&gt;
#include &lt;algorithm&gt;
#include &lt;map&gt;
#include &lt;queue&gt;
#include&lt;vector&gt;

using namespace std;
const int maxv = 1010;
const int maxe = 20200;
const int INF = 0x3fffffff;
typedef pair&lt;int, int&gt; P;

int a[30][30];
int n,m;
bool vis[30];
int PRIM()
{
    fill(vis, vis+n, false);
    int res = 0;
    priority_queue&lt;P, vector&lt;P&gt;, greater&lt;P&gt; &gt; que;
    for (int i = 0; i &lt; n; i++)
        if (a[0][i] &lt; INF)
            que.push(make_pair(a[0][i], i) );
    vis[0] = true;
    while(!que.empty())
    {
        P u = que.top();que.pop();
        if (vis[u.second]) continue;
        res += u.first;
        vis[u.second] = true;
        for (int i = 0; i &lt; n; i++)
        {
            if (!vis[i])
                que.push(make_pair(a[u.second][i], i));
        }
    }
    return res;
}
int main()
{
    while (scanf("%d", &amp;n))
    {
        if (n == 0)
            break;
        for (int i = 0; i &lt; n; i++)
            for (int j = 0; j &lt; n; j++)
                a[i][j] = INF;

        for (int i = 0; i &lt; n-1; i++)
        {
            char c;
            scanf("%s%d", &amp;c, &amp;m);
            int x = c-'A';
            for (int j = 0; j &lt; m; j++)
            {
                char ch;
                int len;
                scanf("%s%d", &amp;ch, &amp;len);
                a[x][ch-'A'] = len;
                a[ch-'A'][x] = len;
            }
         }
         int res = PRIM();
         printf("%d\n",res);
     }
}
</code></pre>

<p>KRUSKAL代码</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;set&gt;
#include &lt;algorithm&gt;
#include &lt;map&gt;
#include &lt;queue&gt;
#include&lt;vector&gt;

using namespace std;
const int maxv = 30;
const int maxe = 1000;
const int INF = 0x3fffffff;
typedef pair&lt;int, int&gt; P;
typedef pair&lt;int, P&gt; Edge;

Edge E[maxe];
int n,m;
int nume;
int father[maxv];

void init(int n)
{
    for (int i = 0; i &lt; n; i++)
        father[i] = i;
    nume = 0;
}

int getfather(int i)
{
    if (father[i] == i)
        return i;
    return father[i] = getfather(father[i]);
}

bool judge(int i, int j)
{
    int a = getfather(i), b = getfather(j);
    return a == b;
}

void getUnion(int i, int j)
{
    int a = getfather(i), b = getfather(j);
    father[a] = b;
}

int Kruskal()
{
    sort(E, E+nume);
    int res = 0;
    for (int i = 0; i &lt; nume; i++)
    {
        P tp = E[i].second;
        if (!judge(tp.first, tp.second))
        {
            res += E[i].first;
            getUnion(tp.first, tp.second);
        }
    }
    return res;
}
int main()
{
    while (scanf("%d", &amp;n))
    {
        if (n == 0)
            break;
        init(n);

        for (int i = 0; i &lt; n-1; i++)
        {
            char c;
            scanf("%s%d", &amp;c, &amp;m);
            int x = c-'A';
            for (int j = 0; j &lt; m; j++)
            {
                char ch;
                int len;
                scanf("%s%d", &amp;ch, &amp;len);
                E[nume++] = make_pair(len, make_pair(x, ch-'A'));
            }
        }

        int res = Kruskal();
        printf("%d\n",res);
     }
}
</code></pre>

<p>总结一下，一般情况下，就用Kruskal吧，除非是稠密图（点特别少，边特别多的时候），我确实Kruskal掌握地比PRIM好一些，但是今天敲了下PRIM，确实是PRIM敲起来更加简单，还是要知道怎么用的，必要的时候要能够会用！</p>

<p>好了，今天一天干的事情大概都在上面了，真是，一个这个总结都写了2个多小时，╮(╯▽╰)╭，忧伤！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BUPT暑假训练2013级个人排位赛12]]></title>
    <link href="http://whn757397540.github.io/blog/2014/08/10/buptshu-jia-xun-lian-2013ji-ge-ren-pai-wei-sai-12/"/>
    <updated>2014-08-10T10:48:00+08:00</updated>
    <id>http://whn757397540.github.io/blog/2014/08/10/buptshu-jia-xun-lian-2013ji-ge-ren-pai-wei-sai-12</id>
    <content type="html"><![CDATA[<h2>第十二场</h2>

<p>A题 <a href="http://code.bupt.edu.cn/problem/p/494/">BOJ 494. Study sister’s barbarian</a></p>

<p>poj原题，原题链接在这里<a href="http://poj.org/problem?id=2828">POJ2828</a></p>

<p>难在分析，离线处理，倒着分析。分析就会发现，如果是到这来的话，那么所给的位置，应该就代表空格的位置，也就是给你的位置是k的话，就代表第k个空格。（为什么？自己想一想）然后就是找第k个空格的位置插进去了。</p>

<p>直接暴力肯定不行啦，优化一点。空格个数怎么统计？树状数组呗，可以很容易在logn的时间内求出前n项和，查找位置的话，二分即可，分析下复杂度，是nlog<sup>2</sup> n,在POJ上来说，已然绰绰有余了，因为POJ上的时限是4s（感觉优化的暴力也能过），而在BOJ上，时限为2s,上述做法，姿势要好才能过。有没有更快的方法呢？有，线段树。</p>

<p>什么？线段树不是比树状数组要慢吗？确实，不过那是对于同样的时间复杂度来说的，这道题，目前我还没想到nlogn复杂度的树状数组想法，但是用线段树，很容易就能在nlogn的时间内解出来。区间存空格个数就行了，比较的时候比较左边的空格跟你的目标的大小就行。代码</p>

<pre><code class="c++">#include &lt;cstdio&gt;
#include &lt;iostream&gt;
const int N = 200005;

struct TREE
{
    int l,r;
    int data;
}a[4*N];

int b[N],c[N],ans[N];
bool flag;

void buildTree(int now,int l,int r)
{
    int lson = 2*now,rson = 2*now+1;

    a[now].l=l;
    a[now].r=r;

    if (l == r)
    {
        a[now].data = 1;
        return;
    }
    int mid=(l + r) &gt;&gt; 1;
    buildTree(lson,l,mid);
    buildTree(rson,mid+1,r);
    a[now].data=a[lson].data+a[rson].data;
}

void Insert(int now,int aim,int dat)
{

    if (a[now].l==a[now].r)
    {
        a[now].data = 0;
        ans[a[now].l] = dat;
        return;
    }

    int lson = 2*now,rson = 2*now+1;

    if (aim&lt;=a[lson].data)
        Insert(lson,aim,dat);
    else
        Insert(rson,aim-a[lson].data,dat);

    a[now].data = a[lson].data + a[rson].data;
}



int main()
{
    int n;

    while (scanf("%d",&amp;n) != EOF)
    {
        for (int i = 0; i &lt; n; i++)
        {
            scanf("%d%d",&amp;b[i],&amp;c[i]);
            b[i]+=1;
        }
        buildTree(1,1,n);
        for (int i = n - 1; i &gt;= 0; i--)
        {
            flag=false;
            Insert(1,b[i],c[i]);
        }
        for (int i = 1;i &lt; n; i++)
            printf("%d ",ans[i]);
        printf("%d\n",ans[n]);
    }
}
</code></pre>

<p>D题 <a href="http://code.bupt.edu.cn/problem/p/491/">BOJ 491. Study sister’s wizard</a></p>

<p>呵呵，哈希就好，用预处理后O（1)的那种姿势。这里我用的另外一种姿势，主要是字符串长度给定了，所以求hash的时候，求出第一个串来以后，依次递推，每次去首加尾就好。</p>

<p>求完后吧hash值存到一个数组中，分别比较连续的序列是否相等就行。复杂度为O（n）具体看代码吧</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;cstring&gt;
#include &lt;cmath&gt;

typedef unsigned long long ull;

using namespace std;

const ull B=1e9+7;
const int N=1e5+7;
ull a[N];
int m,l;
int cnt;

void getHash(char s[])
{
    int len=strlen(s);
    cnt=0;

    ull Hash=0;
    ull BB=1;
    for (int i=0;i&lt;l;i++)
    {
        Hash=Hash*B+s[i];
        if (i&gt;0) BB*=B;
    }
    a[0]=Hash;
    for (int i=1;i&lt;=len-l;i++)
    {
        Hash=(Hash-s[i-1]*BB)*B+s[i+l-1];
        a[i]=Hash;
    }
}

int main()
{
    char s[N];
    while (scanf("%d%d",&amp;m,&amp;l)!=EOF)
    {
        scanf("%s",s);
        int len=strlen(s);
        getHash(s);
        cnt=1;
        int ans=0;
        //for (int i=0;i&lt;=len-l;i++)
           // printf("%ul ",a[i]);
        //cout&lt;&lt;endl;
        for (int k=0;k&lt;l;k++)
        {
            for (int i=k+l;i&lt;=len-l;i+=l)
            {
                if (a[i]==a[i-l]) cnt++;
                else
                {
                    if (cnt&gt;=m)
                        ans+=cnt-m+1;
                    cnt=1;
                }
            }
            if (cnt&gt;=m)
                ans+=cnt-m+1;
            cnt=1;
        }
        printf("%d\n",ans);


    }
}
</code></pre>

<p>E题 <a href="http://code.bupt.edu.cn/problem/p/490/">BOJ 490. Study sister’s dragon</a></p>

<p>能想到用dp来求就好做了。用dp[i][j]代表取到第i堆，状态为j(前几堆的异或和为j)的概率，然后就很容易写出dp方程</p>

<p>dp[i][j]+=dp[i-1][j xor k]*1/a[i];</p>

<p>由于只跟之前一个状态有关系，可以用滚动数组来节省空间。代码在这里</p>

<pre><code class="c++">#include &lt;cstdio&gt;

int main()
{
    int n;
    while (scanf("%d",&amp;n) != EOF)
    {
        int num;
        double dp[2][130]={0};
        scanf("%d",&amp;num);
        for (int i = 1;i &lt;= num; i ++)
            dp[0][i] = 1.000/num;
        int now=0;
        for (int i = 1;i &lt; n;i ++)
        {
            scanf("%d", &amp;num);
            for (int j = 0; j &lt; 128; j++)
            {
                dp[now^1][j]=0;
                for (int k = 1; k &lt;=num; k ++)
                    dp[now^1][j]+=dp[now][j^k]*(1.000)/num;
            }
            now^=1;
        }
        printf("%.6lf\n",dp[now][0]);
    }
}
</code></pre>

<p>G题 <a href="http://code.bupt.edu.cn/problem/p/497/">BOJ 497. Study sister’s clan</a></p>

<p>就是一道裸的图论题，强联通分量缩点，然后跑一遍最短路（Dijkstra或者SPFA都可，自己选择吧）就能出结果啦，照模板抄就行了。代码</p>

<pre><code class="c++">#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;vector&gt;
#include &lt;iostream&gt;
#include &lt;queue&gt;

#define MAX_V 2222
#define INF 555555
using namespace std;

int n;
vector&lt;int&gt; G[MAX_V];
vector&lt;int&gt; rG[MAX_V];
vector&lt;int&gt; vs;
bool used[MAX_V];
int cmp[MAX_V];
int d[MAX_V];

void addEdge(int from,int to)
{
    G[from].push_back(to);
    rG[to].push_back(from);
}

void dfs(int v)
{
    used[v] = true;
    for (int i = 0; i &lt; G[v].size(); i ++)
        if (!used[G[v][i]]) dfs(G[v][i]);
    vs.push_back(v);
}

void rdfs(int v, int k)
{
    used[v] = true;
    cmp[v] = k;
    for (int i = 0; i &lt; rG[v].size(); i ++)
    {
        if (!used[rG[v][i]]) rdfs(rG[v][i],k);
    }
}

int scc()
{
    memset(cmp,0,sizeof(cmp));
    memset(used,0,sizeof(used));
    vs.clear();
    for (int v = 1; v &lt;= n; v ++)
        if(!used[v]) dfs(v);
    memset(used,0,sizeof(used));
    int k=0;
    for (int i = vs.size() - 1;i &gt;=0; i--)
        if (!used[vs[i]]) rdfs(vs[i],k++);
    return k;
}

struct HeadNode
{
    int d,u;
    bool operator &lt; (const HeadNode&amp; rhs) const{
        return d &gt; rhs.d;
    }
};
void dijkstra(int s)
{
    priority_queue&lt;HeadNode&gt; q;
    for (int i = 1; i &lt;= n; i ++) d[i]=INF;
    d[s] = 0;
    memset(used,0,sizeof(used));
    q.push((HeadNode){0,s});
    while (!q.empty())
    {
        HeadNode x = q.top();q.pop();
        int u = x.u;
        if (used[u]) continue;
        used[u]=true;
        for (int i = 0; i &lt; G[u].size(); i++)
        {
            int to = G[u][i];
            if (d[to] &gt; d[u] + (cmp[u]==cmp[to] ? 0 : 1))
            {
                d[to] = d[u] + (cmp[u]==cmp[to]? 0 : 1);
                q.push((HeadNode){d[to],to});
            }
        }
    }
}
int main()
{
    int t;
    cin&gt;&gt;t;
    while (t--)
    {
        int m,k;
        scanf("%d%d%d",&amp;n,&amp;m,&amp;k);
        for (int i=1;i&lt;=m;i++)
        {
            int u,v;
            scanf("%d%d",&amp;u,&amp;v);
            addEdge(u,v);
        }
        scc();
        int a,b;
        scanf("%d%d",&amp;a,&amp;b);
        if (cmp[a] == cmp[b])
            printf("Input Error\n");
        else
        {
            dijkstra(a);
            if (d[b] &gt; k)
                printf("Sad\n");
            else
                printf("Good Job\n");
        }
        for (int i = 1;i &lt;= n;i ++)
        {
            G[i].clear();
            rG[i].clear();
        }
    }
    return 0;
}
</code></pre>

<p><a href="/blog/archives/">&lt;&ndash;BACK</a></p>
]]></content>
  </entry>
  
</feed>
