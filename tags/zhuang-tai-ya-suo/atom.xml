<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 状态压缩 | hnnWang's Blog]]></title>
  <link href="http://whn757397540.github.io/tags/zhuang-tai-ya-suo/atom.xml" rel="self"/>
  <link href="http://whn757397540.github.io/"/>
  <updated>2015-02-21T01:42:36+08:00</updated>
  <id>http://whn757397540.github.io/</id>
  <author>
    <name><![CDATA[hnnWang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[集合的整数表示]]></title>
    <link href="http://whn757397540.github.io/blog/2015/02/17/ji-he-de-zheng-shu-biao-shi/"/>
    <updated>2015-02-17T20:26:53+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/02/17/ji-he-de-zheng-shu-biao-shi</id>
    <content type="html"><![CDATA[<p>我们都知道状态压缩是个什么东东，状态压缩就是把每个状态（集合）用一个二进制代码来编码表示，这里使用了集合的整数表现，下面就谈一谈这个东西！</p>

<!--more-->


<p>在程序中表示集合的方法有很多种，当元素数比较少的时候，像状态压缩这样用二进制码来表示比较方便。集合S{0,1,2,…………，n-1}的子集可以用如下的方式编码成整数:</p>

<p>f(S) = sigma(2<sup>i</sup>)(i∈s)</p>

<p>像这样表示之后，一些集合运算就可以对应地写成如下的方式：</p>

<ul>
<li>空集∅: ………………………………………………………………………………………………0</li>
<li>只含有第i个元素的集合{i}………………………………………………………1/&lt;/&lt;i</li>
<li>含有全部n个元素的集合{0,1,2,…………,n-1}:…………………(1&lt;&lt;n)-1</li>
<li>判断第i个元素是否属于集合S:………………………………………………if (S>>i &amp; 1)</li>
<li>向集合中加入第i个元素S∪{i}:………………………………………………S|(1&lt;&lt;i)</li>
<li>从集合中除去第i个元素S\{i}:………………………………………………S|~(1&lt;&lt;i)</li>
<li>集合S和T的并集S∪T: ……………………………………………………………………S|T</li>
<li>集合S和T的交际S∩T: ………………………………………………………………………S&amp;T</li>
</ul>


<p>此外，想要将集合{0,1,2,……………，n-1}的所有子集枚举出来的话，可以像下面这样写</p>

<pre><code class="c++">for (int state = 0; state &lt; (1&lt;&lt;n); state++)
{
    //对子集的处理
}
</code></pre>

<p>上面的那些操作大家都应该非常熟悉了，不过我重点想要记录的是下面的东西:</p>

<blockquote><p>如何枚举某个集合sup的子集?这里sup是一个二进制码，其本身也是某个集合的子集。枚举全集的所有子集是非常容易的，就是上面所说的方法，但是对于任何一个集合sup的子集呢？我们考虑下，假如sub是sup的子集，那么此时sub+1不一定是sup的子集。而(sub+1)&amp;sup虽然一定是sup的子集，但是很有可能依然是sup。</p></blockquote>

<p>我们反过来想一下，从sup开始每次减1直到为0为止。由于sub-1并不一定是sup的子集，所以我们要把它与sup按位与&amp;。 这样的话就可以将sup的所有子集按照将序列举出来.</p>

<pre><code class="c++">int sub = sup;
do
{
    //对子集的操作
    sub = (sub-1) &amp; sup;
}while(sub != sup);//处理完0后，sub = -1, 这是 sub &amp; sup = sup;
</code></pre>

<blockquote><p>最后的，也是最难理解最不熟悉的，枚举{0,1,2,…………，n-1}所包含的所有大小为k的子集的方法： 通过使用位运算我们可以像如下代码所示简单的按照字典序升序地枚举出所有满足条件的二进制码。</p></blockquote>

<pre><code class="c++">int comb = (1 &lt;&lt; k) - 1;
while(comb &lt; (1&lt;&lt;n))
{
    //针对组合的处理
    int x = comb &amp; -comb, y = comb + x;
    comb = ((comb &amp; ~y) / x &gt;&gt; 1) | y;
}
</code></pre>

<p>按照字典序升序的话，最小的子集是(1&lt;&lt;k-1),所以用它作为初始值。现在我们求出comb其后的二进制码。例如0101110之后的是0110011,0111110之后的是1001111。下面是求出comb下一个二进制码的方法：</p>

<p>(1) 求出最低位的1开始的连续的1的区间(010110->0001110);
(2) 将这一个区间全部变为0，并将区间左侧的那个0变成1(0101110->0110000);
(3) 将第(1)步里取出的区间右移，直到剩下的1的个数减少了1个(0001110->0000011);
(4) 将第(2)步和第(3)步的结果按位取或(0110000|0000011 = 0110011)</p>

<p>对于非0的整数， x&amp;(-x)的值就是将其最低位的1独立出来后的 值。这是由于计算机中负数采用二进制补码表示，-x实际上对应于(~x)+1.</p>

<p>将最低位的1取出后，设它为x，那么通过计算y = comb+x, 就完成了第(1)(2)步了；我们来比较下~y和comb。再comb中加上x后没有变化的位，再~y中全部都取相反的值。而最低位1开始的连续区间再~y中依然是1，区间左侧的那个0再~y中也依然是0.于是通过计算z = comb &amp; ~y 就得到了最低位1开始的连续区间。自己举个例子体会下！</p>

<p>那么首先将z不断右移，直到最低位为1，这通过计算z/x即可完成。这样再将z/x右移一位就得到了第（3）步要求的值。而y又是第二步求的值，这样我们就求得了comb之后的下一个二进制码,因为是从n个元素的集合中进行选择,所以comb的值不能大于等于1&lt;&lt;n。如此以来，就完成了所有打消为k的所有子集的枚举！</p>

<p>除了以上所说的，还有好多好多其他好玩的东西，这些都是要玩转位运算后才能做到的，加油吧！</p>

<p><a href="/blog/archives">&lt;&ndash;返回</a></p>
]]></content>
  </entry>
  
</feed>

