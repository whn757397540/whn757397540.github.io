<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 强连通分量 | hnnwang's Blog]]></title>
  <link href="http://whn757397540.github.io/tags/qiang-lian-tong-fen-liang/atom.xml" rel="self"/>
  <link href="http://whn757397540.github.io/"/>
  <updated>2015-08-10T18:00:30+08:00</updated>
  <id>http://whn757397540.github.io/</id>
  <author>
    <name><![CDATA[hnnwang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[图论总结(五)]]></title>
    <link href="http://whn757397540.github.io/blog/2015/03/14/tu-lun-zong-jie-wu/"/>
    <updated>2015-03-14T18:55:02+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/03/14/tu-lun-zong-jie-wu</id>
    <content type="html"><![CDATA[<h4>有向图的强联通分量</h4>

<p>主要介绍求强联通分量的2种方法。</p>

<!--more-->


<ol>
<li>Kosaraju算法</li>
</ol>


<p>这种算法就是数据结构上讲的那种算法，利用2次简单的dfs来实现。第一次dfs时，选取任意顶点作为起点，遍历所有未访问过的顶点，并在回溯前给顶点标号（后序遍历）。对剩余未访问过的顶点，不断重复上述过程；完成标号后，越接近图的尾部（搜索树的叶子），顶点标号越小。第二次dfs时，先将所有的边反向，然后以标号最大的顶点进行dfs。这样dfs所遍历的顶点几何就构成了一个强联通分量。之后，只要还有尚未访问的顶点，就从中选取标号最大的顶点不断重复上述过程。</p>

<p>以上就是整个算法的过程，至于证明吧，自己画个图模拟一下吧。给出一个模板代码！算法的复杂度时O(V+E)</p>

<pre><code class="c++">int V;
struct Edge{
    int from, to, next;
    Edge(){}
    Edge(int from, int to, int next):from(from), to(to), next(next){}
};
Edge E[maxe];//图的邻接表表示
Edge rE[maxe];//把边反向后的图
int head[maxv], rhead[maxv];
int nume,rnume;
int vs[maxv];//后续遍历顺序的顶点列表
int cntvs;
bool used[maxv];//访问标记
int tporder[maxv];//所属强联通分量的拓扑序

void init()
{
    nume = rnume = 0;
    memset(head, -1, sizeof(head));
    memset(rhead, -1, sizeof(rhead));
    cntvs = 0;
}
void addEdge(int from, int to)
{
    E[nume] = Edge(from, to, head[from]);
    head[from] = nume++;
    rE[rnume] = Edge(to, from, rhead[to]);
    rhead[to] = rnume++;
}

void dfs(int v)
{
    used[v] = true;
    for (int i = head[v]; i != -1; i = E[i].next)
        if (!used[E[i].to]) dfs(E[i].to);
    vs[cntvs++] = v;
}

void rdfs(int v, int k)
{
    used[v] = true;
    tporder[v] = k;
    for (int i = rhead[v]; i != -1; i = rE[i].next)
        if (!used[rE[i].to]) rdfs(rE[i].to, k);
}

int scc()
{
    memset(used, false, sizeof(used));

    for (int v= 0 ; v &lt; V; v++)
        if (!used[v])   dfs(v);
    memset(used, 0, sizeof(used));
    int k = 0;
    for (int i = cntvs-1; i &gt;= 0; i--)
        if (!used[vs[i]]) rdfs(vs[i], k++);
    return k;
}
</code></pre>

<ol>
<li>Tarjan算法</li>
</ol>


<p>这个算法的思想是这样的：</p>

<p>考虑强连通分量 C，设其中第一个被发现的点为 x，则 C 中其他点都是 x 的后代。我们希望在 x 访问完成时立刻输出 C。这样，就可以在同一棵 DFS 树中区分开所有 SCC 了。因此问题的关键，是判断一个点是否为一个 SCC中最先发现的点。</p>

<p>假设我们正在判断 u 是否为某 SCC 的第一个被发现结点。如果我们发现从 u 的子结点出发可以到达 u 的祖先w，显然 u、v、w 在同一个 SCC 中，因此 u 不是该 SCC 中第一个被发现的结点；另一方面，如果从 v 发现最多只能到 u，那么 u 是该 SCC 中第一个被发现的结点。这样，问题转化为求一个点 u 最远能到达的祖先的 d 值。注意，这里的“到达”只能通过当前 SCC 中的点，而不能通过已经确定 SCC 编号的其他点。</p>

<p>我们可以类似的定义 lowlink(u)为 u 及其后代能追溯到的最早（最先被发现）祖先点 v 的 pre(v)值，如此便可以在计算 lowlink 函数的同时完成 SCC 计算。这个算法的复杂度也是O(V+E)，但是常数比Kosaraju算法要小一些。参考代码如下：</p>

<pre><code class="c++">struct Edge{
    int from, to, next;
    Edge(){}
    Edge(int from, int to, int next):from(from), to(to), next(next){}
};

Edge E[maxm];
int head[maxv];
int nume;
int pre[maxv],lowlink[maxv],sccno[maxv],dfs_clock,scc_cnt;
int S[maxv];
int tops;

void init()
{
    nume = 0;
    memset(head, -1, sizeof(head));
    tops = 0;
}

void addEdge(int from, int to)
{
    E[nume] = Edge(from, to, head[from]);
    head[from] = nume++;
}

void dfs(int u)
{
    pre[u] = lowlink[u] = ++dfs_clock;
    S[tops++] = u;
    for (int i = head[u]; i != -1; i = E[i].next)
    {
        int v = E[i].to;
        if (!pre[v])
        {
            dfs(v);;
            lowlink[u] = min(lowlink[u], lowlink[v]);
        }
        else if(!sccno[v])
            lowlink[u] = min(lowlink[u], pre[v]);
    }
    if (lowlink[u] == pre[u])
    {
        scc_cnt++;
        while(true)
        {
            int x = S[--tops];
            sccno[x] = scc_cnt;
            if(x == u)
                break;
        }
    }
}

void find_scc(int n)
{
    dfs_clock = scc_cnt = 0;
    memset(sccno, 0, sizeof(sccno));
    memset(pre, 0, sizeof(pre));
    for (int i = 0; i &lt; n; i++)
        if(!pre[i]) dfs(i);
}
</code></pre>

<p>下面来说一道题</p>

<p><a href="http://poj.org/problem?id=2186">POJ 2186 Popular Cows</a></p>

<p>这道题思路其实不难想，算是一道基础题了，就是为了练习强联通分量的吧！首先，我们要明确，如果一个牛被其他所有牛认为是红人，那么那头牛所在的强联通分量里的任何一头牛都是被所有牛认为是红人的牛。反之，任何一头其他的牛被所有牛认为是红人，那么这头牛也一定属于这个强联通分量。所以，如果存在被所有牛认为是红人的牛，那么这些牛肯定都属于同一个强联通分量，这个强联通分量里面的牛的数目就是答案了；当然，也有可能不存在。</p>

<p>我们通过两种算法求出来的所有强联通分量，都是按照图的拓扑序排了序的，所以如果存在这样的牛的话，那么它一定属于拓扑序最后的强联通分量，所以一种方法就是，先找到拓扑序最后的强联通分量里面的一头牛，然后看他是不是所有顶点可达就能判断了。这种方法的代码，我是用Kosaraju算法写的（事实上是参考《挑战程序设计竞赛》中的代码写的），当然也可以用tarjan来写：</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;string&gt;
#include &lt;set&gt;
#include &lt;algorithm&gt;
#include &lt;map&gt;
#include &lt;queue&gt;
#include &lt;vector&gt;
#include &lt;cmath&gt;

using namespace std;
const int maxv = 22222;
const int maxe = 55555;

int V;
struct Edge{
    int from, to, next;
    Edge(){}
    Edge(int from, int to, int next):from(from), to(to), next(next){}
};
Edge E[maxe];//图的邻接表表示
Edge rE[maxe];//把边反向后的图
int head[maxv], rhead[maxv];
int nume,rnume;
int vs[maxv];//后续遍历顺序的顶点列表
int cntvs;
bool used[maxv];//访问标记
int tporder[maxv];//所属强联通分量的拓扑序

void init()
{
    nume = rnume = 0;
    memset(head, -1, sizeof(head));
    memset(rhead, -1, sizeof(rhead));
    cntvs = 0;
}
void addEdge(int from, int to)
{
    E[nume] = Edge(from, to, head[from]);
    head[from] = nume++;
    rE[rnume] = Edge(to, from, rhead[to]);
    rhead[to] = rnume++;
}

void dfs(int v)
{
    used[v] = true;
    for (int i = head[v]; i != -1; i = E[i].next)
        if (!used[E[i].to]) dfs(E[i].to);
    vs[cntvs++] = v;
}

void rdfs(int v, int k)
{
    used[v] = true;
    tporder[v] = k;
    for (int i = rhead[v]; i != -1; i = rE[i].next)
        if (!used[rE[i].to]) rdfs(rE[i].to, k);
}

int scc()
{
    memset(used, false, sizeof(used));

    for (int v= 0 ; v &lt; V; v++)
        if (!used[v])   dfs(v);
    memset(used, 0, sizeof(used));
    int k = 0;
    for (int i = cntvs-1; i &gt;= 0; i--)
        if (!used[vs[i]]) rdfs(vs[i], k++);
    return k;
}

int main()
{
    int n,m;
    scanf("%d%d", &amp;n, &amp;m);
    init();
    for (int i = 0; i &lt; m; i++)
    {
        int a,b;
        scanf("%d%d", &amp;a, &amp;b);
        addEdge(a-1,b-1);
    }
    V = n;
    int K = scc();
    int ans = 0, u;
    for (int i = 0; i &lt; V; i++)
        if (tporder[i] == K-1)
        {
            ans++;
            u = i;
        }

    memset(used, 0, sizeof(used));
    rdfs(u, 0);
    for (int i = 0; i &lt; n; i++)
        if (!used[i])
        {
            ans = 0;
            break;
        }
    printf("%d\n", ans);

    return 0;
}
</code></pre>

<p>这里，书上用的是vector来表示的图，我刚开始也是跟着书上的写法来的，但是发现太慢了，344ms,然后改成了这样，手写的边，时间就变成了63ms，当然，后者写起来比较麻烦。</p>

<p>还有一种方法，被前面所有牛都认为是红人的那个强联通分量肯定在最后，所以我们只需要看有几个“最后”就行（这里的最后是指，出度为0的强联通分量）。如果只有一个的话，那么答案就是这个强联通分量里面的人数；如果有不止一个的话，那么就没有牛被所有牛认为是红人（因为出度为0的牛，除了自己圈子里的牛，不认为其他的任何牛是红人。）</p>

<p>这种方法我使用Tarjan写的。</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;string&gt;
#include &lt;set&gt;
#include &lt;algorithm&gt;
#include &lt;map&gt;
#include &lt;queue&gt;
#include &lt;vector&gt;
#include &lt;cmath&gt;
#include &lt;stack&gt;

using namespace std;
const int maxv = 11111;
const int maxm = 55555;
struct Edge{
    int from, to, next;
    Edge(){}
    Edge(int from, int to, int next):from(from), to(to), next(next){}
};

Edge E[maxm];
int head[maxv];
int nume;
int pre[maxv],lowlink[maxv],sccno[maxv],dfs_clock,scc_cnt;
int S[maxv];
int tops;

void init()
{
    nume = 0;
    memset(head, -1, sizeof(head));
    tops = 0;
}

void addEdge(int from, int to)
{
    E[nume] = Edge(from, to, head[from]);
    head[from] = nume++;
}

void dfs(int u)
{
    pre[u] = lowlink[u] = ++dfs_clock;
    S[tops++] = u;
    for (int i = head[u]; i != -1; i = E[i].next)
    {
        int v = E[i].to;
        if (!pre[v])
        {
            dfs(v);;
            lowlink[u] = min(lowlink[u], lowlink[v]);
        }
        else if(!sccno[v])
            lowlink[u] = min(lowlink[u], pre[v]);
    }
    if (lowlink[u] == pre[u])
    {
        scc_cnt++;
        while(true)
        {
            int x = S[--tops];
            sccno[x] = scc_cnt;
            if(x == u)
                break;
        }
    }
}

void find_scc(int n)
{
    dfs_clock = scc_cnt = 0;
    memset(sccno, 0, sizeof(sccno));
    memset(pre, 0, sizeof(pre));
    for (int i = 0; i &lt; n; i++)
        if(!pre[i]) dfs(i);
}

int deg[maxv],cnt[maxv];
int main()
{
    int n,m;
    scanf("%d%d", &amp;n, &amp;m);
    init();
    for (int i = 0; i &lt; m; i++)
    {
        int a,b;
        scanf("%d%d", &amp;a, &amp;b);
        addEdge(a-1,b-1);
    }
    find_scc(n);

    int k = scc_cnt;

    for (int i = 0; i &lt; n; i++)
    {
        cnt[sccno[i]]++;
        for (int j = head[i]; j != -1; j = E[j].next)
            if (sccno[E[j].to] != sccno[i])
                deg[sccno[i]]++;
    }
    int ans = 0;
    //cout&lt;&lt;1&lt;&lt;endl;
    for (int i = 1; i &lt;= k; i++)
        if(ans == 0 &amp;&amp; deg[i] == 0)
            ans = cnt[i];
        else if (ans != 0 &amp;&amp; deg[i] == 0)
        {
            ans = 0;
            break;
        }
    printf("%d\n", ans);

    return 0;
}
</code></pre>

<p>这里我还是要说一下，对比一下，这个Tarjan，我用vector加stack的时候，用的时间是550ms；把vector改成手写边之后，时间变成了94ms；再把stack改成手写栈之后，时间变成了63ms。所以说时间差距还是蛮大的，不过毕竟还是用stl会感觉更加方便快捷一些，所以如果给的时间充足的话，用stl也是可以的；如果时间比较紧张，就尽量用手写的吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BUPT暑假训练2013级个人排位赛12]]></title>
    <link href="http://whn757397540.github.io/blog/2014/08/10/buptshu-jia-xun-lian-2013ji-ge-ren-pai-wei-sai-12/"/>
    <updated>2014-08-10T10:48:00+08:00</updated>
    <id>http://whn757397540.github.io/blog/2014/08/10/buptshu-jia-xun-lian-2013ji-ge-ren-pai-wei-sai-12</id>
    <content type="html"><![CDATA[<h2>第十二场</h2>

<p>A题 <a href="http://code.bupt.edu.cn/problem/p/494/">BOJ 494. Study sister’s barbarian</a></p>

<p>poj原题，原题链接在这里<a href="http://poj.org/problem?id=2828">POJ2828</a></p>

<p>难在分析，离线处理，倒着分析。分析就会发现，如果是到这来的话，那么所给的位置，应该就代表空格的位置，也就是给你的位置是k的话，就代表第k个空格。（为什么？自己想一想）然后就是找第k个空格的位置插进去了。</p>

<p>直接暴力肯定不行啦，优化一点。空格个数怎么统计？树状数组呗，可以很容易在logn的时间内求出前n项和，查找位置的话，二分即可，分析下复杂度，是nlog<sup>2</sup> n,在POJ上来说，已然绰绰有余了，因为POJ上的时限是4s（感觉优化的暴力也能过），而在BOJ上，时限为2s,上述做法，姿势要好才能过。有没有更快的方法呢？有，线段树。</p>

<p>什么？线段树不是比树状数组要慢吗？确实，不过那是对于同样的时间复杂度来说的，这道题，目前我还没想到nlogn复杂度的树状数组想法，但是用线段树，很容易就能在nlogn的时间内解出来。区间存空格个数就行了，比较的时候比较左边的空格跟你的目标的大小就行。代码</p>

<pre><code class="c++">#include &lt;cstdio&gt;
#include &lt;iostream&gt;
const int N = 200005;

struct TREE
{
    int l,r;
    int data;
}a[4*N];

int b[N],c[N],ans[N];
bool flag;

void buildTree(int now,int l,int r)
{
    int lson = 2*now,rson = 2*now+1;

    a[now].l=l;
    a[now].r=r;

    if (l == r)
    {
        a[now].data = 1;
        return;
    }
    int mid=(l + r) &gt;&gt; 1;
    buildTree(lson,l,mid);
    buildTree(rson,mid+1,r);
    a[now].data=a[lson].data+a[rson].data;
}

void Insert(int now,int aim,int dat)
{

    if (a[now].l==a[now].r)
    {
        a[now].data = 0;
        ans[a[now].l] = dat;
        return;
    }

    int lson = 2*now,rson = 2*now+1;

    if (aim&lt;=a[lson].data)
        Insert(lson,aim,dat);
    else
        Insert(rson,aim-a[lson].data,dat);

    a[now].data = a[lson].data + a[rson].data;
}



int main()
{
    int n;

    while (scanf("%d",&amp;n) != EOF)
    {
        for (int i = 0; i &lt; n; i++)
        {
            scanf("%d%d",&amp;b[i],&amp;c[i]);
            b[i]+=1;
        }
        buildTree(1,1,n);
        for (int i = n - 1; i &gt;= 0; i--)
        {
            flag=false;
            Insert(1,b[i],c[i]);
        }
        for (int i = 1;i &lt; n; i++)
            printf("%d ",ans[i]);
        printf("%d\n",ans[n]);
    }
}
</code></pre>

<p>D题 <a href="http://code.bupt.edu.cn/problem/p/491/">BOJ 491. Study sister’s wizard</a></p>

<p>呵呵，哈希就好，用预处理后O（1)的那种姿势。这里我用的另外一种姿势，主要是字符串长度给定了，所以求hash的时候，求出第一个串来以后，依次递推，每次去首加尾就好。</p>

<p>求完后吧hash值存到一个数组中，分别比较连续的序列是否相等就行。复杂度为O（n）具体看代码吧</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;cstring&gt;
#include &lt;cmath&gt;

typedef unsigned long long ull;

using namespace std;

const ull B=1e9+7;
const int N=1e5+7;
ull a[N];
int m,l;
int cnt;

void getHash(char s[])
{
    int len=strlen(s);
    cnt=0;

    ull Hash=0;
    ull BB=1;
    for (int i=0;i&lt;l;i++)
    {
        Hash=Hash*B+s[i];
        if (i&gt;0) BB*=B;
    }
    a[0]=Hash;
    for (int i=1;i&lt;=len-l;i++)
    {
        Hash=(Hash-s[i-1]*BB)*B+s[i+l-1];
        a[i]=Hash;
    }
}

int main()
{
    char s[N];
    while (scanf("%d%d",&amp;m,&amp;l)!=EOF)
    {
        scanf("%s",s);
        int len=strlen(s);
        getHash(s);
        cnt=1;
        int ans=0;
        //for (int i=0;i&lt;=len-l;i++)
           // printf("%ul ",a[i]);
        //cout&lt;&lt;endl;
        for (int k=0;k&lt;l;k++)
        {
            for (int i=k+l;i&lt;=len-l;i+=l)
            {
                if (a[i]==a[i-l]) cnt++;
                else
                {
                    if (cnt&gt;=m)
                        ans+=cnt-m+1;
                    cnt=1;
                }
            }
            if (cnt&gt;=m)
                ans+=cnt-m+1;
            cnt=1;
        }
        printf("%d\n",ans);


    }
}
</code></pre>

<p>E题 <a href="http://code.bupt.edu.cn/problem/p/490/">BOJ 490. Study sister’s dragon</a></p>

<p>能想到用dp来求就好做了。用dp[i][j]代表取到第i堆，状态为j(前几堆的异或和为j)的概率，然后就很容易写出dp方程</p>

<p>dp[i][j]+=dp[i-1][j xor k]*1/a[i];</p>

<p>由于只跟之前一个状态有关系，可以用滚动数组来节省空间。代码在这里</p>

<pre><code class="c++">#include &lt;cstdio&gt;

int main()
{
    int n;
    while (scanf("%d",&amp;n) != EOF)
    {
        int num;
        double dp[2][130]={0};
        scanf("%d",&amp;num);
        for (int i = 1;i &lt;= num; i ++)
            dp[0][i] = 1.000/num;
        int now=0;
        for (int i = 1;i &lt; n;i ++)
        {
            scanf("%d", &amp;num);
            for (int j = 0; j &lt; 128; j++)
            {
                dp[now^1][j]=0;
                for (int k = 1; k &lt;=num; k ++)
                    dp[now^1][j]+=dp[now][j^k]*(1.000)/num;
            }
            now^=1;
        }
        printf("%.6lf\n",dp[now][0]);
    }
}
</code></pre>

<p>G题 <a href="http://code.bupt.edu.cn/problem/p/497/">BOJ 497. Study sister’s clan</a></p>

<p>就是一道裸的图论题，强联通分量缩点，然后跑一遍最短路（Dijkstra或者SPFA都可，自己选择吧）就能出结果啦，照模板抄就行了。代码</p>

<pre><code class="c++">#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;vector&gt;
#include &lt;iostream&gt;
#include &lt;queue&gt;

#define MAX_V 2222
#define INF 555555
using namespace std;

int n;
vector&lt;int&gt; G[MAX_V];
vector&lt;int&gt; rG[MAX_V];
vector&lt;int&gt; vs;
bool used[MAX_V];
int cmp[MAX_V];
int d[MAX_V];

void addEdge(int from,int to)
{
    G[from].push_back(to);
    rG[to].push_back(from);
}

void dfs(int v)
{
    used[v] = true;
    for (int i = 0; i &lt; G[v].size(); i ++)
        if (!used[G[v][i]]) dfs(G[v][i]);
    vs.push_back(v);
}

void rdfs(int v, int k)
{
    used[v] = true;
    cmp[v] = k;
    for (int i = 0; i &lt; rG[v].size(); i ++)
    {
        if (!used[rG[v][i]]) rdfs(rG[v][i],k);
    }
}

int scc()
{
    memset(cmp,0,sizeof(cmp));
    memset(used,0,sizeof(used));
    vs.clear();
    for (int v = 1; v &lt;= n; v ++)
        if(!used[v]) dfs(v);
    memset(used,0,sizeof(used));
    int k=0;
    for (int i = vs.size() - 1;i &gt;=0; i--)
        if (!used[vs[i]]) rdfs(vs[i],k++);
    return k;
}

struct HeadNode
{
    int d,u;
    bool operator &lt; (const HeadNode&amp; rhs) const{
        return d &gt; rhs.d;
    }
};
void dijkstra(int s)
{
    priority_queue&lt;HeadNode&gt; q;
    for (int i = 1; i &lt;= n; i ++) d[i]=INF;
    d[s] = 0;
    memset(used,0,sizeof(used));
    q.push((HeadNode){0,s});
    while (!q.empty())
    {
        HeadNode x = q.top();q.pop();
        int u = x.u;
        if (used[u]) continue;
        used[u]=true;
        for (int i = 0; i &lt; G[u].size(); i++)
        {
            int to = G[u][i];
            if (d[to] &gt; d[u] + (cmp[u]==cmp[to] ? 0 : 1))
            {
                d[to] = d[u] + (cmp[u]==cmp[to]? 0 : 1);
                q.push((HeadNode){d[to],to});
            }
        }
    }
}
int main()
{
    int t;
    cin&gt;&gt;t;
    while (t--)
    {
        int m,k;
        scanf("%d%d%d",&amp;n,&amp;m,&amp;k);
        for (int i=1;i&lt;=m;i++)
        {
            int u,v;
            scanf("%d%d",&amp;u,&amp;v);
            addEdge(u,v);
        }
        scc();
        int a,b;
        scanf("%d%d",&amp;a,&amp;b);
        if (cmp[a] == cmp[b])
            printf("Input Error\n");
        else
        {
            dijkstra(a);
            if (d[b] &gt; k)
                printf("Sad\n");
            else
                printf("Good Job\n");
        }
        for (int i = 1;i &lt;= n;i ++)
        {
            G[i].clear();
            rG[i].clear();
        }
    }
    return 0;
}
</code></pre>

<p><a href="/blog/archives/">&lt;&ndash;BACK</a></p>
]]></content>
  </entry>
  
</feed>
