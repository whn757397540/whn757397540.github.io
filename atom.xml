<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[hnnwang's Blog]]></title>
  <link href="http://whn757397540.github.io/atom.xml" rel="self"/>
  <link href="http://whn757397540.github.io/"/>
  <updated>2015-08-10T18:00:30+08:00</updated>
  <id>http://whn757397540.github.io/</id>
  <author>
    <name><![CDATA[hnnwang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HDU 4782 Beautiful Soup]]></title>
    <link href="http://whn757397540.github.io/blog/2015/08/10/hdu-4782-beautiful-soup/"/>
    <updated>2015-08-10T17:32:46+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/08/10/hdu-4782-beautiful-soup</id>
    <content type="html"><![CDATA[<p>2013 ACM/ICPC 成都赛区现场赛B题</p>

<!--more-->


<p>一道模拟题，敲吐了！其实，只不过是因为做的少，细节考虑不周全！另外，对于字符串的相关操作不太熟悉！</p>

<p>有关要注意的事项，我感觉这个<a href="http://www.cnblogs.com/GBRgbr/p/3428291.html">博客</a>里说的很全面，最终是根据这个博客过的！</p>

<p>下面只是简单说下我是调到了哪些坑里；</p>

<p>第一，模拟比赛时，这个题我没看（题目太长了），只是听队友说的，而队友没有看到you shouldn’t change anything of any tag.这一句（我问过这个问题，队友说是要去空格的，显然没看到这一句，也正常，毕竟那么长的题目嘛！）</p>

<p>第二，由于我是半路接手，代码的读入部分是队友敲的，用的整行读入，结果在处理这样的这两个标签在一行的时候出现了点问题，后来改了一些东西才解决了，改成getchar()来单个字符读入也是可以的，这个是我疏忽了，没想到还会有这种数据；</p>

<p>第三，处理内容后面的空格之类的东西的时候出现了一点问题！</p>

<p>以上大概就是代码过了样例之后找到的所有问题了，这种题就是要耐心加细心，这个东西还是需要练一练的，这种题所有人都会，但是确很少有人能够又快又准地做对，如果能做到这种大模拟又快又准地做对的话，一旦遇到绝对能够占到很大的便宜，可能就是铜奖和银奖之间的差距！总之，以后找一些时间练一练吧，练练耐心和细心，也不是什么坏事儿！至于具体的细节就不说了，我的代码放在这里，仅供参考！至于需要注意的细节，去那个博客里看看吧！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">string</span> <span class="n">line</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//freopen(&quot;inpout.txt&quot;, &quot;r&quot;, stdin);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>    <span class="n">getchar</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">tagflag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">kase</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">depth</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Case #%d:</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">kase</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">beg</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">kase</span> <span class="o">&lt;=</span> <span class="n">T</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>            <span class="kt">char</span> <span class="n">ch</span> <span class="o">=</span> <span class="n">getchar</span><span class="p">();</span>
</span><span class='line'>            <span class="c1">//cout&lt;&lt;ch;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">ch</span> <span class="o">==</span> <span class="sc">&#39;&lt;&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">beg</span><span class="o">||</span><span class="n">line</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">&amp;&amp;</span> <span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">==</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">line</span> <span class="o">=</span> <span class="s">&quot;&lt;&quot;</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">beg</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">()</span><span class="o">!=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                         <span class="n">line</span> <span class="o">=</span> <span class="n">line</span> <span class="o">+</span> <span class="p">(</span><span class="n">l</span><span class="o">==</span><span class="mi">0</span><span class="o">?</span> <span class="s">&quot;&quot;</span><span class="o">:</span><span class="s">&quot; &quot;</span><span class="p">)</span><span class="o">+</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">depth</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">printf</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">line</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">line</span> <span class="o">=</span> <span class="s">&quot;&lt;&quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">tagflag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">ch</span> <span class="o">==</span> <span class="sc">&#39;&gt;&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">line</span> <span class="o">+=</span> <span class="s">&quot;&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">line</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">depth</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">depth</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">printf</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">line</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="n">line</span> <span class="o">==</span> <span class="s">&quot;&lt;/html&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">kase</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">if</span> <span class="p">(</span><span class="n">kase</span> <span class="o">&gt;</span> <span class="n">T</span><span class="p">)</span>
</span><span class='line'>                            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Case #%d:</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">kase</span><span class="p">);</span>
</span><span class='line'>                        <span class="n">line</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>                        <span class="n">depth</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                        <span class="n">beg</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="n">line</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">line</span><span class="p">[</span><span class="n">l</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">depth</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">printf</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">line</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">line</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">depth</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">printf</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">line</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">line</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">depth</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">tagflag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">tagflag</span><span class="p">)</span>
</span><span class='line'>                <span class="n">line</span> <span class="o">+=</span> <span class="n">ch</span><span class="p">;</span>
</span><span class='line'>            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">()</span><span class="o">!=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="n">ch</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span><span class="o">||</span><span class="n">ch</span> <span class="o">==</span> <span class="sc">&#39;\n&#39;</span> <span class="o">||</span> <span class="n">ch</span> <span class="o">==</span> <span class="sc">&#39;\t&#39;</span><span class="p">))</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'>                <span class="n">line</span> <span class="o">=</span> <span class="n">line</span> <span class="o">+</span> <span class="p">(</span><span class="n">l</span><span class="o">==</span><span class="mi">0</span><span class="o">?</span> <span class="s">&quot;&quot;</span><span class="o">:</span><span class="s">&quot; &quot;</span><span class="p">)</span><span class="o">+</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>                <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">ch</span> <span class="o">!=</span> <span class="sc">&#39; &#39;</span><span class="o">&amp;&amp;</span><span class="n">ch</span> <span class="o">!=</span> <span class="sc">&#39;\n&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">ch</span> <span class="o">!=</span> <span class="sc">&#39;\t&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">s</span> <span class="o">=</span> <span class="n">s</span> <span class="o">+</span> <span class="n">ch</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAVA字符串反转]]></title>
    <link href="http://whn757397540.github.io/blog/2015/08/10/javazi-fu-chuan-fan-zhuan/"/>
    <updated>2015-08-10T17:32:30+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/08/10/javazi-fu-chuan-fan-zhuan</id>
    <content type="html"><![CDATA[<p>又学习到一点点，其实没必要发个博客，不过就发出来记录给自己看吧,JAVA字符串反转。</p>

<!--more-->


<p>就是一个StringBuffer类里的reverse()函数，举个例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&quot;abcde&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">String</span> <span class="n">Rstr</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuffer</span><span class="o">(</span><span class="n">str</span><span class="o">).</span><span class="na">reverse</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么Rstr就应该是”edcba”</p>

<p><a href="http://poj.org/problem?id=1504">poj 1504Adding Reversed Numbers</a></p>

<p>就是给你两个数，然后反转后相加，结果再反转，然后输出；</p>

<p>代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.math.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
</span><span class='line'>        <span class="n">Scanner</span> <span class="n">cin</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Scanner</span><span class="o">(</span><span class="k">new</span> <span class="nf">BufferedInputStream</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
</span><span class='line'>        <span class="n">BigInteger</span> <span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">=</span> <span class="n">cin</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">kase</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">kase</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">kase</span><span class="o">++)</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">stra</span> <span class="o">=</span> <span class="n">cin</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">strb</span> <span class="o">=</span> <span class="n">cin</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">ansa</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuffer</span><span class="o">(</span><span class="n">stra</span><span class="o">).</span><span class="na">reverse</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">ansb</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuffer</span><span class="o">(</span><span class="n">strb</span><span class="o">).</span><span class="na">reverse</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>          <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BigInteger</span><span class="o">(</span><span class="n">ansa</span><span class="o">);</span>
</span><span class='line'>          <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BigInteger</span><span class="o">(</span><span class="n">ansb</span><span class="o">);</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">b</span><span class="o">).</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>          <span class="n">BigInteger</span> <span class="n">ans</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BigInteger</span><span class="o">(</span><span class="k">new</span> <span class="nf">StringBuffer</span><span class="o">(</span><span class="n">tmp</span><span class="o">).</span><span class="na">reverse</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ans</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://whn757397540.github.io/blog/archives/">&lt;&ndash;Back</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[并查集模板]]></title>
    <link href="http://whn757397540.github.io/blog/2015/08/10/bing-cha-ji-mo-ban/"/>
    <updated>2015-08-10T17:32:15+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/08/10/bing-cha-ji-mo-ban</id>
    <content type="html"><![CDATA[<p>ZOJ 3811 Untrusted Patrol</p>

<!--more-->


<p>2014牡丹江赛区网络赛C题<a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=3811">题目链接在这里</a> 其实我的主要目的是放一下自己的并查集模板！</p>

<p>昨天，因为并查集模板的问题跟队友争论了一翻，其实，也是一些没有必要的争论，不管什么模板的，能用就行！</p>

<p>从刚一开始接触并查集，我就是这样敲的</p>

<p>首先，需要用到父亲数组father[]（个人习惯用father）;初始化father[i] = i；</p>

<p>然后，找祖宗函数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="nf">getfather</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">father</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">i</span><span class="p">)</span> <span class="n">father</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">getfather</span><span class="p">(</span><span class="n">father</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">father</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样在每次getfather找祖宗的时候，就把所有的儿子节点的父亲都设为了祖宗节点，所以只要找过一次，那么找的这条链的长度(也可以看作是树的深度）就会变成2;</p>

<p>之后，联合判断（判断两个点是否在同一个集合）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">bool</span> <span class="nf">UnionJudge</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">j</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">reutrn</span> <span class="n">getfather</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">==</span> <span class="n">getfather</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个函数有些时候是要用到的</p>

<p>之后，联合函数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="nf">GetUnion</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">j</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">getfather</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">getfather</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span><span class='line'>    <span class="n">father</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一般情况下，树的深度是非常小的，所以基本可以视为是在常数级的时间案复杂度完成的！</p>

<p>接下来，是这道题的思路！</p>

<p>首先吧所有跟有监视器的点相连的边去掉，跑一遍并查集，把其他所有的边都连上；之后按照题目中给的顺序，分别联合有监视器的点，连某一个有监视器的点的时候，这个点之后的有监视器的点都不要被连进去（也就是跟他们相连的边依然是被去掉的）；按照顺序操作，在此过程中如果发现有不能跟第一个有监视器的点连通的点的话，那么说明操作不合法，答案就该输出No了！（当然，如果L&lt;k的话，就是肯定没有遍历完所有的点，输出也是No）</p>

<p>如果所有的带监视器的点都能按照顺序连进去的花，那么，这个人肯定有可能是按照正常的步骤来检查的！但是，题目中给的图可能不是连通图，在这样的情况下，用正常步骤肯定是不能检查完所有的点的，所以还要判断图是不是连通图，昨天就被坑在了这里。</p>

<p>题目大致思路说完了，结下来就是代码了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;queue&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">maxv</span> <span class="o">=</span> <span class="mi">110000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">edge</span><span class="p">[</span><span class="n">maxv</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">father</span><span class="p">[</span><span class="n">maxv</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">getfather</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">father</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">i</span><span class="p">)</span> <span class="n">father</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">getfather</span><span class="p">(</span><span class="n">father</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">father</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="nf">PlusJudge</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">j</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">getfather</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">==</span> <span class="n">getfather</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">getPlus</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">j</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">getfather</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">getfather</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span><span class='line'>    <span class="n">father</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">maxv</span><span class="p">];</span>
</span><span class='line'><span class="kt">bool</span> <span class="n">no</span><span class="p">[</span><span class="n">maxv</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'><span class="cm">/*    freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin);</span>
</span><span class='line'><span class="cm">    freopen(&quot;out.txt&quot;,&quot;w&quot;,stdout);</span>
</span><span class='line'><span class="cm">*/</span>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">T</span><span class="o">--</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">,</span><span class="n">k</span><span class="p">;</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>        <span class="n">memset</span><span class="p">(</span><span class="n">no</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">no</span><span class="p">));</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">k</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">pp</span><span class="p">;</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pp</span><span class="p">);</span>
</span><span class='line'>            <span class="n">no</span><span class="p">[</span><span class="n">pp</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">edge</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>            <span class="n">father</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">u</span><span class="p">,</span><span class="n">v</span><span class="p">;</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">u</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'>            <span class="n">edge</span><span class="p">[</span><span class="n">u</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'>            <span class="n">edge</span><span class="p">[</span><span class="n">v</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">u</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">no</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">no</span><span class="p">[</span><span class="n">v</span><span class="p">])</span>
</span><span class='line'>                <span class="n">getPlus</span><span class="p">(</span><span class="n">u</span><span class="p">,</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">L</span><span class="p">;</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">L</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">L</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">L</span> <span class="o">&lt;</span> <span class="n">k</span> <span class="o">||</span>  <span class="n">m</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;No</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">bool</span> <span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">L</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">no</span><span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">edge</span><span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]].</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="kt">int</span> <span class="n">son</span> <span class="o">=</span> <span class="n">edge</span><span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]][</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">no</span><span class="p">[</span><span class="n">son</span><span class="p">])</span>
</span><span class='line'>                        <span class="n">getPlus</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">son</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">flag</span> <span class="o">=</span> <span class="n">PlusJudge</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">flag</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">flag</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">PlusJudge</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                  <span class="n">flag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>                  <span class="k">break</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">flag</span> <span class="o">?</span> <span class="s">&quot;Yes&quot;</span><span class="o">:</span><span class="s">&quot;No&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[旋转卡壳总结]]></title>
    <link href="http://whn757397540.github.io/blog/2015/08/10/xuan-zhuan-qia-ke-zong-jie/"/>
    <updated>2015-08-10T17:31:57+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/08/10/xuan-zhuan-qia-ke-zong-jie</id>
    <content type="html"><![CDATA[<h2>POJ 2187 and POJ 3608</h2>

<p>这些天刷了几道旋转卡壳的题，被卡了一些时间，现在先就两道题对旋转卡壳的两个用法进行一个总结</p>

<!--more-->


<p>有关旋转卡壳的介绍，<a href="http://hnnwang.github.io/blog/2014/09/06/xuan-zhuan-qia-ke-1/">这里</a>说的挺全的.所以题解里就不去解释这种思想了</p>

<p>这里我说2道旋转卡壳的基础题！</p>

<p><a href="http://poj.org/problem?id=2187">POJ 2187 Beauty Contest</a></p>

<p>一道基础的旋转卡壳题，求凸包直径，很简单的一道题，直接套板子就好（一个凸凸包模板，一个旋转卡壳模板）。这里说下，在求直径的时候，由于是一个凸多边形，所以求三角形面积（事实上，求平行四边形面积就好，因为只比较大小）。这题的题目都是整点，可以用int，其实，求出凸包来以后直接暴力枚举来判断就能过（而且，竟然会比旋转卡壳还快），不过最好是用旋转卡壳来过吧，毕竟如果凸包上点多的花，暴力还是很慢的！暴力的代码就不挂了，旋转卡壳代码在这里</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#define next (i+1)%n</span>
</span><span class='line'><span class="k">const</span> <span class="kt">double</span> <span class="n">eps</span> <span class="o">=</span> <span class="mf">1e-10</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">dcmp</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">)</span><span class="c1">//精度比较</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="o">-</span><span class="n">eps</span><span class="p">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">eps</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">double</span> <span class="nf">add</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">b</span><span class="p">)</span><span class="c1">//考虑到精度的加法</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Point</span><span class="c1">//也可看做向量</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Point</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">Point</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="o">:</span> <span class="n">x</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="n">y</span><span class="p">(</span><span class="n">y</span><span class="p">){}</span>
</span><span class='line'>    <span class="n">Point</span> <span class="k">operator</span> <span class="o">+</span> <span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">);</span> <span class="p">}</span><span class="c1">//向量 + 向量 = 向量</span>
</span><span class='line'>    <span class="n">Point</span> <span class="k">operator</span> <span class="o">-</span> <span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">);</span> <span class="p">}</span> <span class="c1">// 向量 - 向量 = 向量</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="k">operator</span> <span class="o">&lt;</span> <span class="p">(</span><span class="k">const</span> <span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span>  <span class="o">||</span> <span class="n">x</span> <span class="o">==</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">;</span> <span class="p">}</span> <span class="c1">//字典序比较，重定义&lt;</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="k">operator</span> <span class="o">==</span> <span class="p">(</span><span class="k">const</span> <span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">x</span> <span class="o">==</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">==</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">;</span> <span class="p">}</span><span class="c1">//重定义 ==</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">dot</span><span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">;</span> <span class="p">}</span><span class="c1">//点积</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">det</span><span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">y</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">;</span> <span class="p">}</span><span class="c1">//叉积,旋转方向取逆时针</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sqrDis</span><span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">){</span><span class="k">return</span> <span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">);}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">Point</span> <span class="n">Vector</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">u</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">ConvexHull</span><span class="p">(</span><span class="n">Point</span><span class="o">*</span> <span class="n">p</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">Point</span><span class="o">*</span> <span class="n">ch</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">sort</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">p</span><span class="o">+</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">m</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">2</span><span class="p">]).</span><span class="n">det</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">m</span> <span class="o">--</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">m</span> <span class="o">&gt;</span> <span class="n">k</span> <span class="o">&amp;&amp;</span><span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">2</span><span class="p">]).</span><span class="n">det</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">m</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="n">m</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">Area</span><span class="p">(</span><span class="n">Point</span> <span class="n">a</span><span class="p">,</span> <span class="n">Point</span> <span class="n">b</span><span class="p">,</span> <span class="n">Point</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Vector</span> <span class="n">v</span> <span class="o">=</span> <span class="n">b</span> <span class="o">-</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">abs</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">det</span><span class="p">(</span><span class="n">c</span> <span class="o">-</span> <span class="n">a</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">RotatingCalipers</span><span class="p">(</span><span class="n">Point</span> <span class="o">*</span><span class="n">ch</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">q</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">sqrDis</span><span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="n">s</span><span class="p">]);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="n">Area</span><span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">ch</span><span class="p">[</span><span class="n">next</span><span class="p">],</span> <span class="n">ch</span><span class="p">[(</span><span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">n</span><span class="p">])</span> <span class="o">&gt;</span> <span class="n">Area</span><span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">ch</span><span class="p">[</span><span class="n">next</span><span class="p">],</span> <span class="n">ch</span><span class="p">[</span><span class="n">q</span><span class="p">]))</span>
</span><span class='line'>          <span class="n">q</span> <span class="o">=</span> <span class="p">(</span><span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>      <span class="n">ans</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span><span class="n">max</span><span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">sqrDis</span><span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="n">q</span><span class="p">]),</span> <span class="n">ch</span><span class="p">[</span><span class="n">next</span><span class="p">].</span><span class="n">sqrDis</span><span class="p">(</span><span class="n">ch</span><span class="p">[(</span><span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">n</span><span class="p">])));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">Point</span> <span class="n">a</span><span class="p">[</span><span class="mi">55555</span><span class="p">],</span><span class="n">Hull</span><span class="p">[</span><span class="mi">100000</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>  <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">ConvexHull</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">Hull</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">u</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">Hull</span><span class="p">[</span><span class="n">u</span><span class="p">].</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">Hull</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span> <span class="o">||</span> <span class="n">Hull</span><span class="p">[</span><span class="n">u</span><span class="p">].</span><span class="n">x</span> <span class="o">==</span> <span class="n">Hull</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">Hull</span><span class="p">[</span><span class="n">u</span><span class="p">].</span><span class="n">y</span> <span class="o">&lt;</span> <span class="n">Hull</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>          <span class="n">u</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">RotatingCalipers</span><span class="p">(</span><span class="n">Hull</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">u</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">ans</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// system(&quot;pause&quot;);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外，还有就是求多边形宽度的，暂时没有找到题，不过看起来貌似挺简单的！</p>

<p><a href="http://poj.org/problem?id=3608">POJ 3608 Bridge Across Islands</a></p>

<p>这道题就稍微复杂一点了，求两个凸包的最近距离，不过同样也是用旋转卡壳很容易解决，只不过这次必须得用有向面积了，因为旋转的基点是不同的2个多边形，所以会出现负面积，把逻辑捣清楚就好。跟那个博客里说到的一样的方法，判断平行的时候，只求得对应平行四边形的面积为相等就行了，不平行的时候，用点到线段的距离来更新就行了，平行的时候，我的方法就跟那里说到的不太一样，我是为了省事儿，直接用4个顶点和对应线段之间的距离最短的来更新答案，其他就没什么不同了。还有就是这个题可以不求凸包，只需要选一个内部的点，然后根据其他点跟这个点连线的极角按照逆时针方向来排序就好。具体的看看代码来理解下吧</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">double</span> <span class="n">eps</span> <span class="o">=</span> <span class="mf">1e-9</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">N</span><span class="o">=</span><span class="mi">10005</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">dcmp</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">)</span><span class="c1">//精度比较</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="o">-</span><span class="n">eps</span><span class="p">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">eps</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">double</span> <span class="nf">add</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">b</span><span class="p">)</span><span class="c1">//考虑到精度的加法</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">eps</span> <span class="o">*</span> <span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">+</span> <span class="n">abs</span><span class="p">(</span><span class="n">b</span><span class="p">)))</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Point</span><span class="c1">//也可看做向量</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Point</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">Point</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">,</span><span class="kt">double</span> <span class="n">y</span><span class="p">)</span> <span class="o">:</span> <span class="n">x</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="n">y</span><span class="p">(</span><span class="n">y</span><span class="p">){}</span>
</span><span class='line'>    <span class="n">Point</span> <span class="k">operator</span> <span class="o">+</span> <span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">),</span><span class="n">add</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">));</span> <span class="p">}</span><span class="c1">//向量 + 向量 = 向量</span>
</span><span class='line'>    <span class="n">Point</span> <span class="k">operator</span> <span class="o">-</span> <span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">),</span><span class="n">add</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="o">-</span><span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">));</span> <span class="p">}</span> <span class="c1">// 向量 - 向量 = 向量</span>
</span><span class='line'>    <span class="n">Point</span> <span class="k">operator</span> <span class="o">/</span> <span class="p">(</span><span class="kt">double</span> <span class="n">d</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">/</span><span class="n">d</span><span class="p">,</span> <span class="n">y</span><span class="o">/</span><span class="n">d</span><span class="p">);}</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="k">operator</span> <span class="o">&lt;</span> <span class="p">(</span><span class="k">const</span> <span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">;</span> <span class="p">}</span> <span class="c1">//字典序比较，重定义&lt;</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="k">operator</span> <span class="o">==</span> <span class="p">(</span><span class="k">const</span> <span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span> <span class="p">}</span><span class="c1">//重定义 ==</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="k">operator</span> <span class="o">&gt;</span> <span class="p">(</span><span class="k">const</span> <span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;}</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">dot</span><span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">add</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">);</span> <span class="p">}</span><span class="c1">//点积</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">det</span><span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">add</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="o">-</span><span class="n">y</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">);</span> <span class="p">}</span><span class="c1">//叉积,旋转方向取逆时针</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">length</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">*</span><span class="n">y</span><span class="p">);</span> <span class="p">}</span><span class="c1">//向量长度</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">Angle</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="n">atan2</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">);}</span><span class="c1">//极角</span>
</span><span class='line'>    <span class="n">Point</span> <span class="n">Rotate</span><span class="p">(</span><span class="kt">double</span> <span class="n">rad</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">rad</span><span class="p">),</span><span class="o">-</span> <span class="n">y</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">rad</span><span class="p">)),</span> <span class="n">add</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">rad</span><span class="p">),</span> <span class="n">y</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">rad</span><span class="p">)));</span> <span class="p">}</span><span class="c1">//逆时针旋转rad</span>
</span><span class='line'>    <span class="n">Point</span> <span class="n">Normal</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="o">-</span><span class="n">y</span> <span class="o">/</span> <span class="n">length</span><span class="p">(),</span> <span class="n">x</span> <span class="o">/</span> <span class="n">length</span><span class="p">());</span> <span class="p">}</span><span class="c1">//求单位法向量</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">Point</span> <span class="n">Vector</span><span class="p">;</span>
</span><span class='line'><span class="n">Point</span> <span class="n">a1</span><span class="p">[</span><span class="n">N</span><span class="p">],</span><span class="n">a2</span><span class="p">[</span><span class="n">N</span><span class="p">],</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="kt">double</span> <span class="nf">Area</span><span class="p">(</span><span class="n">Point</span> <span class="n">a</span><span class="p">,</span> <span class="n">Point</span> <span class="n">b</span><span class="p">,</span> <span class="n">Point</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="n">b</span><span class="o">-</span><span class="n">a</span><span class="p">).</span><span class="n">det</span><span class="p">(</span><span class="n">c</span><span class="o">-</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">double</span> <span class="nf">DisToSeg</span><span class="p">(</span><span class="n">Point</span> <span class="n">A</span><span class="p">,</span> <span class="n">Point</span> <span class="n">B</span><span class="p">,</span> <span class="n">Point</span> <span class="n">P</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">A</span> <span class="o">==</span> <span class="n">B</span><span class="p">)</span> <span class="k">return</span> <span class="p">(</span><span class="n">P</span><span class="o">-</span><span class="n">A</span><span class="p">).</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Vector</span> <span class="n">v1</span> <span class="o">=</span> <span class="n">B</span> <span class="o">-</span> <span class="n">A</span><span class="p">,</span> <span class="n">v2</span> <span class="o">=</span> <span class="n">P</span> <span class="o">-</span> <span class="n">A</span><span class="p">,</span> <span class="n">v3</span> <span class="o">=</span> <span class="n">P</span> <span class="o">-</span> <span class="n">B</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">v1</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">v2</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">v2</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">v1</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">v3</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">v3</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">return</span> <span class="n">fabs</span><span class="p">(</span><span class="n">v1</span><span class="p">.</span><span class="n">det</span><span class="p">(</span><span class="n">v2</span><span class="p">)</span> <span class="o">/</span> <span class="n">v1</span><span class="p">.</span><span class="n">length</span><span class="p">())</span> <span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">double</span> <span class="nf">RotatingJam</span><span class="p">(</span><span class="kt">int</span> <span class="n">p0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">q0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">m</span><span class="p">,</span><span class="n">Point</span> <span class="n">a</span><span class="p">[],</span> <span class="n">Point</span> <span class="n">b</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="n">p0</span><span class="p">,</span> <span class="n">q</span> <span class="o">=</span> <span class="n">q0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">ans</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">p</span><span class="p">]</span> <span class="o">-</span> <span class="n">b</span><span class="p">[</span><span class="n">q</span><span class="p">]).</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">Area</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">p</span><span class="p">],</span> <span class="n">a</span><span class="p">[(</span><span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">n</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="n">q</span><span class="p">])</span> <span class="o">-</span> <span class="n">Area</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">p</span><span class="p">],</span> <span class="n">a</span><span class="p">[(</span><span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">n</span><span class="p">],</span> <span class="n">b</span><span class="p">[(</span><span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">m</span><span class="p">]))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">next</span> <span class="o">=</span> <span class="p">(</span><span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">m</span><span class="p">;</span>
</span><span class='line'>      <span class="n">ans</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span><span class="n">min</span><span class="p">(</span><span class="n">DisToSeg</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="n">q</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="n">next</span><span class="p">],</span> <span class="n">a</span><span class="p">[(</span><span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">n</span><span class="p">]),</span> <span class="n">DisToSeg</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="n">q</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="n">next</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">p</span><span class="p">])));</span>
</span><span class='line'>      <span class="n">q</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">next</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ans</span> <span class="o">=</span>  <span class="n">min</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="n">DisToSeg</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">p</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">next</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="n">q</span><span class="p">]));</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">Area</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">p</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">next</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="n">q</span><span class="p">])</span> <span class="o">-</span><span class="n">Area</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">p</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">next</span><span class="p">],</span> <span class="n">b</span><span class="p">[(</span><span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">m</span><span class="p">]))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">ans</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="n">min</span><span class="p">(</span><span class="n">DisToSeg</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="n">q</span><span class="p">],</span> <span class="n">b</span><span class="p">[(</span><span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">m</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">p</span><span class="p">]),</span><span class="n">min</span><span class="p">(</span><span class="n">DisToSeg</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="n">q</span><span class="p">],</span> <span class="n">b</span><span class="p">[(</span><span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">m</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">next</span><span class="p">]),</span><span class="n">DisToSeg</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">p</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">next</span><span class="p">],</span> <span class="n">b</span><span class="p">[(</span><span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">m</span><span class="p">]))));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">p</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">p</span><span class="o">!=</span><span class="n">p0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">Area</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">p</span><span class="p">],</span> <span class="n">a</span><span class="p">[(</span><span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">n</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="n">q</span><span class="p">])</span> <span class="o">-</span> <span class="n">Area</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">p</span><span class="p">],</span> <span class="n">a</span><span class="p">[(</span><span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">n</span><span class="p">],</span> <span class="n">b</span><span class="p">[(</span><span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">m</span><span class="p">]))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">next</span> <span class="o">=</span> <span class="p">(</span><span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">m</span><span class="p">;</span>
</span><span class='line'>          <span class="n">ans</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span><span class="n">min</span><span class="p">(</span><span class="n">DisToSeg</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="n">q</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="n">next</span><span class="p">],</span> <span class="n">a</span><span class="p">[(</span><span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">n</span><span class="p">]),</span> <span class="n">DisToSeg</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="n">q</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="n">next</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">p</span><span class="p">])));</span>
</span><span class='line'>          <span class="n">q</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">next</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>      <span class="n">ans</span> <span class="o">=</span>  <span class="n">min</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="n">DisToSeg</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">p</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">next</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="n">q</span><span class="p">]));</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">Area</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">p</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">next</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="n">q</span><span class="p">])</span> <span class="o">-</span><span class="n">Area</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">p</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">next</span><span class="p">],</span> <span class="n">b</span><span class="p">[(</span><span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">m</span><span class="p">]))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">ans</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="n">min</span><span class="p">(</span><span class="n">DisToSeg</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="n">q</span><span class="p">],</span> <span class="n">b</span><span class="p">[(</span><span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">m</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">p</span><span class="p">]),</span><span class="n">min</span><span class="p">(</span><span class="n">DisToSeg</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="n">q</span><span class="p">],</span> <span class="n">b</span><span class="p">[(</span><span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">m</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">next</span><span class="p">]),</span><span class="n">DisToSeg</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">p</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">next</span><span class="p">],</span> <span class="n">b</span><span class="p">[(</span><span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">m</span><span class="p">]))));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">p</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">ConvexHull</span><span class="p">(</span><span class="n">Point</span><span class="o">*</span> <span class="n">p</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">Point</span><span class="o">*</span> <span class="n">ch</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">sort</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">p</span><span class="o">+</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">m</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">2</span><span class="p">]).</span><span class="n">det</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">m</span> <span class="o">--</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">m</span> <span class="o">&gt;</span> <span class="n">k</span> <span class="o">&amp;&amp;</span><span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">2</span><span class="p">]).</span><span class="n">det</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">m</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="n">m</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">Point</span> <span class="n">Hulla</span><span class="p">[</span><span class="n">N</span><span class="p">],</span><span class="n">Hullb</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">n</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">m</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="n">p</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%lf%lf&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a1</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a1</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>          <span class="n">p</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="n">a1</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%lf%lf&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a2</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a2</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>          <span class="n">p</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="n">a2</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">nn</span> <span class="o">=</span> <span class="n">ConvexHull</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">Hulla</span><span class="p">);</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">mm</span> <span class="o">=</span> <span class="n">ConvexHull</span><span class="p">(</span><span class="n">a2</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">Hullb</span><span class="p">);</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">min1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="n">max2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nn</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">Hulla</span><span class="p">[</span><span class="n">min1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">Hulla</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>              <span class="n">min1</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">mm</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">Hullb</span><span class="p">[</span><span class="n">max2</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">Hullb</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>              <span class="n">max2</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">double</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">RotatingJam</span><span class="p">(</span><span class="n">min1</span><span class="p">,</span> <span class="n">max2</span><span class="p">,</span> <span class="n">nn</span><span class="p">,</span> <span class="n">mm</span><span class="p">,</span> <span class="n">Hulla</span><span class="p">,</span> <span class="n">Hullb</span><span class="p">);</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%.5f</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">ans</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://whn757397540.github.io/blog/archives/">&lt;&ndash;Back</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HDU4986 桶分打表大法第二弹]]></title>
    <link href="http://whn757397540.github.io/blog/2015/08/10/hdu4986-tong-fen-da-biao-da-fa-di-er-dan/"/>
    <updated>2015-08-10T16:56:34+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/08/10/hdu4986-tong-fen-da-biao-da-fa-di-er-dan</id>
    <content type="html"><![CDATA[<p>Bestcoder7的第2题，本是一个数学题。会的话，几分钟出答案，不会的话，这里也有一种乱搞的方法！</p>

<!--more-->


<p>好了，进入正题，这题其实就是求调和级数的和，也就是1+½+1/3+……+1/n;</p>

<p>一种方法，数学法，貌似是个数学竞赛题！结论是，当n足够大的话，调和级数的和可以近似为ln(n+1)+r(欧拉常数），貌似是个数学奥赛题，这个想要证明的话，去百度下吧！</p>

<p>另一种方法，分桶打表乱搞大法，当时排位赛的时候用到过，求10亿以内的质数。这里也是，我选的桶的大小是100万（这个是自己来把握的），就是每逢100万保存一个数，然后在100万的区间内直接暴力求解。。</p>

<p>两种方法的代码都在下面</p>

<p>桶分打表大法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="kt">double</span> <span class="n">a</span><span class="p">[]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mf">14.3927267229</span><span class="p">,</span><span class="mf">15.0858736534</span><span class="p">,</span><span class="mf">15.4913386782</span><span class="p">,</span><span class="mf">15.7790207090</span><span class="p">,</span><span class="mf">16.0021642353</span><span class="p">,</span><span class="mf">16.1844857754</span><span class="p">,</span><span class="mf">16.3386364433</span><span class="p">,</span><span class="mf">16.4721678270</span><span class="p">,</span><span class="mf">16.5899508558</span><span class="p">,</span><span class="mf">16.6953113659</span><span class="p">,</span><span class="mf">16.7906215411</span><span class="p">,</span><span class="mf">16.8776329143</span><span class="p">,</span><span class="mf">16.9576756188</span><span class="p">,</span><span class="mf">17.0317835882</span><span class="p">,</span><span class="mf">17.1007764573</span><span class="p">,</span><span class="mf">17.1653149764</span><span class="p">,</span><span class="mf">17.2259395963</span><span class="p">,</span><span class="mf">17.2830980085</span><span class="p">,</span><span class="mf">17.3371652283</span><span class="p">,</span><span class="mf">17.3884585214</span><span class="p">,</span><span class="mf">17.4372486844</span><span class="p">,</span><span class="mf">17.4837686989</span><span class="p">,</span><span class="mf">17.5282204605</span><span class="p">,</span><span class="mf">17.5707800740</span><span class="p">,</span><span class="mf">17.6116020677</span><span class="p">,</span><span class="mf">17.6508227801</span><span class="p">,</span><span class="mf">17.6885631074</span><span class="p">,</span><span class="mf">17.7249307509</span><span class="p">,</span><span class="mf">17.7600220701</span><span class="p">,</span><span class="mf">17.7939236212</span><span class="p">,</span><span class="mf">17.8267134435</span><span class="p">,</span><span class="mf">17.8584621413</span><span class="p">,</span><span class="mf">17.8892337995</span><span class="p">,</span><span class="mf">17.9190867622</span><span class="p">,</span><span class="mf">17.9480742986</span><span class="p">,</span><span class="mf">17.9762451752</span><span class="p">,</span><span class="mf">18.0036441490</span><span class="p">,</span><span class="mf">18.0303123957</span><span class="p">,</span><span class="mf">18.0562878818</span><span class="p">,</span><span class="mf">18.0816056895</span><span class="p">,</span><span class="mf">18.1062983018</span><span class="p">,</span><span class="mf">18.1303958531</span><span class="p">,</span><span class="mf">18.1539263502</span><span class="p">,</span><span class="mf">18.1769158681</span><span class="p">,</span><span class="mf">18.1993887237</span><span class="p">,</span><span class="mf">18.2213676302</span><span class="p">,</span><span class="mf">18.2428738352</span><span class="p">,</span><span class="mf">18.2639272442</span><span class="p">,</span><span class="mf">18.2845465312</span><span class="p">,</span><span class="mf">18.3047492383</span><span class="p">,</span><span class="mf">18.3245518654</span><span class="p">,</span><span class="mf">18.3439699511</span><span class="p">,</span><span class="mf">18.3630181459</span><span class="p">,</span><span class="mf">18.3817102787</span><span class="p">,</span><span class="mf">18.4000594172</span><span class="p">,</span><span class="mf">18.4180779225</span><span class="p">,</span><span class="mf">18.4357774995</span><span class="p">,</span><span class="mf">18.4531692420</span><span class="p">,</span><span class="mf">18.4702636752</span><span class="p">,</span><span class="mf">18.4870707934</span><span class="p">,</span><span class="mf">18.5036000952</span><span class="p">,</span><span class="mf">18.5198606160</span><span class="p">,</span><span class="mf">18.5358609572</span><span class="p">,</span><span class="mf">18.5516093140</span><span class="p">,</span><span class="mf">18.5671135005</span><span class="p">,</span><span class="mf">18.5823809725</span><span class="p">,</span><span class="mf">18.5974188497</span><span class="p">,</span><span class="mf">18.6122339354</span><span class="p">,</span><span class="mf">18.6268327347</span><span class="p">,</span><span class="mf">18.6412214721</span><span class="p">,</span><span class="mf">18.6554061069</span><span class="p">,</span><span class="mf">18.6693923488</span><span class="p">,</span><span class="mf">18.6831856709</span><span class="p">,</span><span class="mf">18.6967913228</span><span class="p">,</span><span class="mf">18.7102143431</span><span class="p">,</span><span class="mf">18.7234595697</span><span class="p">,</span><span class="mf">18.7365316512</span><span class="p">,</span><span class="mf">18.7494350560</span><span class="p">,</span><span class="mf">18.7621740817</span><span class="p">,</span><span class="mf">18.7747528638</span><span class="p">,</span><span class="mf">18.7871753837</span><span class="p">,</span><span class="mf">18.7994454762</span><span class="p">,</span><span class="mf">18.8115668367</span><span class="p">,</span><span class="mf">18.8235430277</span><span class="p">,</span><span class="mf">18.8353774852</span><span class="p">,</span><span class="mf">18.8470735249</span><span class="p">,</span><span class="mf">18.8586343473</span><span class="p">,</span><span class="mf">18.8700630430</span><span class="p">,</span><span class="mf">18.8813625982</span><span class="p">,</span><span class="mf">18.8925358987</span><span class="p">,</span><span class="mf">18.9035857349</span><span class="p">,</span><span class="mf">18.9145148053</span><span class="p">,</span><span class="mf">18.9253257214</span><span class="p">,</span><span class="mf">18.9360210105</span><span class="p">,</span><span class="mf">18.9466031197</span><span class="p">,</span><span class="mf">18.9570744195</span><span class="p">,</span><span class="mf">18.9674372065</span><span class="p">,</span><span class="mf">18.9776937066</span><span class="p">,</span><span class="mf">18.9878460780</span><span class="p">,</span><span class="mf">18.9978964139</span><span class="p">,</span><span class="mf">19.0078467447</span><span class="p">,</span><span class="mf">19.0176990411</span><span class="p">,</span><span class="mf">19.0274552159</span><span class="p">,</span><span class="mf">19.0371171268</span><span class="p">,</span><span class="mf">19.0466865778</span><span class="p">,</span><span class="mf">19.0561653217</span><span class="p">,</span><span class="mf">19.0655550620</span><span class="p">,</span><span class="mf">19.0748574546</span><span class="p">,</span><span class="mf">19.0840741097</span><span class="p">,</span><span class="mf">19.0932065932</span><span class="p">,</span><span class="mf">19.1022564287</span><span class="p">,</span><span class="mf">19.1112250986</span><span class="p">,</span><span class="mf">19.1201140460</span><span class="p">,</span><span class="mf">19.1289246756</span><span class="p">,</span><span class="mf">19.1376583556</span><span class="p">,</span><span class="mf">19.1463164183</span><span class="p">,</span><span class="mf">19.1549001619</span><span class="p">,</span><span class="mf">19.1634108516</span><span class="p">,</span><span class="mf">19.1718497202</span><span class="p">,</span><span class="mf">19.1802179698</span><span class="p">,</span><span class="mf">19.1885167726</span><span class="p">,</span><span class="mf">19.1967472717</span><span class="p">,</span><span class="mf">19.2049105823</span><span class="p">,</span><span class="mf">19.2130077925</span><span class="p">,</span><span class="mf">19.2210399642</span><span class="p">,</span><span class="mf">19.2290081338</span><span class="p">,</span><span class="mf">19.2369133133</span><span class="p">,</span><span class="mf">19.2447564907</span><span class="p">,</span><span class="mf">19.2525386311</span><span class="p">,</span><span class="mf">19.2602606772</span><span class="p">,</span><span class="mf">19.2679235499</span><span class="p">,</span><span class="mf">19.2755281492</span><span class="p">,</span><span class="mf">19.2830753548</span><span class="p">,</span><span class="mf">19.2905660265</span><span class="p">,</span><span class="mf">19.2980010050</span><span class="p">,</span><span class="mf">19.3053811123</span><span class="p">,</span><span class="mf">19.3127071523</span><span class="p">,</span><span class="mf">19.3199799116</span><span class="p">,</span><span class="mf">19.3272001596</span><span class="p">,</span><span class="mf">19.3343686490</span><span class="p">,</span><span class="mf">19.3414861168</span><span class="p">,</span><span class="mf">19.3485532840</span><span class="p">,</span><span class="mf">19.3555708566</span><span class="p">,</span><span class="mf">19.3625395259</span><span class="p">,</span><span class="mf">19.3694599687</span><span class="p">,</span><span class="mf">19.3763328480</span><span class="p">,</span><span class="mf">19.3831588130</span><span class="p">,</span><span class="mf">19.3899385000</span><span class="p">,</span><span class="mf">19.3966725322</span><span class="p">,</span><span class="mf">19.4033615203</span><span class="p">,</span><span class="mf">19.4100060630</span><span class="p">,</span><span class="mf">19.4166067470</span><span class="p">,</span><span class="mf">19.4231641475</span><span class="p">,</span><span class="mf">19.4296788285</span><span class="p">,</span><span class="mf">19.4361513430</span><span class="p">,</span><span class="mf">19.4425822333</span><span class="p">,</span><span class="mf">19.4489720314</span><span class="p">,</span><span class="mf">19.4553212591</span><span class="p">,</span><span class="mf">19.4616304282</span><span class="p">,</span><span class="mf">19.4679000412</span><span class="p">,</span><span class="mf">19.4741305910</span><span class="p">,</span><span class="mf">19.4803225612</span><span class="p">,</span><span class="mf">19.4864764267</span><span class="p">,</span><span class="mf">19.4925926537</span><span class="p">,</span><span class="mf">19.4986716998</span><span class="p">,</span><span class="mf">19.5047140142</span><span class="p">,</span><span class="mf">19.5107200383</span><span class="p">,</span><span class="mf">19.5166902052</span><span class="p">,</span><span class="mf">19.5226249407</span><span class="p">,</span><span class="mf">19.5285246629</span><span class="p">,</span><span class="mf">19.5343897823</span><span class="p">,</span><span class="mf">19.5402207026</span><span class="p">,</span><span class="mf">19.5460178203</span><span class="p">,</span><span class="mf">19.5517815250</span><span class="p">,</span><span class="mf">19.5575121996</span><span class="p">,</span><span class="mf">19.5632102207</span><span class="p">,</span><span class="mf">19.5688759583</span><span class="p">,</span><span class="mf">19.5745097760</span><span class="p">,</span><span class="mf">19.5801120315</span><span class="p">,</span><span class="mf">19.5856830765</span><span class="p">,</span><span class="mf">19.5912232569</span><span class="p">,</span><span class="mf">19.5967329127</span><span class="p">,</span><span class="mf">19.6022123784</span><span class="p">,</span><span class="mf">19.6076619832</span><span class="p">,</span><span class="mf">19.6130820506</span><span class="p">,</span><span class="mf">19.6184728993</span><span class="p">,</span><span class="mf">19.6238348424</span><span class="p">,</span><span class="mf">19.6291681884</span><span class="p">,</span><span class="mf">19.6344732406</span><span class="p">,</span><span class="mf">19.6397502977</span><span class="p">,</span><span class="mf">19.6449996535</span><span class="p">,</span><span class="mf">19.6502215975</span><span class="p">,</span><span class="mf">19.6554164144</span><span class="p">,</span><span class="mf">19.6605843845</span><span class="p">,</span><span class="mf">19.6657257840</span><span class="p">,</span><span class="mf">19.6708408846</span><span class="p">,</span><span class="mf">19.6759299541</span><span class="p">,</span><span class="mf">19.6809932561</span><span class="p">,</span><span class="mf">19.6860310501</span><span class="p">,</span><span class="mf">19.6910435919</span><span class="p">,</span><span class="mf">19.6960311334</span><span class="p">,</span><span class="mf">19.7009939227</span><span class="p">,</span><span class="mf">19.7059322044</span><span class="p">,</span><span class="mf">19.7108462192</span><span class="p">,</span><span class="mf">19.7157362044</span><span class="p">,</span><span class="mf">19.7206023941</span><span class="p">,</span><span class="mf">19.7254450185</span><span class="p">,</span><span class="mf">19.7302643050</span><span class="p">,</span><span class="mf">19.7350604772</span><span class="p">,</span><span class="mf">19.7398337560</span><span class="p">,</span><span class="mf">19.7445843587</span><span class="p">,</span><span class="mf">19.7493124999</span><span class="p">,</span><span class="mf">19.7540183909</span><span class="p">,</span><span class="mf">19.7587022402</span><span class="p">,</span><span class="mf">19.7633642533</span><span class="p">,</span><span class="mf">19.7680046329</span><span class="p">,</span><span class="mf">19.7726235787</span><span class="p">,</span><span class="mf">19.7772212879</span><span class="p">,</span><span class="mf">19.7817979550</span><span class="p">,</span><span class="mf">19.7863537715</span><span class="p">,</span><span class="mf">19.7908889266</span><span class="p">,</span><span class="mf">19.7954036070</span><span class="p">,</span><span class="mf">19.7998979966</span><span class="p">,</span><span class="mf">19.8043722770</span><span class="p">,</span><span class="mf">19.8088266273</span><span class="p">,</span><span class="mf">19.8132612244</span><span class="p">,</span><span class="mf">19.8176762426</span><span class="p">,</span><span class="mf">19.8220718540</span><span class="p">,</span><span class="mf">19.8264482286</span><span class="p">,</span><span class="mf">19.8308055340</span><span class="p">,</span><span class="mf">19.8351439356</span><span class="p">,</span><span class="mf">19.8394635967</span><span class="p">,</span><span class="mf">19.8437646786</span><span class="p">,</span><span class="mf">19.8480473404</span><span class="p">,</span><span class="mf">19.8523117391</span><span class="p">,</span><span class="mf">19.8565580300</span><span class="p">,</span><span class="mf">19.8607863661</span><span class="p">,</span><span class="mf">19.8649968986</span><span class="p">,</span><span class="mf">19.8691897769</span><span class="p">,</span><span class="mf">19.8733651483</span><span class="p">,</span><span class="mf">19.8775231584</span><span class="p">,</span><span class="mf">19.8816639511</span><span class="p">,</span><span class="mf">19.8857876683</span><span class="p">,</span><span class="mf">19.8898944502</span><span class="p">,</span><span class="mf">19.8939844355</span><span class="p">,</span><span class="mf">19.8980577608</span><span class="p">,</span><span class="mf">19.9021145615</span><span class="p">,</span><span class="mf">19.9061549710</span><span class="p">,</span><span class="mf">19.9101791213</span><span class="p">,</span><span class="mf">19.9141871427</span><span class="p">,</span><span class="mf">19.9181791640</span><span class="p">,</span><span class="mf">19.9221553124</span><span class="p">,</span><span class="mf">19.9261157136</span><span class="p">,</span><span class="mf">19.9300604919</span><span class="p">,</span><span class="mf">19.9339897700</span><span class="p">,</span><span class="mf">19.9379036693</span><span class="p">,</span><span class="mf">19.9418023097</span><span class="p">,</span><span class="mf">19.9456858097</span><span class="p">,</span><span class="mf">19.9495542865</span><span class="p">,</span><span class="mf">19.9534078558</span><span class="p">,</span><span class="mf">19.9572466321</span><span class="p">,</span><span class="mf">19.9610707285</span><span class="p">,</span><span class="mf">19.9648802569</span><span class="p">,</span><span class="mf">19.9686753279</span><span class="p">,</span><span class="mf">19.9724560507</span><span class="p">,</span><span class="mf">19.9762225335</span><span class="p">,</span><span class="mf">19.9799748831</span><span class="p">,</span><span class="mf">19.9837132052</span><span class="p">,</span><span class="mf">19.9874376043</span><span class="p">,</span><span class="mf">19.9911481837</span><span class="p">,</span><span class="mf">19.9948450456</span><span class="p">,</span><span class="mf">19.9985282910</span><span class="p">,</span><span class="mf">20.0021980199</span><span class="p">,</span><span class="mf">20.0058543311</span><span class="p">,</span><span class="mf">20.0094973224</span><span class="p">,</span><span class="mf">20.0131270904</span><span class="p">,</span><span class="mf">20.0167437309</span><span class="p">,</span><span class="mf">20.0203473384</span><span class="p">,</span><span class="mf">20.0239380065</span><span class="p">,</span><span class="mf">20.0275158278</span><span class="p">,</span><span class="mf">20.0310808940</span><span class="p">,</span><span class="mf">20.0346332956</span><span class="p">,</span><span class="mf">20.0381731223</span><span class="p">,</span><span class="mf">20.0417004628</span><span class="p">,</span><span class="mf">20.0452154049</span><span class="p">,</span><span class="mf">20.0487180354</span><span class="p">,</span><span class="mf">20.0522084404</span><span class="p">,</span><span class="mf">20.0556867047</span><span class="p">,</span><span class="mf">20.0591529127</span><span class="p">,</span><span class="mf">20.0626071476</span><span class="p">,</span><span class="mf">20.0660494918</span><span class="p">,</span><span class="mf">20.0694800268</span><span class="p">,</span><span class="mf">20.0728988336</span><span class="p">,</span><span class="mf">20.0763059919</span><span class="p">,</span><span class="mf">20.0797015809</span><span class="p">,</span><span class="mf">20.0830856789</span><span class="p">,</span><span class="mf">20.0864583634</span><span class="p">,</span><span class="mf">20.0898197111</span><span class="p">,</span><span class="mf">20.0931697979</span><span class="p">,</span><span class="mf">20.0965086992</span><span class="p">,</span><span class="mf">20.0998364893</span><span class="p">,</span><span class="mf">20.1031532419</span><span class="p">,</span><span class="mf">20.1064590300</span><span class="p">,</span><span class="mf">20.1097539259</span><span class="p">,</span><span class="mf">20.1130380011</span><span class="p">,</span><span class="mf">20.1163113265</span><span class="p">,</span><span class="mf">20.1195739721</span><span class="p">,</span><span class="mf">20.1228260075</span><span class="p">,</span><span class="mf">20.1260675014</span><span class="p">,</span><span class="mf">20.1292985220</span><span class="p">,</span><span class="mf">20.1325191367</span><span class="p">,</span><span class="mf">20.1357294123</span><span class="p">,</span><span class="mf">20.1389294150</span><span class="p">,</span><span class="mf">20.1421192104</span><span class="p">,</span><span class="mf">20.1452988633</span><span class="p">,</span><span class="mf">20.1484684380</span><span class="p">,</span><span class="mf">20.1516279983</span><span class="p">,</span><span class="mf">20.1547776072</span><span class="p">,</span><span class="mf">20.1579173272</span><span class="p">,</span><span class="mf">20.1610472202</span><span class="p">,</span><span class="mf">20.1641673476</span><span class="p">,</span><span class="mf">20.1672777700</span><span class="p">,</span><span class="mf">20.1703785476</span><span class="p">,</span><span class="mf">20.1734697402</span><span class="p">,</span><span class="mf">20.1765514067</span><span class="p">,</span><span class="mf">20.1796236058</span><span class="p">,</span><span class="mf">20.1826863953</span><span class="p">,</span><span class="mf">20.1857398328</span><span class="p">,</span><span class="mf">20.1887839752</span><span class="p">,</span><span class="mf">20.1918188788</span><span class="p">,</span><span class="mf">20.1948445998</span><span class="p">,</span><span class="mf">20.1978611933</span><span class="p">,</span><span class="mf">20.2008687143</span><span class="p">,</span><span class="mf">20.2038672173</span><span class="p">,</span><span class="mf">20.2068567562</span><span class="p">,</span><span class="mf">20.2098373843</span><span class="p">,</span><span class="mf">20.2128091547</span><span class="p">,</span><span class="mf">20.2157721198</span><span class="p">,</span><span class="mf">20.2187263317</span><span class="p">,</span><span class="mf">20.2216718419</span><span class="p">,</span><span class="mf">20.2246087016</span><span class="p">,</span><span class="mf">20.2275369614</span><span class="p">,</span><span class="mf">20.2304566715</span><span class="p">,</span><span class="mf">20.2333678817</span><span class="p">,</span><span class="mf">20.2362706413</span><span class="p">,</span><span class="mf">20.2391649994</span><span class="p">,</span><span class="mf">20.2420510043</span><span class="p">,</span><span class="mf">20.2449287041</span><span class="p">,</span><span class="mf">20.2477981465</span><span class="p">,</span><span class="mf">20.2506593788</span><span class="p">,</span><span class="mf">20.2535124478</span><span class="p">,</span><span class="mf">20.2563573999</span><span class="p">,</span><span class="mf">20.2591942812</span><span class="p">,</span><span class="mf">20.2620231374</span><span class="p">,</span><span class="mf">20.2648440138</span><span class="p">,</span><span class="mf">20.2676569551</span><span class="p">,</span><span class="mf">20.2704620060</span><span class="p">,</span><span class="mf">20.2732592107</span><span class="p">,</span><span class="mf">20.2760486127</span><span class="p">,</span><span class="mf">20.2788302557</span><span class="p">,</span><span class="mf">20.2816041826</span><span class="p">,</span><span class="mf">20.2843704361</span><span class="p">,</span><span class="mf">20.2871290585</span><span class="p">,</span><span class="mf">20.2898800919</span><span class="p">,</span><span class="mf">20.2926235778</span><span class="p">,</span><span class="mf">20.2953595576</span><span class="p">,</span><span class="mf">20.2980880723</span><span class="p">,</span><span class="mf">20.3008091624</span><span class="p">,</span><span class="mf">20.3035228683</span><span class="p">,</span><span class="mf">20.3062292299</span><span class="p">,</span><span class="mf">20.3089282868</span><span class="p">,</span><span class="mf">20.3116200785</span><span class="p">,</span><span class="mf">20.3143046439</span><span class="p">,</span><span class="mf">20.3169820216</span><span class="p">,</span><span class="mf">20.3196522502</span><span class="p">,</span><span class="mf">20.3223153676</span><span class="p">,</span><span class="mf">20.3249714116</span><span class="p">,</span><span class="mf">20.3276204198</span><span class="p">,</span><span class="mf">20.3302624293</span><span class="p">,</span><span class="mf">20.3328974769</span><span class="p">,</span><span class="mf">20.3355255993</span><span class="p">,</span><span class="mf">20.3381468328</span><span class="p">,</span><span class="mf">20.3407612134</span><span class="p">,</span><span class="mf">20.3433687768</span><span class="p">,</span><span class="mf">20.3459695585</span><span class="p">,</span><span class="mf">20.3485635936</span><span class="p">,</span><span class="mf">20.3511509172</span><span class="p">,</span><span class="mf">20.3537315638</span><span class="p">,</span><span class="mf">20.3563055678</span><span class="p">,</span><span class="mf">20.3588729633</span><span class="p">,</span><span class="mf">20.3614337841</span><span class="p">,</span><span class="mf">20.3639880639</span><span class="p">,</span><span class="mf">20.3665358360</span><span class="p">,</span><span class="mf">20.3690771334</span><span class="p">,</span><span class="mf">20.3716119890</span><span class="p">,</span><span class="mf">20.3741404354</span><span class="p">,</span><span class="mf">20.3766625048</span><span class="p">,</span><span class="mf">20.3791782294</span><span class="p">,</span><span class="mf">20.3816876410</span><span class="p">,</span><span class="mf">20.3841907712</span><span class="p">,</span><span class="mf">20.3866876514</span><span class="p">,</span><span class="mf">20.3891783127</span><span class="p">,</span><span class="mf">20.3916627861</span><span class="p">,</span><span class="mf">20.3941411021</span><span class="p">,</span><span class="mf">20.3966132912</span><span class="p">,</span><span class="mf">20.3990793837</span><span class="p">,</span><span class="mf">20.4015394095</span><span class="p">,</span><span class="mf">20.4039933985</span><span class="p">,</span><span class="mf">20.4064413801</span><span class="p">,</span><span class="mf">20.4088833838</span><span class="p">,</span><span class="mf">20.4113194386</span><span class="p">,</span><span class="mf">20.4137495734</span><span class="p">,</span><span class="mf">20.4161738170</span><span class="p">,</span><span class="mf">20.4185921979</span><span class="p">,</span><span class="mf">20.4210047443</span><span class="p">,</span><span class="mf">20.4234114843</span><span class="p">,</span><span class="mf">20.4258124459</span><span class="p">,</span><span class="mf">20.4282076566</span><span class="p">,</span><span class="mf">20.4305971440</span><span class="p">,</span><span class="mf">20.4329809353</span><span class="p">,</span><span class="mf">20.4353590577</span><span class="p">,</span><span class="mf">20.4377315381</span><span class="p">,</span><span class="mf">20.4400984031</span><span class="p">,</span><span class="mf">20.4424596793</span><span class="p">,</span><span class="mf">20.4448153930</span><span class="p">,</span><span class="mf">20.4471655703</span><span class="p">,</span><span class="mf">20.4495102373</span><span class="p">,</span><span class="mf">20.4518494196</span><span class="p">,</span><span class="mf">20.4541831430</span><span class="p">,</span><span class="mf">20.4565114327</span><span class="p">,</span><span class="mf">20.4588343141</span><span class="p">,</span><span class="mf">20.4611518123</span><span class="p">,</span><span class="mf">20.4634639520</span><span class="p">,</span><span class="mf">20.4657707581</span><span class="p">,</span><span class="mf">20.4680722551</span><span class="p">,</span><span class="mf">20.4703684674</span><span class="p">,</span><span class="mf">20.4726594191</span><span class="p">,</span><span class="mf">20.4749451344</span><span class="p">,</span><span class="mf">20.4772256371</span><span class="p">,</span><span class="mf">20.4795009509</span><span class="p">,</span><span class="mf">20.4817710994</span><span class="p">,</span><span class="mf">20.4840361061</span><span class="p">,</span><span class="mf">20.4862959940</span><span class="p">,</span><span class="mf">20.4885507864</span><span class="p">,</span><span class="mf">20.4908005062</span><span class="p">,</span><span class="mf">20.4930451760</span><span class="p">,</span><span class="mf">20.4952848186</span><span class="p">,</span><span class="mf">20.4975194564</span><span class="p">,</span><span class="mf">20.4997491117</span><span class="p">,</span><span class="mf">20.5019738067</span><span class="p">,</span><span class="mf">20.5041935635</span><span class="p">,</span><span class="mf">20.5064084038</span><span class="p">,</span><span class="mf">20.5086183495</span><span class="p">,</span><span class="mf">20.5108234220</span><span class="p">,</span><span class="mf">20.5130236429</span><span class="p">,</span><span class="mf">20.5152190335</span><span class="p">,</span><span class="mf">20.5174096149</span><span class="p">,</span><span class="mf">20.5195954081</span><span class="p">,</span><span class="mf">20.5217764340</span><span class="p">,</span><span class="mf">20.5239527134</span><span class="p">,</span><span class="mf">20.5261242669</span><span class="p">,</span><span class="mf">20.5282911150</span><span class="p">,</span><span class="mf">20.5304532780</span><span class="p">,</span><span class="mf">20.5326107762</span><span class="p">,</span><span class="mf">20.5347636295</span><span class="p">,</span><span class="mf">20.5369118581</span><span class="p">,</span><span class="mf">20.5390554816</span><span class="p">,</span><span class="mf">20.5411945199</span><span class="p">,</span><span class="mf">20.5433289924</span><span class="p">,</span><span class="mf">20.5454589186</span><span class="p">,</span><span class="mf">20.5475843179</span><span class="p">,</span><span class="mf">20.5497052095</span><span class="p">,</span><span class="mf">20.5518216124</span><span class="p">,</span><span class="mf">20.5539335456</span><span class="p">,</span><span class="mf">20.5560410280</span><span class="p">,</span><span class="mf">20.5581440781</span><span class="p">,</span><span class="mf">20.5602427148</span><span class="p">,</span><span class="mf">20.5623369564</span><span class="p">,</span><span class="mf">20.5644268213</span><span class="p">,</span><span class="mf">20.5665123278</span><span class="p">,</span><span class="mf">20.5685934940</span><span class="p">,</span><span class="mf">20.5706703380</span><span class="p">,</span><span class="mf">20.5727428776</span><span class="p">,</span><span class="mf">20.5748111306</span><span class="p">,</span><span class="mf">20.5768751148</span><span class="p">,</span><span class="mf">20.5789348478</span><span class="p">,</span><span class="mf">20.5809903470</span><span class="p">,</span><span class="mf">20.5830416297</span><span class="p">,</span><span class="mf">20.5850887134</span><span class="p">,</span><span class="mf">20.5871316150</span><span class="p">,</span><span class="mf">20.5891703517</span><span class="p">,</span><span class="mf">20.5912049404</span><span class="p">,</span><span class="mf">20.5932353979</span><span class="p">,</span><span class="mf">20.5952617411</span><span class="p">,</span><span class="mf">20.5972839864</span><span class="p">,</span><span class="mf">20.5993021506</span><span class="p">,</span><span class="mf">20.6013162500</span><span class="p">,</span><span class="mf">20.6033263009</span><span class="p">,</span><span class="mf">20.6053323196</span><span class="p">,</span><span class="mf">20.6073343223</span><span class="p">,</span><span class="mf">20.6093323249</span><span class="p">,</span><span class="mf">20.6113263436</span><span class="p">,</span><span class="mf">20.6133163940</span><span class="p">,</span><span class="mf">20.6153024919</span><span class="p">,</span><span class="mf">20.6172846531</span><span class="p">,</span><span class="mf">20.6192628931</span><span class="p">,</span><span class="mf">20.6212372274</span><span class="p">,</span><span class="mf">20.6232076714</span><span class="p">,</span><span class="mf">20.6251742404</span><span class="p">,</span><span class="mf">20.6271369496</span><span class="p">,</span><span class="mf">20.6290958140</span><span class="p">,</span><span class="mf">20.6310508489</span><span class="p">,</span><span class="mf">20.6330020690</span><span class="p">,</span><span class="mf">20.6349494893</span><span class="p">,</span><span class="mf">20.6368931245</span><span class="p">,</span><span class="mf">20.6388329893</span><span class="p">,</span><span class="mf">20.6407690983</span><span class="p">,</span><span class="mf">20.6427014661</span><span class="p">,</span><span class="mf">20.6446301070</span><span class="p">,</span><span class="mf">20.6465550354</span><span class="p">,</span><span class="mf">20.6484762656</span><span class="p">,</span><span class="mf">20.6503938117</span><span class="p">,</span><span class="mf">20.6523076879</span><span class="p">,</span><span class="mf">20.6542179081</span><span class="p">,</span><span class="mf">20.6561244864</span><span class="p">,</span><span class="mf">20.6580274366</span><span class="p">,</span><span class="mf">20.6599267724</span><span class="p">,</span><span class="mf">20.6618225075</span><span class="p">,</span><span class="mf">20.6637146557</span><span class="p">,</span><span class="mf">20.6656032304</span><span class="p">,</span><span class="mf">20.6674882451</span><span class="p">,</span><span class="mf">20.6693697131</span><span class="p">,</span><span class="mf">20.6712476480</span><span class="p">,</span><span class="mf">20.6731220628</span><span class="p">,</span><span class="mf">20.6749929707</span><span class="p">,</span><span class="mf">20.6768603849</span><span class="p">,</span><span class="mf">20.6787243183</span><span class="p">,</span><span class="mf">20.6805847840</span><span class="p">,</span><span class="mf">20.6824417947</span><span class="p">,</span><span class="mf">20.6842953634</span><span class="p">,</span><span class="mf">20.6861455026</span><span class="p">,</span><span class="mf">20.6879922252</span><span class="p">,</span><span class="mf">20.6898355437</span><span class="p">,</span><span class="mf">20.6916754706</span><span class="p">,</span><span class="mf">20.6935120184</span><span class="p">,</span><span class="mf">20.6953451995</span><span class="p">,</span><span class="mf">20.6971750262</span><span class="p">,</span><span class="mf">20.6990015107</span><span class="p">,</span><span class="mf">20.7008246653</span><span class="p">,</span><span class="mf">20.7026445020</span><span class="p">,</span><span class="mf">20.7044610329</span><span class="p">,</span><span class="mf">20.7062742700</span><span class="p">,</span><span class="mf">20.7080842253</span><span class="p">,</span><span class="mf">20.7098909105</span><span class="p">,</span><span class="mf">20.7116943375</span><span class="p">,</span><span class="mf">20.7134945180</span><span class="p">,</span><span class="mf">20.7152914637</span><span class="p">,</span><span class="mf">20.7170851861</span><span class="p">,</span><span class="mf">20.7188756969</span><span class="p">,</span><span class="mf">20.7206630075</span><span class="p">,</span><span class="mf">20.7224471293</span><span class="p">,</span><span class="mf">20.7242280736</span><span class="p">,</span><span class="mf">20.7260058519</span><span class="p">,</span><span class="mf">20.7277804753</span><span class="p">,</span><span class="mf">20.7295519549</span><span class="p">,</span><span class="mf">20.7313203020</span><span class="p">,</span><span class="mf">20.7330855275</span><span class="p">,</span><span class="mf">20.7348476425</span><span class="p">,</span><span class="mf">20.7366066579</span><span class="p">,</span><span class="mf">20.7383625846</span><span class="p">,</span><span class="mf">20.7401154334</span><span class="p">,</span><span class="mf">20.7418652151</span><span class="p">,</span><span class="mf">20.7436119405</span><span class="p">,</span><span class="mf">20.7453556201</span><span class="p">,</span><span class="mf">20.7470962645</span><span class="p">,</span><span class="mf">20.7488338844</span><span class="p">,</span><span class="mf">20.7505684902</span><span class="p">,</span><span class="mf">20.7523000924</span><span class="p">,</span><span class="mf">20.7540287013</span><span class="p">,</span><span class="mf">20.7557543273</span><span class="p">,</span><span class="mf">20.7574769806</span><span class="p">,</span><span class="mf">20.7591966715</span><span class="p">,</span><span class="mf">20.7609134101</span><span class="p">,</span><span class="mf">20.7626272066</span><span class="p">,</span><span class="mf">20.7643380710</span><span class="p">,</span><span class="mf">20.7660460133</span><span class="p">,</span><span class="mf">20.7677510435</span><span class="p">,</span><span class="mf">20.7694531716</span><span class="p">,</span><span class="mf">20.7711524074</span><span class="p">,</span><span class="mf">20.7728487606</span><span class="p">,</span><span class="mf">20.7745422411</span><span class="p">,</span><span class="mf">20.7762328586</span><span class="p">,</span><span class="mf">20.7779206227</span><span class="p">,</span><span class="mf">20.7796055431</span><span class="p">,</span><span class="mf">20.7812876293</span><span class="p">,</span><span class="mf">20.7829668908</span><span class="p">,</span><span class="mf">20.7846433371</span><span class="p">,</span><span class="mf">20.7863169777</span><span class="p">,</span><span class="mf">20.7879878218</span><span class="p">,</span><span class="mf">20.7896558789</span><span class="p">,</span><span class="mf">20.7913211582</span><span class="p">,</span><span class="mf">20.7929836690</span><span class="p">,</span><span class="mf">20.7946434204</span><span class="p">,</span><span class="mf">20.7963004216</span><span class="p">,</span><span class="mf">20.7979546817</span><span class="p">,</span><span class="mf">20.7996062098</span><span class="p">,</span><span class="mf">20.8012550147</span><span class="p">,</span><span class="mf">20.8029011057</span><span class="p">,</span><span class="mf">20.8045444914</span><span class="p">,</span><span class="mf">20.8061851809</span><span class="p">,</span><span class="mf">20.8078231829</span><span class="p">,</span><span class="mf">20.8094585062</span><span class="p">,</span><span class="mf">20.8110911596</span><span class="p">,</span><span class="mf">20.8127211518</span><span class="p">,</span><span class="mf">20.8143484915</span><span class="p">,</span><span class="mf">20.8159731872</span><span class="p">,</span><span class="mf">20.8175952476</span><span class="p">,</span><span class="mf">20.8192146811</span><span class="p">,</span><span class="mf">20.8208314964</span><span class="p">,</span><span class="mf">20.8224457017</span><span class="p">,</span><span class="mf">20.8240573056</span><span class="p">,</span><span class="mf">20.8256663164</span><span class="p">,</span><span class="mf">20.8272727425</span><span class="p">,</span><span class="mf">20.8288765920</span><span class="p">,</span><span class="mf">20.8304778734</span><span class="p">,</span><span class="mf">20.8320765948</span><span class="p">,</span><span class="mf">20.8336727643</span><span class="p">,</span><span class="mf">20.8352663901</span><span class="p">,</span><span class="mf">20.8368574804</span><span class="p">,</span><span class="mf">20.8384460430</span><span class="p">,</span><span class="mf">20.8400320862</span><span class="p">,</span><span class="mf">20.8416156178</span><span class="p">,</span><span class="mf">20.8431966458</span><span class="p">,</span><span class="mf">20.8447751781</span><span class="p">,</span><span class="mf">20.8463512225</span><span class="p">,</span><span class="mf">20.8479247870</span><span class="p">,</span><span class="mf">20.8494958792</span><span class="p">,</span><span class="mf">20.8510645070</span><span class="p">,</span><span class="mf">20.8526306780</span><span class="p">,</span><span class="mf">20.8541944000</span><span class="p">,</span><span class="mf">20.8557556806</span><span class="p">,</span><span class="mf">20.8573145273</span><span class="p">,</span><span class="mf">20.8588709479</span><span class="p">,</span><span class="mf">20.8604249497</span><span class="p">,</span><span class="mf">20.8619765404</span><span class="p">,</span><span class="mf">20.8635257274</span><span class="p">,</span><span class="mf">20.8650725181</span><span class="p">,</span><span class="mf">20.8666169200</span><span class="p">,</span><span class="mf">20.8681589403</span><span class="p">,</span><span class="mf">20.8696985865</span><span class="p">,</span><span class="mf">20.8712358658</span><span class="p">,</span><span class="mf">20.8727707856</span><span class="p">,</span><span class="mf">20.8743033529</span><span class="p">,</span><span class="mf">20.8758335751</span><span class="p">,</span><span class="mf">20.8773614593</span><span class="p">,</span><span class="mf">20.8788870126</span><span class="p">,</span><span class="mf">20.8804102421</span><span class="p">,</span><span class="mf">20.8819311550</span><span class="p">,</span><span class="mf">20.8834497581</span><span class="p">,</span><span class="mf">20.8849660586</span><span class="p">,</span><span class="mf">20.8864800635</span><span class="p">,</span><span class="mf">20.8879917796</span><span class="p">,</span><span class="mf">20.8895012138</span><span class="p">,</span><span class="mf">20.8910083731</span><span class="p">,</span><span class="mf">20.8925132643</span><span class="p">,</span><span class="mf">20.8940158942</span><span class="p">,</span><span class="mf">20.8955162695</span><span class="p">,</span><span class="mf">20.8970143972</span><span class="p">,</span><span class="mf">20.8985102837</span><span class="p">,</span><span class="mf">20.9000039360</span><span class="p">,</span><span class="mf">20.9014953606</span><span class="p">,</span><span class="mf">20.9029845641</span><span class="p">,</span><span class="mf">20.9044715533</span><span class="p">,</span><span class="mf">20.9059563345</span><span class="p">,</span><span class="mf">20.9074389145</span><span class="p">,</span><span class="mf">20.9089192996</span><span class="p">,</span><span class="mf">20.9103974965</span><span class="p">,</span><span class="mf">20.9118735115</span><span class="p">,</span><span class="mf">20.9133473512</span><span class="p">,</span><span class="mf">20.9148190218</span><span class="p">,</span><span class="mf">20.9162885297</span><span class="p">,</span><span class="mf">20.9177558814</span><span class="p">,</span><span class="mf">20.9192210832</span><span class="p">,</span><span class="mf">20.9206841412</span><span class="p">,</span><span class="mf">20.9221450619</span><span class="p">,</span><span class="mf">20.9236038513</span><span class="p">,</span><span class="mf">20.9250605158</span><span class="p">,</span><span class="mf">20.9265150615</span><span class="p">,</span><span class="mf">20.9279674946</span><span class="p">,</span><span class="mf">20.9294178212</span><span class="p">,</span><span class="mf">20.9308660474</span><span class="p">,</span><span class="mf">20.9323121792</span><span class="p">,</span><span class="mf">20.9337562228</span><span class="p">,</span><span class="mf">20.9351981841</span><span class="p">,</span><span class="mf">20.9366380692</span><span class="p">,</span><span class="mf">20.9380758839</span><span class="p">,</span><span class="mf">20.9395116343</span><span class="p">,</span><span class="mf">20.9409453263</span><span class="p">,</span><span class="mf">20.9423769658</span><span class="p">,</span><span class="mf">20.9438065586</span><span class="p">,</span><span class="mf">20.9452341106</span><span class="p">,</span><span class="mf">20.9466596276</span><span class="p">,</span><span class="mf">20.9480831154</span><span class="p">,</span><span class="mf">20.9495045797</span><span class="p">,</span><span class="mf">20.9509240264</span><span class="p">,</span><span class="mf">20.9523414611</span><span class="p">,</span><span class="mf">20.9537568895</span><span class="p">,</span><span class="mf">20.9551703173</span><span class="p">,</span><span class="mf">20.9565817501</span><span class="p">,</span><span class="mf">20.9579911936</span><span class="p">,</span><span class="mf">20.9593986534</span><span class="p">,</span><span class="mf">20.9608041350</span><span class="p">,</span><span class="mf">20.9622076440</span><span class="p">,</span><span class="mf">20.9636091859</span><span class="p">,</span><span class="mf">20.9650087663</span><span class="p">,</span><span class="mf">20.9664063905</span><span class="p">,</span><span class="mf">20.9678020642</span><span class="p">,</span><span class="mf">20.9691957926</span><span class="p">,</span><span class="mf">20.9705875813</span><span class="p">,</span><span class="mf">20.9719774356</span><span class="p">,</span><span class="mf">20.9733653608</span><span class="p">,</span><span class="mf">20.9747513625</span><span class="p">,</span><span class="mf">20.9761354457</span><span class="p">,</span><span class="mf">20.9775176159</span><span class="p">,</span><span class="mf">20.9788978784</span><span class="p">,</span><span class="mf">20.9802762384</span><span class="p">,</span><span class="mf">20.9816527011</span><span class="p">,</span><span class="mf">20.9830272718</span><span class="p">,</span><span class="mf">20.9843999556</span><span class="p">,</span><span class="mf">20.9857707577</span><span class="p">,</span><span class="mf">20.9871396833</span><span class="p">,</span><span class="mf">20.9885067375</span><span class="p">,</span><span class="mf">20.9898719254</span><span class="p">,</span><span class="mf">20.9912352522</span><span class="p">,</span><span class="mf">20.9925967228</span><span class="p">,</span><span class="mf">20.9939563423</span><span class="p">,</span><span class="mf">20.9953141157</span><span class="p">,</span><span class="mf">20.9966700481</span><span class="p">,</span><span class="mf">20.9980241445</span><span class="p">,</span><span class="mf">20.9993764097</span><span class="p">,</span><span class="mf">21.0007268488</span><span class="p">,</span><span class="mf">21.0020754667</span><span class="p">,</span><span class="mf">21.0034222683</span><span class="p">,</span><span class="mf">21.0047672584</span><span class="p">,</span><span class="mf">21.0061104419</span><span class="p">,</span><span class="mf">21.0074518237</span><span class="p">,</span><span class="mf">21.0087914087</span><span class="p">,</span><span class="mf">21.0101292015</span><span class="p">,</span><span class="mf">21.0114652071</span><span class="p">,</span><span class="mf">21.0127994301</span><span class="p">,</span><span class="mf">21.0141318753</span><span class="p">,</span><span class="mf">21.0154625475</span><span class="p">,</span><span class="mf">21.0167914513</span><span class="p">,</span><span class="mf">21.0181185915</span><span class="p">,</span><span class="mf">21.0194439728</span><span class="p">,</span><span class="mf">21.0207675997</span><span class="p">,</span><span class="mf">21.0220894770</span><span class="p">,</span><span class="mf">21.0234096092</span><span class="p">,</span><span class="mf">21.0247280009</span><span class="p">,</span><span class="mf">21.0260446568</span><span class="p">,</span><span class="mf">21.0273595814</span><span class="p">,</span><span class="mf">21.0286727792</span><span class="p">,</span><span class="mf">21.0299842548</span><span class="p">,</span><span class="mf">21.0312940127</span><span class="p">,</span><span class="mf">21.0326020573</span><span class="p">,</span><span class="mf">21.0339083933</span><span class="p">,</span><span class="mf">21.0352130249</span><span class="p">,</span><span class="mf">21.0365159567</span><span class="p">,</span><span class="mf">21.0378171930</span><span class="p">,</span><span class="mf">21.0391167384</span><span class="p">,</span><span class="mf">21.0404145971</span><span class="p">,</span><span class="mf">21.0417107735</span><span class="p">,</span><span class="mf">21.0430052721</span><span class="p">,</span><span class="mf">21.0442980971</span><span class="p">,</span><span class="mf">21.0455892529</span><span class="p">,</span><span class="mf">21.0468787437</span><span class="p">,</span><span class="mf">21.0481665739</span><span class="p">,</span><span class="mf">21.0494527477</span><span class="p">,</span><span class="mf">21.0507372694</span><span class="p">,</span><span class="mf">21.0520201432</span><span class="p">,</span><span class="mf">21.0533013733</span><span class="p">,</span><span class="mf">21.0545809641</span><span class="p">,</span><span class="mf">21.0558589195</span><span class="p">,</span><span class="mf">21.0571352439</span><span class="p">,</span><span class="mf">21.0584099413</span><span class="p">,</span><span class="mf">21.0596830159</span><span class="p">,</span><span class="mf">21.0609544719</span><span class="p">,</span><span class="mf">21.0622243134</span><span class="p">,</span><span class="mf">21.0634925443</span><span class="p">,</span><span class="mf">21.0647591690</span><span class="p">,</span><span class="mf">21.0660241913</span><span class="p">,</span><span class="mf">21.0672876153</span><span class="p">,</span><span class="mf">21.0685494451</span><span class="p">,</span><span class="mf">21.0698096847</span><span class="p">,</span><span class="mf">21.0710683382</span><span class="p">,</span><span class="mf">21.0723254093</span><span class="p">,</span><span class="mf">21.0735809023</span><span class="p">,</span><span class="mf">21.0748348209</span><span class="p">,</span><span class="mf">21.0760871693</span><span class="p">,</span><span class="mf">21.0773379512</span><span class="p">,</span><span class="mf">21.0785871706</span><span class="p">,</span><span class="mf">21.0798348314</span><span class="p">,</span><span class="mf">21.0810809374</span><span class="p">,</span><span class="mf">21.0823254927</span><span class="p">,</span><span class="mf">21.0835685009</span><span class="p">,</span><span class="mf">21.0848099660</span><span class="p">,</span><span class="mf">21.0860498918</span><span class="p">,</span><span class="mf">21.0872882820</span><span class="p">,</span><span class="mf">21.0885251405</span><span class="p">,</span><span class="mf">21.0897604711</span><span class="p">,</span><span class="mf">21.0909942776</span><span class="p">,</span><span class="mf">21.0922265636</span><span class="p">,</span><span class="mf">21.0934573330</span><span class="p">,</span><span class="mf">21.0946865895</span><span class="p">,</span><span class="mf">21.0959143367</span><span class="p">,</span><span class="mf">21.0971405784</span><span class="p">,</span><span class="mf">21.0983653183</span><span class="p">,</span><span class="mf">21.0995885601</span><span class="p">,</span><span class="mf">21.1008103073</span><span class="p">,</span><span class="mf">21.1020305637</span><span class="p">,</span><span class="mf">21.1032493329</span><span class="p">,</span><span class="mf">21.1044666185</span><span class="p">,</span><span class="mf">21.1056824242</span><span class="p">,</span><span class="mf">21.1068967534</span><span class="p">,</span><span class="mf">21.1081096098</span><span class="p">,</span><span class="mf">21.1093209970</span><span class="p">,</span><span class="mf">21.1105309185</span><span class="p">,</span><span class="mf">21.1117393779</span><span class="p">,</span><span class="mf">21.1129463786</span><span class="p">,</span><span class="mf">21.1141519243</span><span class="p">,</span><span class="mf">21.1153560183</span><span class="p">,</span><span class="mf">21.1165586643</span><span class="p">,</span><span class="mf">21.1177598656</span><span class="p">,</span><span class="mf">21.1189596258</span><span class="p">,</span><span class="mf">21.1201579483</span><span class="p">,</span><span class="mf">21.1213548365</span><span class="p">,</span><span class="mf">21.1225502940</span><span class="p">,</span><span class="mf">21.1237443239</span><span class="p">,</span><span class="mf">21.1249369299</span><span class="p">,</span><span class="mf">21.1261281153</span><span class="p">,</span><span class="mf">21.1273178834</span><span class="p">,</span><span class="mf">21.1285062377</span><span class="p">,</span><span class="mf">21.1296931815</span><span class="p">,</span><span class="mf">21.1308787181</span><span class="p">,</span><span class="mf">21.1320628508</span><span class="p">,</span><span class="mf">21.1332455831</span><span class="p">,</span><span class="mf">21.1344269181</span><span class="p">,</span><span class="mf">21.1356068592</span><span class="p">,</span><span class="mf">21.1367854098</span><span class="p">,</span><span class="mf">21.1379625729</span><span class="p">,</span><span class="mf">21.1391383520</span><span class="p">,</span><span class="mf">21.1403127503</span><span class="p">,</span><span class="mf">21.1414857709</span><span class="p">,</span><span class="mf">21.1426574172</span><span class="p">,</span><span class="mf">21.1438276924</span><span class="p">,</span><span class="mf">21.1449965996</span><span class="p">,</span><span class="mf">21.1461641420</span><span class="p">,</span><span class="mf">21.1473303229</span><span class="p">,</span><span class="mf">21.1484951454</span><span class="p">,</span><span class="mf">21.1496586127</span><span class="p">,</span><span class="mf">21.1508207279</span><span class="p">,</span><span class="mf">21.1519814941</span><span class="p">,</span><span class="mf">21.1531409145</span><span class="p">,</span><span class="mf">21.1542989922</span><span class="p">,</span><span class="mf">21.1554557304</span><span class="p">,</span><span class="mf">21.1566111320</span><span class="p">,</span><span class="mf">21.1577652002</span><span class="p">,</span><span class="mf">21.1589179381</span><span class="p">,</span><span class="mf">21.1600693487</span><span class="p">,</span><span class="mf">21.1612194351</span><span class="p">,</span><span class="mf">21.1623682003</span><span class="p">,</span><span class="mf">21.1635156473</span><span class="p">,</span><span class="mf">21.1646617793</span><span class="p">,</span><span class="mf">21.1658065991</span><span class="p">,</span><span class="mf">21.1669501098</span><span class="p">,</span><span class="mf">21.1680923144</span><span class="p">,</span><span class="mf">21.1692332158</span><span class="p">,</span><span class="mf">21.1703728171</span><span class="p">,</span><span class="mf">21.1715111211</span><span class="p">,</span><span class="mf">21.1726481309</span><span class="p">,</span><span class="mf">21.1737838494</span><span class="p">,</span><span class="mf">21.1749182794</span><span class="p">,</span><span class="mf">21.1760514240</span><span class="p">,</span><span class="mf">21.1771832861</span><span class="p">,</span><span class="mf">21.1783138684</span><span class="p">,</span><span class="mf">21.1794431740</span><span class="p">,</span><span class="mf">21.1805712057</span><span class="p">,</span><span class="mf">21.1816979664</span><span class="p">,</span><span class="mf">21.1828234589</span><span class="p">,</span><span class="mf">21.1839476862</span><span class="p">,</span><span class="mf">21.1850706509</span><span class="p">,</span><span class="mf">21.1861923560</span><span class="p">,</span><span class="mf">21.1873128043</span><span class="p">,</span><span class="mf">21.1884319986</span><span class="p">,</span><span class="mf">21.1895499417</span><span class="p">,</span><span class="mf">21.1906666364</span><span class="p">,</span><span class="mf">21.1917820855</span><span class="p">,</span><span class="mf">21.1928962917</span><span class="p">,</span><span class="mf">21.1940092579</span><span class="p">,</span><span class="mf">21.1951209867</span><span class="p">,</span><span class="mf">21.1962314810</span><span class="p">,</span><span class="mf">21.1973407435</span><span class="p">,</span><span class="mf">21.1984487768</span><span class="p">,</span><span class="mf">21.1995555838</span><span class="p">,</span><span class="mf">21.2006611671</span><span class="p">,</span><span class="mf">21.2017655295</span><span class="p">,</span><span class="mf">21.2028686735</span><span class="p">,</span><span class="mf">21.2039706020</span><span class="p">,</span><span class="mf">21.2050713176</span><span class="p">,</span><span class="mf">21.2061708229</span><span class="p">,</span><span class="mf">21.2072691207</span><span class="p">,</span><span class="mf">21.2083662135</span><span class="p">,</span><span class="mf">21.2094621040</span><span class="p">,</span><span class="mf">21.2105567949</span><span class="p">,</span><span class="mf">21.2116502887</span><span class="p">,</span><span class="mf">21.2127425881</span><span class="p">,</span><span class="mf">21.2138336957</span><span class="p">,</span><span class="mf">21.2149236140</span><span class="p">,</span><span class="mf">21.2160123458</span><span class="p">,</span><span class="mf">21.2170998935</span><span class="p">,</span><span class="mf">21.2181862597</span><span class="p">,</span><span class="mf">21.2192714470</span><span class="p">,</span><span class="mf">21.2203554579</span><span class="p">,</span><span class="mf">21.2214382951</span><span class="p">,</span><span class="mf">21.2225199609</span><span class="p">,</span><span class="mf">21.2236004581</span><span class="p">,</span><span class="mf">21.2246797890</span><span class="p">,</span><span class="mf">21.2257579562</span><span class="p">,</span><span class="mf">21.2268349622</span><span class="p">,</span><span class="mf">21.2279108096</span><span class="p">,</span><span class="mf">21.2289855007</span><span class="p">,</span><span class="mf">21.2300590381</span><span class="p">,</span><span class="mf">21.2311314242</span><span class="p">,</span><span class="mf">21.2322026616</span><span class="p">,</span><span class="mf">21.2332727527</span><span class="p">,</span><span class="mf">21.2343416999</span><span class="p">,</span><span class="mf">21.2354095056</span><span class="p">,</span><span class="mf">21.2364761724</span><span class="p">,</span><span class="mf">21.2375417026</span><span class="p">,</span><span class="mf">21.2386060987</span><span class="p">,</span><span class="mf">21.2396693630</span><span class="p">,</span><span class="mf">21.2407314980</span><span class="p">,</span><span class="mf">21.2417925060</span><span class="p">,</span><span class="mf">21.2428523895</span><span class="p">,</span><span class="mf">21.2439111509</span><span class="p">,</span><span class="mf">21.2449687924</span><span class="p">,</span><span class="mf">21.2460253166</span><span class="p">,</span><span class="mf">21.2470807257</span><span class="p">,</span><span class="mf">21.2481350220</span><span class="p">,</span><span class="mf">21.2491882080</span><span class="p">,</span><span class="mf">21.2502402859</span><span class="p">,</span><span class="mf">21.2512912582</span><span class="p">,</span><span class="mf">21.2523411270</span><span class="p">,</span><span class="mf">21.2533898948</span><span class="p">,</span><span class="mf">21.2544375639</span><span class="p">,</span><span class="mf">21.2554841364</span><span class="p">,</span><span class="mf">21.2565296148</span><span class="p">,</span><span class="mf">21.2575740014</span><span class="p">,</span><span class="mf">21.2586172983</span><span class="p">,</span><span class="mf">21.2596595078</span><span class="p">,</span><span class="mf">21.2607006324</span><span class="p">,</span><span class="mf">21.2617406741</span><span class="p">,</span><span class="mf">21.2627796352</span><span class="p">,</span><span class="mf">21.2638175180</span><span class="p">,</span><span class="mf">21.2648543247</span><span class="p">,</span><span class="mf">21.2658900576</span><span class="p">,</span><span class="mf">21.2669247188</span><span class="p">,</span><span class="mf">21.2679583107</span><span class="p">,</span><span class="mf">21.2689908353</span><span class="p">,</span><span class="mf">21.2700222949</span><span class="p">,</span><span class="mf">21.2710526917</span><span class="p">,</span><span class="mf">21.2720820278</span><span class="p">,</span><span class="mf">21.2731103056</span><span class="p">,</span><span class="mf">21.2741375270</span><span class="p">,</span><span class="mf">21.2751636944</span><span class="p">,</span><span class="mf">21.2761888098</span><span class="p">,</span><span class="mf">21.2772128754</span><span class="p">,</span><span class="mf">21.2782358934</span><span class="p">,</span><span class="mf">21.2792578659</span><span class="p">,</span><span class="mf">21.2802787950</span><span class="p">,</span><span class="mf">21.2812986829</span><span class="p">,</span><span class="mf">21.2823175317</span><span class="p">,</span><span class="mf">21.2833353435</span><span class="p">,</span><span class="mf">21.2843521204</span><span class="p">,</span><span class="mf">21.2853678645</span><span class="p">,</span><span class="mf">21.2863825780</span><span class="p">,</span><span class="mf">21.2873962628</span><span class="p">,</span><span class="mf">21.2884089211</span><span class="p">,</span><span class="mf">21.2894205550</span><span class="p">,</span><span class="mf">21.2904311665</span><span class="p">,</span><span class="mf">21.2914407577</span><span class="p">,</span><span class="mf">21.2924493307</span><span class="p">,</span><span class="mf">21.2934568874</span><span class="p">,</span><span class="mf">21.2944634300</span><span class="p">,</span><span class="mf">21.2954689605</span><span class="p">,</span><span class="mf">21.2964734810</span><span class="p">,</span><span class="mf">21.2974769933</span><span class="p">,</span><span class="mf">21.2984794997</span><span class="p">,</span><span class="mf">21.2994810020</span><span class="p">,</span><span class="mf">21.3004815023</span><span class="p">};</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">)</span><span class="o">!=</span><span class="n">EOF</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="mi">1000000</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">mod</span> <span class="o">=</span> <span class="n">n</span><span class="o">%</span><span class="mi">1000000</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">double</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">cnt</span><span class="p">];</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">cnt</span><span class="o">*</span><span class="mi">1000000</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">ans</span> <span class="o">+=</span> <span class="mf">1.0</span><span class="o">/</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%.4f</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">ans</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>数学方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">double</span> <span class="n">r</span> <span class="o">=</span> <span class="mf">0.57721566490153286060651209</span><span class="p">;</span>
</span><span class='line'><span class="kt">double</span> <span class="n">rec</span><span class="p">[</span><span class="mi">1000000</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">1000000</span> <span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">rec</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">rec</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mf">1.0</span><span class="o">/</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">~</span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">n</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1000000</span><span class="p">)</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%.4f</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">rec</span><span class="p">[</span><span class="n">n</span><span class="p">]);</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%.4f</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">log</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://whn757397540.github.io/blog/archives/">&lt;&ndash;Back</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[POJ1912 a Highway and the Seven Dwarfs]]></title>
    <link href="http://whn757397540.github.io/blog/2015/08/10/poj1912-a-highway-and-the-seven-dwarfs/"/>
    <updated>2015-08-10T16:56:06+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/08/10/poj1912-a-highway-and-the-seven-dwarfs</id>
    <content type="html"><![CDATA[<p>又被卡了一整天，实在是弱爆了！计算几何的问题，虽然过了，不过感觉还是有点问题，不管了，先写题解，之后想到再改！</p>

<!--more-->


<p><a href="http://poj.org/problem?id=1912">题目链接</a></p>

<p>题意：给你n个点，然后输入直线（用2个点来表示），对于输入的每一条直线，判断所有点是否在直线的一侧。是就输出GOOD，否则输出BAD；</p>

<p>首先，先求一个凸包，然后求凸包上的点是不是都在直线的一侧！（这个自己去证明一下就好！）</p>

<p>然后，我刚开始是直接暴力判断直线是不是穿过其中某一个边的！最次的情况是O(询问数*n)的复杂度，T掉了！然后我就想，怎么样优化下。就想到了二分法！但是二分需要有一个有序的序列，什么是有序的呢？角度，沿一个方向的边的极角是有序的！</p>

<p>之后，我们假设一种特殊情况，假如所询问的直线是跟x轴平行的，那么我们只需要找凸包的最高点和最低点，判断这两点是不是在直线的两侧就行了（我的判断方法是求有向距离，看是否是异号就行了！),而最高点和最低点也很好找，找第一个极角大于0(因为x轴正方向的极角就是0)的点就是最低点，反过来，找第一个大于PI的点就是最高点。那么我们把这个方法一般化，其他的直线不就相当于把凸包旋转了一下吗？所以，就能类比到一般的了。不过这样还存在一个问题，就是如何找大于PI的点？（其实，对于极角为a的直线，应该是如何找大于a+PI的点）。最终AC的代码是参考网上的，把极角的范围调整成了(-PI/2,3*PI/2),而实际上，这种方法也是不对的！只不过数据没有卡掉这个范围而已！至于正确的该如何去找，目前逻辑还没有理清楚，等理清楚了再改下吧，这里先把思路写出来。（PS：这题不卡精度）</p>

<p>最后，注意n&lt;=1的情况。</p>

<p>下面是AC的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#define next (i+1)%m</span>
</span><span class='line'><span class="k">const</span> <span class="kt">double</span> <span class="n">eps</span> <span class="o">=</span> <span class="mf">1e-8</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">double</span> <span class="n">PI</span> <span class="o">=</span> <span class="n">acos</span><span class="p">(</span><span class="o">-</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">dcmp</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">)</span><span class="c1">//精度比较</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="o">-</span><span class="n">eps</span><span class="p">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">eps</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">double</span> <span class="nf">add</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">b</span><span class="p">)</span><span class="c1">//考虑到精度的加法</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">eps</span> <span class="o">*</span> <span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">+</span> <span class="n">abs</span><span class="p">(</span><span class="n">b</span><span class="p">)))</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Point</span><span class="c1">//也可看做向量</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Point</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">Point</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">,</span><span class="kt">double</span> <span class="n">y</span><span class="p">)</span> <span class="o">:</span> <span class="n">x</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="n">y</span><span class="p">(</span><span class="n">y</span><span class="p">){}</span>
</span><span class='line'>    <span class="n">Point</span> <span class="k">operator</span> <span class="o">+</span> <span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">),</span><span class="n">add</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">));</span> <span class="p">}</span><span class="c1">//向量 + 向量 = 向量</span>
</span><span class='line'>    <span class="n">Point</span> <span class="k">operator</span> <span class="o">-</span> <span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">),</span><span class="n">add</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="o">-</span><span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">));</span> <span class="p">}</span> <span class="c1">// 向量 - 向量 = 向量</span>
</span><span class='line'>    <span class="n">Point</span> <span class="k">operator</span> <span class="o">*</span> <span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="n">y</span> <span class="o">*</span> <span class="n">a</span><span class="p">);</span> <span class="p">}</span><span class="c1">// 向量 * 数 = 向量</span>
</span><span class='line'>    <span class="n">Point</span> <span class="k">operator</span> <span class="o">/</span> <span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span> <span class="o">/</span> <span class="n">a</span><span class="p">,</span> <span class="n">y</span> <span class="o">/</span> <span class="n">a</span><span class="p">);</span> <span class="p">}</span><span class="c1">//向量 / 数 = 向量</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="k">operator</span> <span class="o">&lt;</span> <span class="p">(</span><span class="k">const</span> <span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">;</span> <span class="p">}</span> <span class="c1">//字典序比较，重定义&lt;</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="k">operator</span> <span class="o">==</span> <span class="p">(</span><span class="k">const</span> <span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span> <span class="p">}</span><span class="c1">//重定义 ==</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">dot</span><span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">add</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">);</span> <span class="p">}</span><span class="c1">//点积</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">det</span><span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">add</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="o">-</span><span class="n">y</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">);</span> <span class="p">}</span><span class="c1">//叉积,旋转方向取逆时针</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">length</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">*</span><span class="n">y</span><span class="p">);</span> <span class="p">}</span><span class="c1">//向量长度</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">Angle</span><span class="p">(){</span><span class="kt">double</span> <span class="n">A</span> <span class="o">=</span> <span class="n">atan2</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="p">);</span> <span class="k">if</span> <span class="p">(</span><span class="n">A</span> <span class="o">&lt;</span> <span class="o">-</span><span class="n">PI</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="n">A</span><span class="o">+=</span><span class="mi">2</span><span class="o">*</span><span class="n">PI</span><span class="p">;</span> <span class="k">return</span> <span class="n">A</span><span class="p">;</span> <span class="p">}</span><span class="c1">//极角</span>
</span><span class='line'>    <span class="n">Point</span> <span class="n">Rotate</span><span class="p">(</span><span class="kt">double</span> <span class="n">rad</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">rad</span><span class="p">),</span><span class="o">-</span> <span class="n">y</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">rad</span><span class="p">)),</span> <span class="n">add</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">rad</span><span class="p">),</span> <span class="n">y</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">rad</span><span class="p">)));</span> <span class="p">}</span><span class="c1">//逆时针旋转rad</span>
</span><span class='line'>    <span class="n">Point</span> <span class="n">Normal</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="o">-</span><span class="n">y</span> <span class="o">/</span> <span class="n">length</span><span class="p">(),</span> <span class="n">x</span> <span class="o">/</span> <span class="n">length</span><span class="p">());</span> <span class="p">}</span><span class="c1">//求单位法向量</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="n">Point</span> <span class="n">Vector</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">ConvexHull</span><span class="p">(</span><span class="n">Point</span><span class="o">*</span> <span class="n">p</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">Point</span><span class="o">*</span> <span class="n">ch</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">sort</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">p</span><span class="o">+</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">m</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">2</span><span class="p">]).</span><span class="n">det</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">m</span> <span class="o">--</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">m</span> <span class="o">&gt;</span> <span class="n">k</span> <span class="o">&amp;&amp;</span><span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">2</span><span class="p">]).</span><span class="n">det</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">m</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="n">m</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">double</span> <span class="nf">DistanceToLine</span><span class="p">(</span><span class="n">Point</span> <span class="n">P</span><span class="p">,</span> <span class="n">Point</span> <span class="n">A</span><span class="p">,</span> <span class="n">Point</span> <span class="n">B</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Vector</span> <span class="n">v1</span> <span class="o">=</span> <span class="n">B</span> <span class="o">-</span> <span class="n">A</span><span class="p">,</span> <span class="n">v2</span> <span class="o">=</span> <span class="n">P</span> <span class="o">-</span> <span class="n">A</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">v1</span><span class="p">.</span><span class="n">det</span><span class="p">(</span><span class="n">v2</span><span class="p">)</span><span class="o">/</span><span class="n">v1</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">Point</span> <span class="n">a</span><span class="p">[</span><span class="mi">100005</span><span class="p">],</span><span class="n">Hull</span><span class="p">[</span><span class="mi">200000</span><span class="p">];</span>
</span><span class='line'><span class="kt">double</span> <span class="n">Ang</span><span class="p">[</span><span class="mi">100005</span><span class="p">];</span>
</span><span class='line'><span class="kt">bool</span> <span class="nf">cmp</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//if (a - b &gt; PI) b += 2*PI;</span>
</span><span class='line'>   <span class="c1">// else if (b - a &gt; PI) a += 2*PI;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">// freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%lf%lf&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">ConvexHull</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">Hull</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Ang</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">Hull</span><span class="p">[</span><span class="n">next</span><span class="p">]</span> <span class="o">-</span> <span class="n">Hull</span><span class="p">[</span><span class="n">i</span><span class="p">]).</span><span class="n">Angle</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Point</span> <span class="n">p1</span><span class="p">,</span><span class="n">p2</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%lf%lf%lf%lf&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">p1</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">p1</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">p2</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">p2</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">!=</span> <span class="n">EOF</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">bool</span> <span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">aa</span> <span class="o">=</span> <span class="n">upper_bound</span><span class="p">(</span><span class="n">Ang</span><span class="p">,</span> <span class="n">Ang</span><span class="o">+</span><span class="n">m</span><span class="p">,</span> <span class="p">(</span><span class="n">p2</span><span class="o">-</span><span class="n">p1</span><span class="p">).</span><span class="n">Angle</span><span class="p">(),</span> <span class="n">cmp</span><span class="p">)</span> <span class="o">-</span> <span class="n">Ang</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">bb</span> <span class="o">=</span> <span class="n">upper_bound</span><span class="p">(</span><span class="n">Ang</span><span class="p">,</span> <span class="n">Ang</span><span class="o">+</span><span class="n">m</span><span class="p">,</span> <span class="p">(</span><span class="n">p1</span><span class="o">-</span><span class="n">p2</span><span class="p">).</span><span class="n">Angle</span><span class="p">(),</span> <span class="n">cmp</span><span class="p">)</span> <span class="o">-</span> <span class="n">Ang</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">double</span> <span class="n">d1</span> <span class="o">=</span> <span class="n">DistanceToLine</span><span class="p">(</span><span class="n">Hull</span><span class="p">[</span><span class="n">aa</span><span class="p">],</span> <span class="n">p1</span><span class="p">,</span> <span class="n">p2</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">double</span> <span class="n">d2</span> <span class="o">=</span> <span class="n">DistanceToLine</span><span class="p">(</span><span class="n">Hull</span><span class="p">[</span><span class="n">bb</span><span class="p">],</span> <span class="n">p1</span><span class="p">,</span> <span class="n">p2</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">d1</span><span class="o">*</span><span class="n">d2</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">flag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">flag</span><span class="p">)</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;GOOD</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">else</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;BAD</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://whn757397540.github.io/blog/archives/">&lt;&ndash;Back</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[POJ1133]]></title>
    <link href="http://whn757397540.github.io/blog/2015/08/10/poj1133/"/>
    <updated>2015-08-10T16:55:42+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/08/10/poj1133</id>
    <content type="html"><![CDATA[<p>这次被%lf卡了，学乖了，查了一下！</p>

<p>先说查到的东西。</p>

<!--more-->


<blockquote><blockquote><p>printf的%f说明符的确既可以输出float型又可以输出double型。根据“默认参数提升”规则（在printf这样的函数的可变参数列表中，不论作用域内有没有原型，都适用这一规则）float型会被提升为double型。因此printf()只会看到双精度数。（严格地讲，%lf在printf下是未定义的，但是很多系统可能会接受它。要确保可移植性，就要坚持使用%f。）</p></blockquote></blockquote>

<p>对于scanf，情况就完全不同了，它接受指针，这里没有类似的类型提升。（通过指针）向float存储和向double存储大不一样，因此，scanf区别%f和%lf。（以上摘自poj1113讨论区）</p>

<p>总的来说，就是输入的时候，float用%f,double用%lf，输出都用%f；</p>

<p>至于这道题，就是一道很简单的凸包问题，求一个凸包，然后求凸包周长，加上一个半径为L的圆的周长！至于证明，简单说一下，题目其实就是要求转角为弧线，而这个弧线的圆心角应该是凸包的外角，而凸包的外角就是凸多边形的外角，多边形外角和为360度，所以必定要增加的是一个圆的周长。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#define next (i+1)%m</span>
</span><span class='line'><span class="k">const</span> <span class="kt">double</span> <span class="n">eps</span> <span class="o">=</span> <span class="mf">1e-8</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">dcmp</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">fabs</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">eps</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">double</span> <span class="nf">add</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">fabs</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">eps</span> <span class="o">*</span> <span class="p">(</span><span class="n">fabs</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">+</span> <span class="n">fabs</span><span class="p">(</span><span class="n">b</span><span class="p">)))</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Point</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Point</span><span class="p">(){}</span>
</span><span class='line'>    <span class="n">Point</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="kt">double</span> <span class="n">y</span><span class="p">)</span> <span class="o">:</span> <span class="n">x</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="n">y</span><span class="p">(</span><span class="n">y</span><span class="p">){}</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="k">operator</span> <span class="o">&lt;</span> <span class="p">(</span><span class="k">const</span> <span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="k">const</span><span class="p">{</span><span class="k">return</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">y</span><span class="o">-</span><span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">;}</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="k">operator</span> <span class="o">==</span> <span class="p">(</span><span class="k">const</span> <span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="k">const</span><span class="p">{</span><span class="k">return</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">y</span><span class="o">-</span><span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;}</span>
</span><span class='line'>    <span class="n">Point</span> <span class="k">operator</span> <span class="o">+</span> <span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">),</span> <span class="n">add</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">));}</span>
</span><span class='line'>    <span class="n">Point</span> <span class="k">operator</span> <span class="o">-</span> <span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">),</span> <span class="n">add</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="o">-</span><span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">));}</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">dot</span><span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">add</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">*</span><span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">);}</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">det</span><span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">add</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="o">-</span><span class="n">y</span><span class="o">*</span><span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">);}</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">length</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">*</span><span class="n">y</span><span class="p">));}</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">Angle</span><span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">acos</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">*</span><span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">)</span><span class="o">/</span><span class="n">length</span><span class="p">()</span><span class="o">/</span><span class="n">p</span><span class="p">.</span><span class="n">length</span><span class="p">());}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">ConverHull</span><span class="p">(</span><span class="n">Point</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">Point</span> <span class="o">*</span><span class="n">res</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">sort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">a</span><span class="o">+</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">m</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">res</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">2</span><span class="p">]).</span><span class="n">det</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">res</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">m</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>        <span class="n">res</span><span class="p">[</span><span class="n">m</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">--</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">k</span> <span class="o">&gt;</span> <span class="n">m</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">res</span><span class="p">[</span><span class="n">k</span><span class="o">-</span><span class="mi">2</span><span class="p">]).</span><span class="n">det</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">res</span><span class="p">[</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">k</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>        <span class="n">res</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="n">k</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Point</span> <span class="n">a</span><span class="p">[</span><span class="mi">1005</span><span class="p">],</span><span class="n">Hull</span><span class="p">[</span><span class="mi">2000</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">n</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">r</span><span class="p">);</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">double</span> <span class="n">PI</span> <span class="o">=</span> <span class="n">acos</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">double</span> <span class="n">L</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">acos</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%lf%lf&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">ConverHull</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">Hull</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Point</span> <span class="n">now</span> <span class="o">=</span> <span class="n">Hull</span><span class="p">[</span><span class="n">next</span><span class="p">]</span> <span class="o">-</span> <span class="n">Hull</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="n">ans</span> <span class="o">+=</span> <span class="n">now</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">ans</span> <span class="o">+=</span> <span class="n">L</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%.0f</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">ans</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://whn757397540.github.io/blog/archives/">&lt;&ndash;Back</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[POJ1047 Round and Round We Go]]></title>
    <link href="http://whn757397540.github.io/blog/2015/08/10/poj1047-round-and-round-we-go/"/>
    <updated>2015-08-10T16:54:14+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/08/10/poj1047-round-and-round-we-go</id>
    <content type="html"><![CDATA[<p>本来说做到高精度题目放松下，结果竟然被卡了一个小时，好在学到了一点东西。</p>

<!--more-->


<p>其实也没有什么可以写的东西，用到了一点以前不知道的东西，就是，给BigInteger赋值可以这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;12345&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">BigInteger</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BigInteger</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样执行的结果是吧12345赋值给a;</p>

<p>不过在网上还看到有人说可以酱紫来赋值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;12345&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">BigInteger</span> <span class="n">a</span> <span class="o">=</span> <span class="n">BigInteger</span><span class="p">.</span><span class="n">valueOf</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>可是我试了试不行，不知道是不是他说错了。。。</p>

<p>还有就是字符串比较是否相等的时候，貌似不能直接用==，而应该用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">s</span><span class="p">.</span><span class="n">equals</span><span class="p">(</span><span class="n">s1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>反正我用“==”错了！</p>

<p>别的没有什么了，这题的思路也很简单，就是在读入的字符串末尾再加一个相同的字符串形成一个新的字符串，然后判断他的对应的倍数是不是那个新串的子串就可以了！至于判断方法，由于串比较短，所以直接暴力判断就好了。</p>

<p>我的代码！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">import</span> <span class="n">java</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="o">*</span><span class="p">;</span>
</span><span class='line'><span class="n">import</span> <span class="n">java</span><span class="p">.</span><span class="n">math</span><span class="p">.</span><span class="o">*</span><span class="p">;</span>
</span><span class='line'><span class="n">import</span> <span class="n">java</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="o">*</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Main</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="p">(</span><span class="n">String</span><span class="p">[]</span> <span class="n">args</span><span class="p">){</span>
</span><span class='line'>        <span class="n">Scanner</span> <span class="n">cin</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="p">(</span><span class="k">new</span> <span class="n">BufferedInputStream</span><span class="p">(</span><span class="n">System</span><span class="p">.</span><span class="n">in</span><span class="p">));</span>
</span><span class='line'>        <span class="n">BigInteger</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="n">cin</span><span class="p">.</span><span class="n">hasNext</span><span class="p">())</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="n">s</span> <span class="o">=</span> <span class="n">cin</span><span class="p">.</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="n">s</span> <span class="o">+</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>          <span class="n">n</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">n2</span> <span class="o">=</span> <span class="n">s2</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'>          <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BigInteger</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>          <span class="n">BigInteger</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>          <span class="n">boolean</span> <span class="n">judge</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>              <span class="n">c</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>              <span class="n">String</span> <span class="n">ss</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">toString</span><span class="p">();</span>
</span><span class='line'>              <span class="n">judge</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>              <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">k</span> <span class="o">++</span><span class="p">)</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                  <span class="k">if</span> <span class="p">(</span><span class="n">ss</span><span class="p">.</span><span class="n">equals</span><span class="p">(</span><span class="n">s2</span><span class="p">.</span><span class="n">substring</span><span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">k</span> <span class="o">+</span> <span class="n">ss</span><span class="p">.</span><span class="n">length</span><span class="p">())))</span>
</span><span class='line'>                  <span class="p">{</span>
</span><span class='line'>                      <span class="n">judge</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>                      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">judge</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">judge</span><span class="p">)</span>
</span><span class='line'>              <span class="n">System</span><span class="p">.</span><span class="n">out</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">s</span><span class="o">+</span><span class="s">&quot; is cyclic&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>              <span class="n">System</span><span class="p">.</span><span class="n">out</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">s</span><span class="o">+</span><span class="s">&quot; is not cyclic&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://whn757397540.github.io/blog/archives/">&lt;&ndash;Back</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HDU 4977 a Simple Problem From ZOJ.]]></title>
    <link href="http://whn757397540.github.io/blog/2015/08/10/hdu-4977-a-simple-problem-from-zoj/"/>
    <updated>2015-08-10T16:53:56+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/08/10/hdu-4977-a-simple-problem-from-zoj</id>
    <content type="html"><![CDATA[<p>2014多校联合训练十——1007</p>

<!--more-->


<p>这道题，如果只说搞这道题的时间的话，大概一整天吧，最后在题解的帮助下过了！</p>

<p>思路，先求一个凸包，因为直接如果有包含不了的点，肯定是在凸包上，（因为凸包内的点如果不能包含，凸包上绝对有不能包含的点；凸包上的点被全部被包含，凸包内的点也肯定会被包含。我用的是Andrew算法来求凸包的，需要注意的一点是（被这点坑了好久），由于酱紫求凸包的时候，可能扫描到已经放入凸包的点，所以数组的下标可能超过点的个数，也就是说如果你的数组开小了的话，可能会越界。解决方法很简单，把数组开到原来的二倍，或者，把点放进凸包的时候判断下之前是否放了进去，第一种节省代码量，第二种节省空间</p>

<p>求出凸包上的点之后，就根据凸包上相邻的两个点与六角星的限制关系来求出对应的旋转区间就行，当然，需要选取一个初始方向，我是设六角星的一个角与x轴平行时的极角为0的！如果其中一个点到中心的比六角星的一个角到中心的距离还要远的话，就必定不能覆盖了！如果在此之内，有以下几种情况。</p>

<p>1.两点均不在六角星内圆外</p>

<p><img src="http://whn757397540.github.io/pictures/hdu4977/allinside.png" alt="" /></p>

<p>（PS：上图如果点在边上也是可以的，只要不在圆外就好） 在这种情况下，所有的区间是都符合的，所以他对求交的结果没有影响的！不用去管他了就！</p>

<p>2.两点均在六角星内圆外</p>

<p>而在这种情况下，又有以下几种情况：</p>

<p>(1) 线段与圆没有交点</p>

<p><img src="http://whn757397540.github.io/pictures/hdu4977/alloutside.png" alt="" /></p>

<p>在这种情况下，求出对应于这个线段的旋转区间就好</p>

<p>(2) 线段与圆有一个交点</p>

<p><img src="http://whn757397540.github.io/pictures/hdu4977/tangency1.png" alt="" /></p>

<p>这种情况下，必然是想切线段交点为sol[0] = sol[1]，只需要求出对应的两段线段的旋转区间就好</p>

<p>(3) 线段与圆有两个交点</p>

<p><img src="http://whn757397540.github.io/pictures/hdu4977/intersection.png" alt="" /></p>

<p>这种情况下，求对应两段在外面的线段的旋转区间就好！</p>

<p>3.其中一点不在圆外，另一点在圆外</p>

<p><img src="http://whn757397540.github.io/pictures/hdu4977/InsideOutside.png" alt="" />
<img src="http://whn757397540.github.io/pictures/hdu4977/tangency2.png" alt="" /></p>

<p>这种情况只要求出跟圆的一个交点就行了，然后求对应在外面的线段的旋转区间！</p>

<p>通过上面的处理，我们就能把这个问题转化成求对应一个线段的旋转区间，最后看对应的区间的交集是否为空的问题！</p>

<p>简单说下怎么求对应一个线段的旋转区间，首先假设某个点P跟中心的距离为l，如果这个点在六角星的边上，可以求出一个对应的中心角，这个用正弦定理或者余弦定理都能求出来。那么角度的旋转范围就是向量OP的极角加减对应的求出来的中心角（想想，为什么？）。有关求极角有点需要强调对向量（x,y）求极角，用atan2(y,x)返回的值是（-PI,PI)的，开区间闭区间不重要，浮点数本身就是不精确的，所以需要注意范围</p>

<p>接下里是从标程中学到的求不同区间的对应的交集的方法！</p>

<p>具体请结合后来给的代码来体味下，我可能说不很清楚，需要自己来理解！</p>

<p>有一个cnt，来记录总共有多少组区间被放到了ans中去（注意，是“组”，不是“个”），ans是一个pair&lt;double,int>类的数组，其中double记录角度，int记录这个角度是记录的每个区间的l还是r，让代表l的int小于代表r的int就好，然后按照字典序来排序！而标程中选取的计算区间为-PI到PI，所以如果有一个超过了PI，他会减去2*PI，但是，这样可能出现r超过了PI，但是l却没有超过PI，这样就会出现l>r的情况，cnt要减1,为什么要减一呢？这得从他是如何来利用这个cnt来说起！cnt记录的是符合条件的组数，所以只要碰到不少于cnt个不被封闭的l（不被封闭就是没有碰到自己对应的r）就好（当然，是按照字典序排序了之后的），自己捣一下逻辑想想为什么吧！而之前如果出现一个r会让计数少1,所以cnt要减1,不知道有没有解释清楚！这是我主要的参考标程的地方！</p>

<p>下面挂两个代码，一个是我自己参考标程的cnt做法后改的自己的代码,另一个是按照标程的方法改的自己的代码，其实就是求区间时的分类标准不一样而已！</p>

<p>代码1</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#define next (i+1)%n</span>
</span><span class='line'><span class="k">const</span> <span class="kt">double</span> <span class="n">eps</span> <span class="o">=</span> <span class="mf">1e-8</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">double</span> <span class="n">PI</span> <span class="o">=</span> <span class="n">acos</span><span class="p">(</span><span class="o">-</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'><span class="k">const</span> <span class="kt">double</span> <span class="n">sqrt3</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="mf">3.0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">dcmp</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">)</span><span class="c1">//精度比较</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="o">-</span><span class="n">eps</span><span class="p">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">eps</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">double</span> <span class="nf">add</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">b</span><span class="p">)</span><span class="c1">//考虑到精度的加法</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">eps</span> <span class="o">*</span> <span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">+</span> <span class="n">abs</span><span class="p">(</span><span class="n">b</span><span class="p">)))</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Point</span><span class="c1">//也可看做向量</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Point</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">Point</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">,</span><span class="kt">double</span> <span class="n">y</span><span class="p">)</span> <span class="o">:</span> <span class="n">x</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="n">y</span><span class="p">(</span><span class="n">y</span><span class="p">){}</span>
</span><span class='line'>    <span class="n">Point</span> <span class="k">operator</span> <span class="o">+</span> <span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">),</span><span class="n">add</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">));</span> <span class="p">}</span><span class="c1">//向量 + 向量 = 向量</span>
</span><span class='line'>    <span class="n">Point</span> <span class="k">operator</span> <span class="o">-</span> <span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">),</span><span class="n">add</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="o">-</span><span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">));</span> <span class="p">}</span> <span class="c1">// 向量 - 向量 = 向量</span>
</span><span class='line'>    <span class="n">Point</span> <span class="k">operator</span> <span class="o">*</span> <span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="n">y</span> <span class="o">*</span> <span class="n">a</span><span class="p">);</span> <span class="p">}</span><span class="c1">// 向量 * 数 = 向量</span>
</span><span class='line'>    <span class="n">Point</span> <span class="k">operator</span> <span class="o">/</span> <span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span> <span class="o">/</span> <span class="n">a</span><span class="p">,</span> <span class="n">y</span> <span class="o">/</span> <span class="n">a</span><span class="p">);</span> <span class="p">}</span><span class="c1">//向量 / 数 = 向量</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="k">operator</span> <span class="o">&lt;</span> <span class="p">(</span><span class="k">const</span> <span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">;</span> <span class="p">}</span> <span class="c1">//字典序比较，重定义&lt;</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="k">operator</span> <span class="o">==</span> <span class="p">(</span><span class="k">const</span> <span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span> <span class="p">}</span><span class="c1">//重定义 ==</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">dot</span><span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">add</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">);</span> <span class="p">}</span><span class="c1">//点积</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">det</span><span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">add</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="o">-</span><span class="n">y</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">);</span> <span class="p">}</span><span class="c1">//叉积,旋转方向取逆时针</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">length</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">*</span><span class="n">y</span><span class="p">);</span> <span class="p">}</span><span class="c1">//向量长度</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">Angle</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="n">atan2</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="p">);}</span><span class="c1">//两向量夹角</span>
</span><span class='line'>    <span class="n">Point</span> <span class="n">Rotate</span><span class="p">(</span><span class="kt">double</span> <span class="n">rad</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">rad</span><span class="p">),</span><span class="o">-</span> <span class="n">y</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">rad</span><span class="p">)),</span> <span class="n">add</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">rad</span><span class="p">),</span> <span class="n">y</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">rad</span><span class="p">)));</span> <span class="p">}</span><span class="c1">//逆时针旋转rad</span>
</span><span class='line'>    <span class="n">Point</span> <span class="n">Normal</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="o">-</span><span class="n">y</span> <span class="o">/</span> <span class="n">length</span><span class="p">(),</span> <span class="n">x</span> <span class="o">/</span> <span class="n">length</span><span class="p">());</span> <span class="p">}</span><span class="c1">//求单位法向量</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="n">Point</span> <span class="n">Vector</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">ConvexHull</span><span class="p">(</span><span class="n">Point</span><span class="o">*</span> <span class="n">p</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">Point</span><span class="o">*</span> <span class="n">ch</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">sort</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">p</span><span class="o">+</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">m</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">2</span><span class="p">]).</span><span class="n">det</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">m</span> <span class="o">--</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">m</span> <span class="o">&gt;</span> <span class="n">k</span> <span class="o">&amp;&amp;</span><span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">2</span><span class="p">]).</span><span class="n">det</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">m</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="n">m</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Circle</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Point</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Circle</span><span class="p">(){}</span>
</span><span class='line'>    <span class="n">Circle</span><span class="p">(</span><span class="n">Point</span> <span class="n">c</span><span class="p">,</span> <span class="kt">double</span> <span class="n">r</span><span class="p">)</span><span class="o">:</span> <span class="n">c</span><span class="p">(</span><span class="n">c</span><span class="p">),</span><span class="n">r</span><span class="p">(</span><span class="n">r</span><span class="p">){}</span>
</span><span class='line'>    <span class="n">Point</span> <span class="n">point</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">cos</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">*</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">sin</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">*</span><span class="n">r</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="n">C</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">getLineCircleIntersection</span><span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">,</span><span class="n">Vector</span> <span class="n">v</span><span class="p">,</span><span class="n">Circle</span> <span class="n">C</span><span class="p">,</span><span class="n">Point</span> <span class="n">sol</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">a</span><span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">C</span><span class="p">.</span><span class="n">c</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">d</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">C</span><span class="p">.</span><span class="n">c</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">e</span> <span class="o">=</span> <span class="n">a</span><span class="o">*</span><span class="n">a</span> <span class="o">+</span> <span class="n">c</span><span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="n">f</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="n">a</span><span class="o">*</span><span class="n">b</span> <span class="o">+</span> <span class="n">c</span><span class="o">*</span><span class="n">d</span><span class="p">),</span> <span class="n">g</span> <span class="o">=</span> <span class="n">b</span><span class="o">*</span><span class="n">b</span> <span class="o">+</span> <span class="n">d</span><span class="o">*</span><span class="n">d</span> <span class="o">-</span><span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="o">*</span><span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">delta</span> <span class="o">=</span> <span class="n">f</span><span class="o">*</span><span class="n">f</span> <span class="o">-</span> <span class="mi">4</span><span class="o">*</span><span class="n">e</span><span class="o">*</span><span class="n">g</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">delta</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">delta</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">t1</span> <span class="o">=</span> <span class="n">t2</span> <span class="o">=</span> <span class="o">-</span><span class="n">f</span> <span class="o">/</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">e</span><span class="p">);</span> <span class="n">sol</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="n">v</span><span class="o">*</span><span class="n">t1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">t1</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="n">f</span> <span class="o">-</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">delta</span><span class="p">))</span> <span class="o">/</span> <span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">e</span><span class="p">);</span> <span class="n">sol</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="n">v</span><span class="o">*</span><span class="n">t1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">t2</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="n">f</span> <span class="o">+</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">delta</span><span class="p">))</span> <span class="o">/</span> <span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">e</span><span class="p">);</span> <span class="n">sol</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="n">v</span><span class="o">*</span><span class="n">t2</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">double</span> <span class="nf">getAngle</span><span class="p">(</span><span class="kt">double</span> <span class="n">R</span><span class="p">,</span> <span class="kt">double</span> <span class="n">l</span><span class="p">)</span><span class="c1">//得到一点对应的角度</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">asin</span><span class="p">(</span><span class="n">R</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span> <span class="n">PI</span><span class="o">/</span><span class="mi">6</span> <span class="p">)</span> <span class="o">/</span> <span class="n">l</span><span class="p">)</span> <span class="o">-</span> <span class="n">PI</span><span class="o">/</span><span class="mi">6</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="n">cnt</span><span class="p">;</span>
</span><span class='line'><span class="n">vector</span> <span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">double</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">ans</span><span class="p">;</span>
</span><span class='line'><span class="kt">bool</span> <span class="nf">Section</span><span class="p">(</span><span class="n">Point</span> <span class="n">a</span><span class="p">,</span><span class="n">Point</span> <span class="n">b</span><span class="p">,</span><span class="kt">double</span> <span class="n">R</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">da</span> <span class="o">=</span> <span class="n">getAngle</span><span class="p">(</span><span class="n">R</span><span class="p">,</span> <span class="n">a</span><span class="p">.</span><span class="n">length</span><span class="p">()),</span> <span class="n">db</span> <span class="o">=</span> <span class="n">getAngle</span><span class="p">(</span><span class="n">R</span><span class="p">,</span> <span class="n">b</span><span class="p">.</span><span class="n">length</span><span class="p">());</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">aa</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">Angle</span><span class="p">(),</span> <span class="n">bb</span> <span class="o">=</span> <span class="n">b</span><span class="p">.</span><span class="n">Angle</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">aa</span><span class="o">-</span><span class="n">bb</span><span class="o">-</span><span class="n">PI</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">aa</span><span class="o">-=</span><span class="mi">2</span><span class="o">*</span><span class="n">PI</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">bb</span><span class="o">-</span><span class="n">aa</span><span class="o">-</span><span class="n">PI</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">bb</span><span class="o">-=</span><span class="mi">2</span><span class="o">*</span><span class="n">PI</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">l</span><span class="o">=</span><span class="n">max</span><span class="p">(</span><span class="n">aa</span><span class="o">-</span><span class="n">da</span><span class="p">,</span><span class="n">bb</span><span class="o">-</span><span class="n">db</span><span class="p">),</span> <span class="n">r</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">aa</span><span class="o">+</span><span class="n">da</span><span class="p">,</span><span class="n">bb</span><span class="o">+</span><span class="n">db</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">r</span><span class="o">&lt;</span><span class="n">l</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cnt</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">l</span><span class="o">+=</span><span class="n">PI</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span><span class="n">r</span><span class="o">+=</span><span class="n">PI</span><span class="o">/</span><span class="mi">3</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">l</span><span class="o">&gt;=</span><span class="n">PI</span><span class="p">)</span> <span class="n">l</span> <span class="o">-=</span> <span class="mi">2</span><span class="o">*</span><span class="n">PI</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">r</span><span class="o">&gt;=</span><span class="n">PI</span><span class="p">)</span> <span class="n">r</span> <span class="o">-=</span> <span class="mi">2</span><span class="o">*</span><span class="n">PI</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>        <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">r</span> <span class="o">&lt;</span> <span class="n">l</span><span class="p">)</span> <span class="n">cnt</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="nf">getSection</span><span class="p">(</span><span class="n">Point</span> <span class="n">a</span><span class="p">,</span> <span class="n">Point</span> <span class="n">b</span><span class="p">,</span> <span class="n">Circle</span> <span class="n">C</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">length</span><span class="p">()</span><span class="o">-</span><span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">b</span><span class="p">.</span><span class="n">length</span><span class="p">()</span><span class="o">-</span><span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Point</span> <span class="n">psol</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">getLineCircleIntersection</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">-</span><span class="n">a</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">psol</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Section</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="o">*</span><span class="n">sqrt3</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="n">a</span><span class="o">-</span><span class="n">b</span><span class="p">).</span><span class="n">length</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">max</span><span class="p">((</span><span class="n">a</span><span class="o">-</span><span class="n">psol</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="n">length</span><span class="p">(),</span> <span class="p">(</span><span class="n">b</span><span class="o">-</span><span class="n">psol</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="n">length</span><span class="p">()))</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Section</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="o">*</span><span class="n">sqrt3</span><span class="p">);</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Section</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">psol</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="o">*</span><span class="n">sqrt3</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">Section</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">psol</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="o">*</span><span class="n">sqrt3</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Point</span> <span class="n">p1</span><span class="p">,</span><span class="n">p2</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">length</span><span class="p">()</span><span class="o">-</span><span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">p1</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">((</span><span class="n">b</span><span class="o">-</span><span class="n">psol</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="n">length</span><span class="p">()</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">b</span><span class="o">-</span><span class="n">psol</span><span class="p">[</span><span class="mi">1</span><span class="p">]).</span><span class="n">length</span><span class="p">())</span>
</span><span class='line'>                <span class="n">p2</span> <span class="o">=</span> <span class="n">psol</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">p2</span> <span class="o">=</span> <span class="n">psol</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Section</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span> <span class="n">p2</span><span class="p">,</span> <span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="o">*</span><span class="n">sqrt3</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">b</span><span class="p">.</span><span class="n">length</span><span class="p">()</span><span class="o">-</span><span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">p1</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">((</span><span class="n">a</span><span class="o">-</span><span class="n">psol</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="n">length</span><span class="p">()</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">a</span><span class="o">-</span><span class="n">psol</span><span class="p">[</span><span class="mi">1</span><span class="p">]).</span><span class="n">length</span><span class="p">())</span>
</span><span class='line'>                <span class="n">p2</span> <span class="o">=</span> <span class="n">psol</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">p2</span> <span class="o">=</span> <span class="n">psol</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Section</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span><span class="n">p2</span><span class="p">,</span><span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="o">*</span><span class="n">sqrt3</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">dcmp</span><span class="p">((</span><span class="n">b</span><span class="o">-</span><span class="n">psol</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="n">length</span><span class="p">()</span><span class="o">+</span><span class="p">(</span><span class="n">a</span><span class="o">-</span><span class="n">psol</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="n">length</span><span class="p">()</span><span class="o">-</span><span class="p">(</span><span class="n">a</span><span class="o">-</span><span class="n">b</span><span class="p">).</span><span class="n">length</span><span class="p">())</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Section</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">psol</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="o">*</span><span class="n">sqrt3</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">Section</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">psol</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="o">*</span><span class="n">sqrt3</span><span class="p">);</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Section</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="o">*</span><span class="n">sqrt3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Point</span> <span class="n">P</span><span class="p">[</span><span class="mi">2000</span><span class="p">],</span><span class="n">Hull</span><span class="p">[</span><span class="mi">2000</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'>    <span class="n">freopen</span><span class="p">(</span><span class="s">&quot;1007.in&quot;</span><span class="p">,</span><span class="s">&quot;r&quot;</span><span class="p">,</span><span class="n">stdin</span><span class="p">);</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">kase</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">kase</span> <span class="o">&lt;=</span> <span class="n">T</span><span class="p">;</span> <span class="n">kase</span> <span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">m</span><span class="p">,</span><span class="n">r</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Circle</span> <span class="n">C</span> <span class="o">=</span> <span class="n">Circle</span><span class="p">(</span><span class="n">Point</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%lf&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="p">);</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">double</span> <span class="n">R</span> <span class="o">=</span> <span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="o">*</span><span class="n">sqrt3</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">bool</span> <span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%lf%lf&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">P</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">P</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">ConvexHull</span><span class="p">(</span><span class="n">P</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">Hull</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ans</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>        <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">Hull</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">length</span><span class="p">()</span><span class="o">-</span><span class="n">R</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">Hull</span><span class="p">[</span><span class="n">next</span><span class="p">].</span><span class="n">length</span><span class="p">()</span><span class="o">-</span><span class="n">R</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">flag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">flag</span> <span class="o">=</span> <span class="n">getSection</span><span class="p">(</span><span class="n">Hull</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">Hull</span><span class="p">[</span><span class="n">next</span><span class="p">],</span><span class="n">C</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">flag</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">flag</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">sort</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">ans</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">now</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="n">h</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ans</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">now</span> <span class="o">-=</span> <span class="n">ans</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">h</span> <span class="o">==</span> <span class="n">cnt</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="n">h</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">now</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">h</span><span class="o">!=</span><span class="n">cnt</span><span class="p">)</span>
</span><span class='line'>                <span class="n">flag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Case #%d: &quot;</span><span class="p">,</span> <span class="n">kase</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">flag</span><span class="p">)</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Succeeded.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">else</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Failed.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码2</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#define next (i+1)%n</span>
</span><span class='line'><span class="k">const</span> <span class="kt">double</span> <span class="n">eps</span> <span class="o">=</span> <span class="mf">1e-8</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">double</span> <span class="n">PI</span> <span class="o">=</span> <span class="n">acos</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="k">const</span> <span class="kt">double</span> <span class="n">sqrt3</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">dcmp</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">)</span><span class="c1">//精度比较</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="o">-</span><span class="n">eps</span><span class="p">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">eps</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">double</span> <span class="nf">add</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">b</span><span class="p">)</span><span class="c1">//考虑到精度的加法</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">eps</span> <span class="o">*</span> <span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">+</span> <span class="n">abs</span><span class="p">(</span><span class="n">b</span><span class="p">)))</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Point</span><span class="c1">//也可看做向量</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Point</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">Point</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">,</span><span class="kt">double</span> <span class="n">y</span><span class="p">)</span> <span class="o">:</span> <span class="n">x</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="n">y</span><span class="p">(</span><span class="n">y</span><span class="p">){}</span>
</span><span class='line'>    <span class="n">Point</span> <span class="k">operator</span> <span class="o">+</span> <span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">),</span><span class="n">add</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">));</span> <span class="p">}</span><span class="c1">//向量 + 向量 = 向量</span>
</span><span class='line'>    <span class="n">Point</span> <span class="k">operator</span> <span class="o">-</span> <span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">),</span><span class="n">add</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="o">-</span><span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">));</span> <span class="p">}</span> <span class="c1">// 向量 - 向量 = 向量</span>
</span><span class='line'>    <span class="n">Point</span> <span class="k">operator</span> <span class="o">*</span> <span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="n">y</span> <span class="o">*</span> <span class="n">a</span><span class="p">);</span> <span class="p">}</span><span class="c1">// 向量 * 数 = 向量</span>
</span><span class='line'>    <span class="n">Point</span> <span class="k">operator</span> <span class="o">/</span> <span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span> <span class="o">/</span> <span class="n">a</span><span class="p">,</span> <span class="n">y</span> <span class="o">/</span> <span class="n">a</span><span class="p">);</span> <span class="p">}</span><span class="c1">//向量 / 数 = 向量</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="k">operator</span> <span class="o">&lt;</span> <span class="p">(</span><span class="k">const</span> <span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">;</span> <span class="p">}</span> <span class="c1">//字典序比较，重定义&lt;</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="k">operator</span> <span class="o">==</span> <span class="p">(</span><span class="k">const</span> <span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span> <span class="p">}</span><span class="c1">//重定义 ==</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">dot</span><span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">add</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">);</span> <span class="p">}</span><span class="c1">//点积</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">det</span><span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">add</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="o">-</span><span class="n">y</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">);</span> <span class="p">}</span><span class="c1">//叉积,旋转方向取逆时针</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">length</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">*</span><span class="n">y</span><span class="p">);</span> <span class="p">}</span><span class="c1">//向量长度</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">Angle</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="n">atan2</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="p">);}</span><span class="c1">//两向量夹角</span>
</span><span class='line'>    <span class="n">Point</span> <span class="n">Rotate</span><span class="p">(</span><span class="kt">double</span> <span class="n">rad</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">rad</span><span class="p">),</span><span class="o">-</span> <span class="n">y</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">rad</span><span class="p">)),</span> <span class="n">add</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">rad</span><span class="p">),</span> <span class="n">y</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">rad</span><span class="p">)));</span> <span class="p">}</span><span class="c1">//逆时针旋转rad</span>
</span><span class='line'>    <span class="n">Point</span> <span class="n">Normal</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="o">-</span><span class="n">y</span> <span class="o">/</span> <span class="n">length</span><span class="p">(),</span> <span class="n">x</span> <span class="o">/</span> <span class="n">length</span><span class="p">());</span> <span class="p">}</span><span class="c1">//求单位法向量</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="n">Point</span> <span class="n">Vector</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">ConvexHull</span><span class="p">(</span><span class="n">Point</span><span class="o">*</span> <span class="n">p</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">Point</span><span class="o">*</span> <span class="n">ch</span><span class="p">)</span><span class="c1">//求凸包，凸包的点按照逆时针保存在*ch中。</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">sort</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">p</span><span class="o">+</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">m</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">2</span><span class="p">]).</span><span class="n">det</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">m</span> <span class="o">--</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">m</span> <span class="o">&gt;</span> <span class="n">k</span> <span class="o">&amp;&amp;</span><span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">2</span><span class="p">]).</span><span class="n">det</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">m</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ch</span><span class="p">[</span><span class="n">m</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="n">m</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Circle</span><span class="c1">//圆的定义，其中定义了求圆上与极轴成a度角的点的坐标</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Point</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Circle</span><span class="p">(){}</span>
</span><span class='line'>    <span class="n">Circle</span><span class="p">(</span><span class="n">Point</span> <span class="n">c</span><span class="p">,</span> <span class="kt">double</span> <span class="n">r</span><span class="p">)</span><span class="o">:</span> <span class="n">c</span><span class="p">(</span><span class="n">c</span><span class="p">),</span><span class="n">r</span><span class="p">(</span><span class="n">r</span><span class="p">){}</span>
</span><span class='line'>    <span class="n">Point</span> <span class="n">point</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">cos</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">*</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">sin</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">*</span><span class="n">r</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="n">C</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">getLineCircleIntersection</span><span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">,</span><span class="n">Vector</span> <span class="n">v</span><span class="p">,</span><span class="n">Circle</span> <span class="n">C</span><span class="p">,</span><span class="n">Point</span> <span class="n">sol</span><span class="p">[])</span><span class="c1">//求圆与直线的交点，返回交点个数并将交点按顺序放在sol[]离</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">a</span><span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">C</span><span class="p">.</span><span class="n">c</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">d</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">C</span><span class="p">.</span><span class="n">c</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">e</span> <span class="o">=</span> <span class="n">a</span><span class="o">*</span><span class="n">a</span> <span class="o">+</span> <span class="n">c</span><span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="n">f</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="n">a</span><span class="o">*</span><span class="n">b</span> <span class="o">+</span> <span class="n">c</span><span class="o">*</span><span class="n">d</span><span class="p">),</span> <span class="n">g</span> <span class="o">=</span> <span class="n">b</span><span class="o">*</span><span class="n">b</span> <span class="o">+</span> <span class="n">d</span><span class="o">*</span><span class="n">d</span> <span class="o">-</span><span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="o">*</span><span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">delta</span> <span class="o">=</span> <span class="n">f</span><span class="o">*</span><span class="n">f</span> <span class="o">-</span> <span class="mi">4</span><span class="o">*</span><span class="n">e</span><span class="o">*</span><span class="n">g</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">delta</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">delta</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">t1</span> <span class="o">=</span> <span class="n">t2</span> <span class="o">=</span> <span class="o">-</span><span class="n">f</span> <span class="o">/</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">e</span><span class="p">);</span> <span class="n">sol</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">sol</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="n">v</span><span class="o">*</span><span class="n">t1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">t1</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="n">f</span> <span class="o">-</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">delta</span><span class="p">))</span> <span class="o">/</span> <span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">e</span><span class="p">);</span> <span class="n">sol</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="n">v</span><span class="o">*</span><span class="n">t1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">t2</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="n">f</span> <span class="o">+</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">delta</span><span class="p">))</span> <span class="o">/</span> <span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">e</span><span class="p">);</span> <span class="n">sol</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="n">v</span><span class="o">*</span><span class="n">t2</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">double</span> <span class="nf">getAngle</span><span class="p">(</span><span class="kt">double</span> <span class="n">R</span><span class="p">,</span> <span class="kt">double</span> <span class="n">l</span><span class="p">)</span><span class="c1">//得到一点对应的角度</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">asin</span><span class="p">(</span><span class="n">R</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span> <span class="n">PI</span><span class="o">/</span><span class="mi">6</span> <span class="p">)</span> <span class="o">/</span> <span class="n">l</span><span class="p">)</span> <span class="o">-</span> <span class="n">PI</span><span class="o">/</span><span class="mi">6</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="nf">OnSegment</span><span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">,</span> <span class="n">Point</span> <span class="n">a1</span><span class="p">,</span> <span class="n">Point</span> <span class="n">a2</span><span class="p">)</span><span class="c1">//判断点是否在线段上,如果是不包括两端点的线段，把后面的相等去掉即可。</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dcmp</span><span class="p">((</span><span class="n">a1</span> <span class="o">-</span> <span class="n">p</span><span class="p">).</span><span class="n">det</span><span class="p">(</span><span class="n">a2</span> <span class="o">-</span> <span class="n">p</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dcmp</span><span class="p">((</span><span class="n">a1</span> <span class="o">-</span> <span class="n">p</span><span class="p">).</span><span class="n">dot</span><span class="p">(</span><span class="n">a2</span> <span class="o">-</span> <span class="n">p</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">cnt</span><span class="p">;</span>
</span><span class='line'><span class="n">vector</span> <span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">double</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">ans</span><span class="p">;</span>
</span><span class='line'><span class="kt">bool</span> <span class="nf">Section</span><span class="p">(</span><span class="n">Point</span> <span class="n">a</span><span class="p">,</span><span class="n">Point</span> <span class="n">b</span><span class="p">,</span><span class="kt">double</span> <span class="n">R</span><span class="p">)</span><span class="c1">//给出求出的圆外线段两点a,b,R（六角星中心到六角星一个角顶点的距离），求对应的区间，放在ans中</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">aa</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">Angle</span><span class="p">(),</span> <span class="n">bb</span> <span class="o">=</span> <span class="n">b</span><span class="p">.</span><span class="n">Angle</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">da</span> <span class="o">=</span> <span class="n">getAngle</span><span class="p">(</span><span class="n">R</span><span class="p">,</span> <span class="n">a</span><span class="p">.</span><span class="n">length</span><span class="p">()),</span> <span class="n">db</span> <span class="o">=</span> <span class="n">getAngle</span><span class="p">(</span><span class="n">R</span><span class="p">,</span> <span class="n">b</span><span class="p">.</span><span class="n">length</span><span class="p">());</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">aa</span><span class="o">-</span><span class="n">bb</span><span class="o">-</span><span class="n">PI</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">aa</span><span class="o">-=</span><span class="mi">2</span><span class="o">*</span><span class="n">PI</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">bb</span><span class="o">-</span><span class="n">aa</span><span class="o">-</span><span class="n">PI</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">bb</span><span class="o">-=</span><span class="mi">2</span><span class="o">*</span><span class="n">PI</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">l</span><span class="o">=</span><span class="n">max</span><span class="p">(</span><span class="n">aa</span><span class="o">-</span><span class="n">da</span><span class="p">,</span><span class="n">bb</span><span class="o">-</span><span class="n">db</span><span class="p">),</span> <span class="n">r</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">aa</span><span class="o">+</span><span class="n">da</span><span class="p">,</span><span class="n">bb</span><span class="o">+</span><span class="n">db</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">r</span><span class="o">-</span><span class="n">l</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cnt</span><span class="o">++</span><span class="p">;</span><span class="c1">//题解中有解释</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">l</span><span class="o">+=</span><span class="n">PI</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span><span class="n">r</span><span class="o">+=</span><span class="n">PI</span><span class="o">/</span><span class="mi">3</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">l</span><span class="o">-</span><span class="n">PI</span><span class="p">)</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">)</span> <span class="n">l</span> <span class="o">-=</span> <span class="mi">2</span><span class="o">*</span><span class="n">PI</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">r</span><span class="o">-</span><span class="n">PI</span><span class="p">)</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">)</span> <span class="n">r</span> <span class="o">-=</span> <span class="mi">2</span><span class="o">*</span><span class="n">PI</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>        <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">r</span> <span class="o">&lt;</span> <span class="n">l</span><span class="p">)</span> <span class="n">cnt</span><span class="o">--</span><span class="p">;</span><span class="c1">//如果发生这种情况，说明在刚开始多出来一个r区间，应该减去一个计数</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">bool</span> <span class="nf">getSection</span><span class="p">(</span><span class="n">Point</span> <span class="n">a</span><span class="p">,</span> <span class="n">Point</span> <span class="n">b</span><span class="p">,</span> <span class="n">Circle</span> <span class="n">C</span><span class="p">)</span><span class="c1">//给定两点，分情况求解</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">lena</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">length</span><span class="p">(),</span><span class="n">lenb</span> <span class="o">=</span> <span class="n">b</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">lena</span><span class="o">-</span><span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">lenb</span><span class="o">-</span><span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span><span class="c1">//都在圆内，肯定满足，相当于全区间满足，所以不用计数，也不用放进ans去</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Point</span> <span class="n">sol</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">getLineCircleIntersection</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">-</span><span class="n">a</span><span class="p">,</span><span class="n">C</span><span class="p">,</span><span class="n">sol</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">R</span> <span class="o">=</span> <span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="o">*</span><span class="n">sqrt3</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">lena</span><span class="o">-</span><span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">lenb</span> <span class="o">-</span> <span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span><span class="c1">//都在圆外</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">Section</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">R</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">bool</span> <span class="n">judge0</span> <span class="o">=</span> <span class="n">OnSegment</span><span class="p">(</span><span class="n">sol</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">);</span><span class="c1">//与圆的第一个交点在线段上</span>
</span><span class='line'>        <span class="kt">bool</span> <span class="n">judge1</span> <span class="o">=</span> <span class="n">OnSegment</span><span class="p">(</span><span class="n">sol</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">);</span><span class="c1">//与圆的第二个交点在线段上</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">judge0</span> <span class="o">||</span> <span class="n">judge1</span><span class="p">)</span><span class="c1">//一个交点相当于两个交点重合，两个交点就是两个交点，所以对应的代码是一样的</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Section</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">sol</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">R</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">Section</span><span class="p">(</span><span class="n">sol</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">b</span><span class="p">,</span><span class="n">R</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Section</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">R</span><span class="p">);</span><span class="c1">//没有交点的话，就是整个线段在圆外</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">lena</span> <span class="o">-</span> <span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span><span class="c1">//a点在圆内</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Section</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">sol</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">R</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Section</span><span class="p">(</span><span class="n">sol</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">b</span><span class="p">,</span><span class="n">R</span><span class="p">);</span><span class="c1">//b点在圆内</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Point</span> <span class="n">P</span><span class="p">[</span><span class="mi">2000</span><span class="p">],</span><span class="n">Hull</span><span class="p">[</span><span class="mi">2000</span><span class="p">];</span><span class="c1">//这个不明白，明明题目中说的最多有1000个镜像，为毛开1005会TLE T_T</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">kase</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">kase</span> <span class="o">&lt;=</span> <span class="n">T</span><span class="p">;</span> <span class="n">kase</span> <span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">m</span><span class="p">,</span><span class="n">r</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Circle</span> <span class="n">C</span> <span class="o">=</span> <span class="n">Circle</span><span class="p">(</span><span class="n">Point</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%lf&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="p">);</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">double</span> <span class="n">R</span> <span class="o">=</span> <span class="n">C</span><span class="p">.</span><span class="n">r</span><span class="o">*</span><span class="n">sqrt3</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">bool</span> <span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%lf%lf&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">P</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">P</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">ConvexHull</span><span class="p">(</span><span class="n">P</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">Hull</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ans</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>        <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">flag</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">Hull</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">length</span><span class="p">()</span><span class="o">-</span><span class="n">R</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">Hull</span><span class="p">[</span><span class="n">next</span><span class="p">].</span><span class="n">length</span><span class="p">()</span><span class="o">-</span><span class="n">R</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">flag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">flag</span> <span class="o">=</span> <span class="n">getSection</span><span class="p">(</span><span class="n">Hull</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">Hull</span><span class="p">[</span><span class="n">next</span><span class="p">],</span><span class="n">C</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">flag</span><span class="p">)</span><span class="c1">//这个过程会在题解里解释</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">sort</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">ans</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">now</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="n">h</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ans</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">now</span> <span class="o">-=</span> <span class="n">ans</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">h</span> <span class="o">==</span> <span class="n">cnt</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="n">h</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">now</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">h</span><span class="o">!=</span><span class="n">cnt</span><span class="p">)</span>
</span><span class='line'>                <span class="n">flag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Case #%d: &quot;</span><span class="p">,</span> <span class="n">kase</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">flag</span><span class="p">)</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Succeeded.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">else</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Failed.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后说下在标程中学到的一种小技巧，就是便利整个凸包的所有的边可以这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="n">Vector</span> <span class="n">edge</span> <span class="o">=</span> <span class="n">Hull</span><span class="p">[(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">n</span><span class="p">]</span> <span class="o">-</span> <span class="n">Hull</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[线段树简单模板]]></title>
    <link href="http://whn757397540.github.io/blog/2015/08/10/xian-duan-shu-jian-dan-mo-ban/"/>
    <updated>2015-08-10T16:53:34+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/08/10/xian-duan-shu-jian-dan-mo-ban</id>
    <content type="html"><![CDATA[<h2>Codeforces Round #262 (Div. 2)</h2>

<p><a href="http://codeforces.com/contest/460/problem/C">C题</a></p>

<p>这场CF，拿新号稀里糊涂的做了2题，竟然直接紫名了0.0！！A题大水题，B题直接以各个位数的和进行枚举，常数级的复杂度。下面借助C题挂一个自己写的简单的懒标记线段树模板0.0</p>

<!--more-->


<p>C题，一种方法是二分答案查找，我用的是线段树+贪心。</p>

<p>贪心的策略，每次查询最左侧的最小数的位置，然后以那个位置为起始位置，给接下來的w个花浇水（如果不够w个就浇到最后就好） 证明很简单，对于每个最矮的花，是肯定要浇水的，那么要浇的话，由于目的是让最矮的花最小，所以在你要浇的花比前面的花矮的情况下，浇前面的花是没有意义的（可以等长齐了之后再浇），所以，每次只需要浇最左侧的最矮的花（因为要让所有最矮的花都长高，这个最矮的花是必须要浇的）以及他之后的w长度的区间就好（自然是浇的越多越好），这写操作，查询或者修改，都能用线段树来实现，不过要加懒标记，想清楚了之后，就是一道最简单的懒标记线段树，代码如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span><span class="mi">100005</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Tree</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">;</span><span class="c1">//记录区间的左右端点</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">data</span><span class="p">;</span><span class="c1">//记录要求的数据的值（和，最小值之类的）；</span>
</span><span class='line'><span class="p">}</span><span class="n">a</span><span class="p">[</span><span class="mi">4</span><span class="o">*</span><span class="n">N</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">lazy</span><span class="p">[</span><span class="mi">4</span><span class="o">*</span><span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span><span class="c1">//懒标记</span>
</span><span class='line'><span class="kt">int</span> <span class="n">b</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">BuildTree</span><span class="p">(</span><span class="kt">int</span> <span class="n">now</span><span class="p">,</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'><span class="c1">//建树，还有一种建树方式，是直接建一个空树，就是初始化所有的data为0（当然，也看情况，总之不要影响以后插入就行）</span>
</span><span class='line'><span class="c1">//我在注释里标明那种树怎么建</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">lson</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">now</span><span class="p">,</span> <span class="n">rson</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">now</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">l</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span>
</span><span class='line'>    <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">r</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'><span class="c1">//如果是 直接建一个空树的话，那么这里应该加一句a[now].data = 0;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">l</span> <span class="o">==</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">data</span> <span class="o">=</span> <span class="n">b</span><span class="p">[</span><span class="n">l</span><span class="p">];</span><span class="c1">//如果建一个空树的话，这里只有一个return就行，也就是不要这句。</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BuildTree</span><span class="p">(</span><span class="n">lson</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">mid</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BuildTree</span><span class="p">(</span><span class="n">rson</span><span class="p">,</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>    <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">data</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">lson</span><span class="p">].</span><span class="n">data</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="n">rson</span><span class="p">].</span><span class="n">data</span><span class="p">);</span><span class="c1">//建空树不要这句</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//附一个Insert操作，单点插入操作，这题里我没用。</span>
</span><span class='line'><span class="c1">//如果用这个的话，就不用b数组了，建空树完了之后读入，在对应点插入就好</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">Insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">now</span><span class="p">,</span> <span class="kt">int</span> <span class="n">aim</span><span class="p">,</span> <span class="kt">int</span> <span class="n">det</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">lson</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">now</span><span class="p">,</span> <span class="n">rson</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">now</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">l</span> <span class="o">==</span> <span class="n">aim</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">r</span> <span class="o">==</span> <span class="n">aim</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">data</span> <span class="o">=</span> <span class="n">det</span><span class="p">;</span><span class="c1">//插入点，单点修改（比如增加det）的操作也跟此类似，就是改成+=就好</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">l</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">r</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">aim</span> <span class="o">&lt;=</span> <span class="n">mid</span><span class="p">)</span><span class="c1">//目标点在左边</span>
</span><span class='line'>        <span class="n">Insert</span><span class="p">(</span><span class="n">lson</span><span class="p">,</span> <span class="n">aim</span><span class="p">,</span> <span class="n">det</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span><span class="c1">//目标点在右边</span>
</span><span class='line'>        <span class="n">Insert</span><span class="p">(</span><span class="n">rson</span><span class="p">,</span> <span class="n">aim</span><span class="p">,</span> <span class="n">det</span><span class="p">);</span>
</span><span class='line'>    <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">data</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">lson</span><span class="p">].</span><span class="n">data</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="n">rson</span><span class="p">].</span><span class="n">data</span><span class="p">);</span><span class="c1">//由于下面的点更新了，所以一定要记得当前点的数据</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">Search</span><span class="p">(</span><span class="kt">int</span> <span class="n">now</span><span class="p">)</span><span class="c1">//这个Search不是线段树的常用操作，常用的是有一个目标的，比如加个区间之类的。</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">lson</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">now</span><span class="p">,</span> <span class="n">rson</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">now</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">l</span> <span class="o">==</span> <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">l</span><span class="p">;</span>
</span><span class='line'>    <span class="n">lazy</span><span class="p">[</span><span class="n">lson</span><span class="p">]</span> <span class="o">+=</span> <span class="n">lazy</span><span class="p">[</span><span class="n">now</span><span class="p">];</span>
</span><span class='line'>    <span class="n">lazy</span><span class="p">[</span><span class="n">rson</span><span class="p">]</span> <span class="o">+=</span> <span class="n">lazy</span><span class="p">[</span><span class="n">now</span><span class="p">];</span>
</span><span class='line'>    <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">data</span> <span class="o">+=</span> <span class="n">lazy</span><span class="p">[</span><span class="n">now</span><span class="p">];</span>
</span><span class='line'>    <span class="n">lazy</span><span class="p">[</span><span class="n">now</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//这里说下懒标记，因为不管你是找左边，还是找右边，还是两边都找，懒标记下传一定是左右都传的，所以直接</span>
</span><span class='line'>    <span class="c1">//在前面下传了就行，如果后面的区间没有被修改，那么就像这样修改下当前的值就好，</span>
</span><span class='line'>    <span class="c1">//如果修改了，记得在下面更新当前点的data值，具体参考Update；</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">lson</span><span class="p">].</span><span class="n">data</span> <span class="o">+</span> <span class="n">lazy</span><span class="p">[</span><span class="n">lson</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">a</span><span class="p">[</span><span class="n">rson</span><span class="p">].</span><span class="n">data</span> <span class="o">+</span> <span class="n">lazy</span><span class="p">[</span><span class="n">rson</span><span class="p">])</span><span class="c1">//因为你懒标记下传的时候才更新当前点的值，所以在比较左右儿子的时候要考虑到懒标记</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Search</span><span class="p">(</span><span class="n">lson</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Search</span><span class="p">(</span><span class="n">rson</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">Update</span><span class="p">(</span><span class="kt">int</span> <span class="n">now</span><span class="p">,</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span><span class="c1">//一般很多Search都是酱紫的，这也算是一个区间修改的标准模板了吧！</span>
</span><span class='line'><span class="c1">//说下，Search一般是为了求结果，比如询问[l,r]区间的最大最小值之类的，更改值的一般不取名为Search。</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">lson</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">now</span><span class="p">,</span> <span class="n">rson</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">now</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">l</span> <span class="o">==</span> <span class="n">l</span> <span class="o">&amp;&amp;</span> <span class="n">r</span> <span class="o">==</span> <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">r</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">lazy</span><span class="p">[</span><span class="n">now</span><span class="p">]</span><span class="o">++</span><span class="p">;</span><span class="c1">// 找到区间，懒标记增加</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">l</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">r</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">lazy</span><span class="p">[</span><span class="n">lson</span><span class="p">]</span> <span class="o">+=</span> <span class="n">lazy</span><span class="p">[</span><span class="n">now</span><span class="p">];</span>
</span><span class='line'>    <span class="n">lazy</span><span class="p">[</span><span class="n">rson</span><span class="p">]</span> <span class="o">+=</span> <span class="n">lazy</span><span class="p">[</span><span class="n">now</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//与上面同理，懒标记下传，左右儿子都得得到，不能说你搜左边就不要右边了，刚才的错误主要是在这里</span>
</span><span class='line'>    <span class="n">lazy</span><span class="p">[</span><span class="n">now</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//记得释放标记，就在这个位置的，下传后立刻释放，没用了就立马不要他了，省的出错</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">r</span> <span class="o">&lt;=</span> <span class="n">mid</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Update</span><span class="p">(</span><span class="n">lson</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">l</span> <span class="o">&gt;</span> <span class="n">mid</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Update</span><span class="p">(</span><span class="n">rson</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Update</span><span class="p">(</span><span class="n">lson</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">mid</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Update</span><span class="p">(</span><span class="n">rson</span><span class="p">,</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">data</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">lson</span><span class="p">].</span><span class="n">data</span> <span class="o">+</span> <span class="n">lazy</span><span class="p">[</span><span class="n">lson</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">rson</span><span class="p">].</span><span class="n">data</span> <span class="o">+</span> <span class="n">lazy</span><span class="p">[</span><span class="n">rson</span><span class="p">]);</span><span class="c1">//由于是值的更改，所以必须要更新当前节点</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 强调一点，切记，使用懒标记，无论你是要查询，还是要修改，只要走到了懒标记以下的区间，当前的懒标记就必须下传，而且必须下传到两个儿子节点，不能落掉一个，切记。</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span><span class="c1">//线段树写完了，主程序就简单的1B了0.0；</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">,</span><span class="n">w</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">w</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">BuildTree</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="n">Search</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Update</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">l</span><span class="p">,</span><span class="n">min</span><span class="p">(</span><span class="n">l</span><span class="o">+</span><span class="n">w</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">data</span> <span class="o">+</span> <span class="n">lazy</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://whn757397540.github.io/blog/archives/">&lt;&ndash;Back</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平面几何点与线段相关总结]]></title>
    <link href="http://whn757397540.github.io/blog/2015/08/10/ping-mian-ji-he-dian-yu-xian-duan-xiang-guan-zong-jie/"/>
    <updated>2015-08-10T16:53:06+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/08/10/ping-mian-ji-he-dian-yu-xian-duan-xiang-guan-zong-jie</id>
    <content type="html"><![CDATA[<p>今天，也算是搞了一天的这个东西吧，不过效率有点低了，只弄了弄平面几何中点与线的关系和多边形的面积。我把刘汝佳的白书和日本人的白书上的东西整合了下，当作自己的模板吧！</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">double</span> <span class="n">eps</span> <span class="o">=</span> <span class="mf">1e-10</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">dcmp</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">)</span><span class="c1">//精度比较</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="o">-</span><span class="n">eps</span><span class="p">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">eps</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">double</span> <span class="nf">add</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">b</span><span class="p">)</span><span class="c1">//考虑到精度的加法</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">eps</span> <span class="o">*</span> <span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">+</span> <span class="n">abs</span><span class="p">(</span><span class="n">b</span><span class="p">)))</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Point</span><span class="c1">//也可看做向量</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Point</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">Point</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">,</span><span class="kt">double</span> <span class="n">y</span><span class="p">)</span> <span class="o">:</span> <span class="n">x</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="n">y</span><span class="p">(</span><span class="n">y</span><span class="p">){}</span>
</span><span class='line'>    <span class="n">Point</span> <span class="k">operator</span> <span class="o">+</span> <span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">),</span><span class="n">add</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">));</span> <span class="p">}</span><span class="c1">//向量 + 向量 = 向量</span>
</span><span class='line'>    <span class="n">Point</span> <span class="k">operator</span> <span class="o">-</span> <span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">),</span><span class="n">add</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="o">-</span><span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">));</span> <span class="p">}</span> <span class="c1">// 向量 - 向量 = 向量</span>
</span><span class='line'>    <span class="n">Point</span> <span class="k">operator</span> <span class="o">*</span> <span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="n">y</span> <span class="o">*</span> <span class="n">a</span><span class="p">);</span> <span class="p">}</span><span class="c1">// 向量 * 数 = 向量</span>
</span><span class='line'>    <span class="n">Point</span> <span class="k">operator</span> <span class="o">/</span> <span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span> <span class="o">/</span> <span class="n">a</span><span class="p">,</span> <span class="n">y</span> <span class="o">/</span> <span class="n">a</span><span class="p">);</span> <span class="p">}</span><span class="c1">//向量 / 数 = 向量</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="k">operator</span> <span class="o">&lt;</span> <span class="p">(</span><span class="k">const</span> <span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">;</span> <span class="p">}</span> <span class="c1">//字典序比较，重定义&lt;</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="k">operator</span> <span class="o">==</span> <span class="p">(</span><span class="k">const</span> <span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span> <span class="p">}</span><span class="c1">//重定义 ==</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">dot</span><span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">add</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">);</span> <span class="p">}</span><span class="c1">//点积</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">det</span><span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">add</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="o">-</span><span class="n">y</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">);</span> <span class="p">}</span><span class="c1">//叉积,旋转方向取逆时针</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">length</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">*</span><span class="n">y</span><span class="p">);</span> <span class="p">}</span><span class="c1">//向量长度</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">Angle</span><span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">acos</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">*</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">)</span><span class="o">/</span> <span class="n">length</span><span class="p">()</span> <span class="o">/</span> <span class="n">p</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="p">);}</span><span class="c1">//两向量夹角</span>
</span><span class='line'>    <span class="n">Point</span> <span class="n">Rotate</span><span class="p">(</span><span class="kt">double</span> <span class="n">rad</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">rad</span><span class="p">),</span><span class="o">-</span> <span class="n">y</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">rad</span><span class="p">)),</span> <span class="n">add</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">rad</span><span class="p">),</span> <span class="n">y</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">rad</span><span class="p">)));</span> <span class="p">}</span><span class="c1">//逆时针旋转rad</span>
</span><span class='line'>    <span class="n">Point</span> <span class="n">Normal</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="o">-</span><span class="n">y</span> <span class="o">/</span> <span class="n">length</span><span class="p">(),</span> <span class="n">x</span> <span class="o">/</span> <span class="n">length</span><span class="p">());</span> <span class="p">}</span><span class="c1">//求单位法向量</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="n">Point</span> <span class="n">Vector</span><span class="p">;</span><span class="c1">//向量跟点的表示方法一样</span>
</span><span class='line'><span class="c1">//点与直线相关操作。</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">Point</span> <span class="nf">GetLineIntersection</span><span class="p">(</span><span class="n">Point</span> <span class="n">P</span><span class="p">,</span> <span class="n">Vector</span> <span class="n">v</span><span class="p">,</span> <span class="n">Point</span> <span class="n">Q</span><span class="p">,</span> <span class="n">Vector</span> <span class="n">w</span><span class="p">)</span><span class="c1">//找两直线交点，用点加向量的表示方法来表示直线。参数表示直线P + t*v和 Q + t*w；</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Vector</span> <span class="n">u</span> <span class="o">=</span> <span class="n">P</span> <span class="o">-</span> <span class="n">Q</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">P</span> <span class="o">+</span> <span class="n">v</span><span class="o">*</span><span class="p">(</span><span class="n">w</span><span class="p">.</span><span class="n">det</span><span class="p">(</span><span class="n">u</span><span class="p">)</span> <span class="o">/</span> <span class="n">v</span><span class="p">.</span><span class="n">det</span><span class="p">(</span><span class="n">w</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">double</span> <span class="nf">DistanceToLine</span><span class="p">(</span><span class="n">Point</span> <span class="n">P</span><span class="p">,</span> <span class="n">Point</span> <span class="n">A</span><span class="p">,</span> <span class="n">Point</span> <span class="n">B</span><span class="p">)</span><span class="c1">//点到直线距离</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Vector</span> <span class="n">v1</span> <span class="o">=</span> <span class="n">B</span> <span class="o">-</span> <span class="n">A</span><span class="p">,</span> <span class="n">v2</span> <span class="o">=</span> <span class="n">P</span> <span class="o">-</span> <span class="n">A</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">fabs</span><span class="p">(</span><span class="n">v1</span><span class="p">.</span><span class="n">det</span><span class="p">(</span><span class="n">v2</span><span class="p">)</span> <span class="o">/</span> <span class="n">v1</span><span class="p">.</span><span class="n">length</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">double</span> <span class="nf">DistanceToSegment</span><span class="p">(</span><span class="n">Point</span> <span class="n">P</span><span class="p">,</span> <span class="n">Point</span> <span class="n">A</span><span class="p">,</span> <span class="n">Point</span> <span class="n">B</span><span class="p">)</span><span class="c1">//点到线段距离</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">A</span> <span class="o">==</span> <span class="n">B</span><span class="p">)</span> <span class="k">return</span> <span class="p">(</span><span class="n">P</span><span class="o">-</span><span class="n">A</span><span class="p">).</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Vector</span> <span class="n">v1</span> <span class="o">=</span> <span class="n">B</span> <span class="o">-</span> <span class="n">A</span><span class="p">,</span> <span class="n">v2</span> <span class="o">=</span> <span class="n">P</span> <span class="o">-</span> <span class="n">A</span><span class="p">,</span> <span class="n">v3</span> <span class="o">=</span> <span class="n">P</span> <span class="o">-</span> <span class="n">B</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">v1</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">v2</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">v2</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">dcmp</span><span class="p">(</span><span class="n">v1</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">v3</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">v3</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">return</span> <span class="n">fabs</span><span class="p">(</span><span class="n">v1</span><span class="p">.</span><span class="n">det</span><span class="p">(</span><span class="n">v2</span><span class="p">)</span> <span class="o">/</span> <span class="n">v1</span><span class="p">.</span><span class="n">length</span><span class="p">())</span> <span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">Point</span> <span class="nf">GetLineProjection</span><span class="p">(</span><span class="n">Point</span> <span class="n">P</span><span class="p">,</span> <span class="n">Point</span> <span class="n">A</span><span class="p">,</span> <span class="n">Point</span> <span class="n">B</span><span class="p">)</span><span class="c1">//点在直线上的投影点</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Vector</span> <span class="n">v</span> <span class="o">=</span> <span class="n">B</span> <span class="o">-</span> <span class="n">A</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">A</span> <span class="o">+</span> <span class="n">v</span> <span class="o">*</span> <span class="p">(</span> <span class="n">v</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">P</span><span class="o">-</span><span class="n">A</span><span class="p">)</span> <span class="o">/</span> <span class="n">v</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">v</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="nf">SegmentProperIntersection</span><span class="p">(</span><span class="n">Point</span> <span class="n">a1</span><span class="p">,</span> <span class="n">Point</span> <span class="n">a2</span><span class="p">,</span> <span class="n">Point</span> <span class="n">b1</span><span class="p">,</span> <span class="n">Point</span> <span class="n">b2</span><span class="p">)</span><span class="c1">//判断两线段是否为“规范相交”。</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">c1</span> <span class="o">=</span> <span class="p">(</span><span class="n">a2</span> <span class="o">-</span> <span class="n">a1</span><span class="p">).</span><span class="n">det</span><span class="p">(</span><span class="n">b1</span> <span class="o">-</span> <span class="n">a1</span><span class="p">),</span> <span class="n">c2</span> <span class="o">=</span> <span class="p">(</span><span class="n">a2</span> <span class="o">-</span> <span class="n">a1</span><span class="p">).</span><span class="n">det</span><span class="p">(</span><span class="n">b2</span> <span class="o">-</span> <span class="n">a1</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">c3</span> <span class="o">=</span> <span class="p">(</span><span class="n">b2</span> <span class="o">-</span> <span class="n">b1</span><span class="p">).</span><span class="n">det</span><span class="p">(</span><span class="n">a1</span> <span class="o">-</span> <span class="n">b1</span><span class="p">),</span> <span class="n">c4</span> <span class="o">=</span> <span class="p">(</span><span class="n">b2</span> <span class="o">-</span> <span class="n">b1</span><span class="p">).</span><span class="n">det</span><span class="p">(</span><span class="n">a2</span> <span class="o">-</span> <span class="n">b1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">c1</span><span class="p">)</span> <span class="o">*</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">c2</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">c3</span><span class="p">)</span> <span class="o">*</span> <span class="n">dcmp</span><span class="p">(</span><span class="n">c4</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="nf">OnSegment</span><span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">,</span> <span class="n">Point</span> <span class="n">a1</span><span class="p">,</span> <span class="n">Point</span> <span class="n">a2</span><span class="p">)</span><span class="c1">//判断点是否在线段上,如果是不包括两端点的线段，把后面的相等去掉即可。</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dcmp</span><span class="p">((</span><span class="n">a1</span> <span class="o">-</span> <span class="n">p</span><span class="p">).</span><span class="n">det</span><span class="p">(</span><span class="n">a2</span> <span class="o">-</span> <span class="n">p</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dcmp</span><span class="p">((</span><span class="n">a1</span> <span class="o">-</span> <span class="n">p</span><span class="p">).</span><span class="n">dot</span><span class="p">(</span><span class="n">a2</span> <span class="o">-</span> <span class="n">p</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">p</span> <span class="o">==</span> <span class="n">a1</span> <span class="o">||</span> <span class="n">p</span> <span class="o">==</span><span class="n">a2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">double</span> <span class="nf">PolygonArea</span><span class="p">(</span><span class="n">Point</span><span class="o">*</span> <span class="n">p</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span><span class="c1">//求多边形的有向面积，也就是求多边形面积啦，可以使凸多边形，也可以是凹多边形。</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">area</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">area</span> <span class="o">+=</span> <span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]).</span><span class="n">det</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">area</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Point</span> <span class="n">a</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="n">b</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="n">c</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="n">d</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;a · b = &quot;</span><span class="o">&lt;&lt;</span><span class="n">a</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">b</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;a x b = &quot;</span><span class="o">&lt;&lt;</span><span class="n">a</span><span class="p">.</span><span class="n">det</span><span class="p">(</span><span class="n">b</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;length of a is &quot;</span><span class="o">&lt;&lt;</span><span class="n">a</span><span class="p">.</span><span class="n">length</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;Angle of a and b is&quot;</span><span class="o">&lt;&lt;</span><span class="n">a</span><span class="p">.</span><span class="n">Angle</span><span class="p">(</span><span class="n">b</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;Rotate a by PI/4 ,then a will become (&quot;</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">Rotate</span><span class="p">(</span><span class="n">acos</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">4</span><span class="p">)).</span><span class="n">x</span><span class="o">&lt;&lt;</span><span class="s">&quot; , &quot;</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">Rotate</span><span class="p">(</span><span class="n">acos</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">4</span><span class="p">)).</span><span class="n">y</span><span class="o">&lt;&lt;</span><span class="s">&quot;) &quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;Normal of a (&quot;</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">Normal</span><span class="p">()).</span><span class="n">x</span><span class="o">&lt;&lt;</span><span class="s">&quot; , &quot;</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">Normal</span><span class="p">()).</span><span class="n">y</span><span class="o">&lt;&lt;</span><span class="s">&quot;) &quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Point</span> <span class="n">ans</span><span class="p">;</span>
</span><span class='line'>    <span class="n">ans</span> <span class="o">=</span> <span class="n">GetLineIntersection</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span><span class="n">c</span> <span class="o">-</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;Line Intersection of Line ab and Line cb is(&quot;</span><span class="o">&lt;&lt;</span><span class="n">ans</span><span class="p">.</span><span class="n">x</span><span class="o">&lt;&lt;</span><span class="s">&quot; , &quot;</span><span class="o">&lt;&lt;</span><span class="n">ans</span><span class="p">.</span><span class="n">y</span><span class="o">&lt;&lt;</span><span class="s">&quot;) &quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;Distance of a to Line bd is: &quot;</span><span class="o">&lt;&lt;</span><span class="n">DistanceToLine</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">d</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;Distance of a to Segment bc is: &quot;</span><span class="o">&lt;&lt;</span><span class="n">DistanceToSegment</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Point</span> <span class="n">e</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;DisTance of d to Segment be is:&quot;</span> <span class="o">&lt;&lt;</span><span class="n">DistanceToSegment</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">e</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">ans</span> <span class="o">=</span> <span class="n">GetLineProjection</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">d</span><span class="p">);</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;The Projection of b to Line ad is: (&quot;</span><span class="o">&lt;&lt;</span><span class="n">ans</span><span class="p">.</span><span class="n">x</span><span class="o">&lt;&lt;</span><span class="s">&quot; , &quot;</span><span class="o">&lt;&lt;</span><span class="n">ans</span><span class="p">.</span><span class="n">y</span><span class="o">&lt;&lt;</span><span class="s">&quot;) &quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">ans</span> <span class="o">=</span> <span class="n">GetLineProjection</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">e</span><span class="p">);</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;The projection of b to line ae is: (&quot;</span><span class="o">&lt;&lt;</span><span class="n">ans</span><span class="p">.</span><span class="n">x</span><span class="o">&lt;&lt;</span><span class="s">&quot; , &quot;</span><span class="o">&lt;&lt;</span><span class="n">ans</span><span class="p">.</span><span class="n">y</span><span class="o">&lt;&lt;</span><span class="s">&quot;) &quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;Is segment ac and segment bd ProperIntersection?: &quot;</span><span class="o">&lt;&lt;</span><span class="n">SegmentProperIntersection</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">d</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;Is segment ab and segment bc ProperIntersection?: &quot;</span><span class="o">&lt;&lt;</span><span class="n">SegmentProperIntersection</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;Is b on segment ab?: &quot;</span><span class="o">&lt;&lt;</span><span class="n">OnSegment</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;Is b on segment cd?: &quot;</span><span class="o">&lt;&lt;</span><span class="n">OnSegment</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://whn757397540.github.io/blog/archives/">&lt;&ndash;Back</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HDU 4923 Room and Moor]]></title>
    <link href="http://whn757397540.github.io/blog/2015/08/10/hdu-4923-room-and-moor/"/>
    <updated>2015-08-10T12:23:22+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/08/10/hdu-4923-room-and-moor</id>
    <content type="html"><![CDATA[<h2>2014年多校联合训练第六场1003题</h2>

<!--more-->


<p>题目链接点——–<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4923">这里</a></p>

<p>不是一道很难的题，应该是一个贪心吧。</p>

<p>首先，我们先要知道对于1 1 ……10 0 0……0（x个1,y个0） 这样的一段，要想让满足题目的f(A,B)最小的话，B[i]应该取x/(x+y),至于怎么证，我不太清楚，应该是可以证出来，我们是按照这种方式算的样例，就假定他是正确的了。</p>

<p>有了上面的条件的话，后面的工作就简单了，不管前导0和后导1，然后把中间的部分分成k个111000类型的部分，算出每一段对应的B，然后用一个单调队列更新，如果后一段较前一段上升的话，就把后一段加到队列中；如果后一段较前一段下降的话，合并这两段（可以证明，这样的操作肯定是正确的），再将合并后的这一段跟之前的一段比较，直到满足数列上升的条件；一直进行这种操作就行了。用单调队列维护的话，也不会超时。赛时玮神敲的代码如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include&lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include&lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include&lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include&lt;vector&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">double</span> <span class="n">eps</span><span class="o">=</span><span class="mf">1e-9</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">N</span><span class="p">,</span><span class="n">M</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">A</span><span class="p">[</span><span class="mi">100010</span><span class="p">],</span><span class="n">B</span><span class="p">[</span><span class="mi">100010</span><span class="p">],</span><span class="n">num</span><span class="p">[</span><span class="mi">100010</span><span class="p">],</span><span class="n">que</span><span class="p">[</span><span class="mi">100010</span><span class="p">];</span>
</span><span class='line'><span class="kt">double</span> <span class="n">val</span><span class="p">[</span><span class="mi">100010</span><span class="p">],</span><span class="n">vx</span><span class="p">[</span><span class="mi">100010</span><span class="p">];</span>
</span><span class='line'><span class="kt">double</span> <span class="nf">get_val</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">l</span><span class="o">=</span><span class="n">B</span><span class="p">[</span><span class="n">a</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">B</span><span class="p">[</span><span class="n">a</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">l</span><span class="o">==</span><span class="n">num</span><span class="p">[</span><span class="n">a</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="n">B</span><span class="p">[</span><span class="n">a</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">==</span><span class="n">N</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">x</span><span class="o">=</span><span class="mf">1.0</span><span class="o">*</span><span class="n">num</span><span class="p">[</span><span class="n">a</span><span class="p">]</span><span class="o">/</span><span class="n">l</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="mf">1.0</span><span class="o">-</span><span class="n">x</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="mf">1.0</span><span class="o">-</span><span class="n">x</span><span class="p">)</span><span class="o">*</span><span class="n">num</span><span class="p">[</span><span class="n">a</span><span class="p">]</span><span class="o">+</span><span class="n">x</span><span class="o">*</span><span class="n">x</span><span class="o">*</span><span class="p">(</span><span class="n">l</span><span class="o">-</span><span class="n">num</span><span class="p">[</span><span class="n">a</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">double</span> <span class="nf">get_x</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">l</span><span class="o">=</span><span class="n">B</span><span class="p">[</span><span class="n">a</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">B</span><span class="p">[</span><span class="n">a</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="mf">1.0</span><span class="o">*</span><span class="n">num</span><span class="p">[</span><span class="n">a</span><span class="p">]</span><span class="o">/</span><span class="n">l</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">T</span><span class="p">;</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">A</span><span class="p">));</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">T</span><span class="o">--</span><span class="p">){</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">N</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">memset</span><span class="p">(</span><span class="n">B</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">N</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>        <span class="n">memset</span><span class="p">(</span><span class="n">num</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="n">N</span><span class="p">);</span>
</span><span class='line'>        <span class="n">memset</span><span class="p">(</span><span class="n">val</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">val</span><span class="p">));</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                <span class="n">num</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="n">B</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span><span class="n">num</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">B</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">N</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">head</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">tail</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">j</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="n">vx</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">get_x</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>            <span class="n">val</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">get_val</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>            <span class="k">while</span><span class="p">(</span><span class="n">head</span><span class="o">&lt;</span><span class="n">tail</span><span class="p">){</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">vx</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="n">eps</span><span class="o">&lt;</span><span class="n">vx</span><span class="p">[</span><span class="n">que</span><span class="p">[</span><span class="n">tail</span><span class="o">-</span><span class="mi">1</span><span class="p">]]){</span>
</span><span class='line'>                    <span class="n">tail</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+=</span><span class="n">num</span><span class="p">[</span><span class="n">que</span><span class="p">[</span><span class="n">tail</span><span class="p">]];</span>
</span><span class='line'>                    <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">B</span><span class="p">[</span><span class="n">que</span><span class="p">[</span><span class="n">tail</span><span class="p">]];</span>
</span><span class='line'>                    <span class="kt">int</span> <span class="n">l</span><span class="o">=</span><span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>                    <span class="n">vx</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="mf">1.0</span><span class="o">*</span><span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">/</span><span class="n">l</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">val</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">vx</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="n">vx</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">l</span><span class="o">-</span><span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">+</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">vx</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">*</span><span class="p">(</span><span class="mf">1.0</span><span class="o">-</span><span class="n">vx</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">*</span><span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">else</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">que</span><span class="p">[</span><span class="n">tail</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="kt">double</span> <span class="n">res</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">head</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">tail</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="n">res</span><span class="o">+=</span><span class="n">val</span><span class="p">[</span><span class="n">que</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%.6lf</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">res</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>仔细再思考一下，发现不管是对于任何一段，都是符合如果对这一段选择相同的值，肯定要选择平均数，而最小的结果也正好是这样，所以，不用去找到那些11110000的部分，直接用单调队列从头维护到尾即可，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;queue&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#define INF 0x3f3f3f3f</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">double</span> <span class="n">eps</span><span class="o">=</span><span class="mf">1e-9</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
</span><span class='line'><span class="cp">#define MAXN 100100</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">MAXN</span><span class="p">];</span>
</span><span class='line'><span class="kt">double</span> <span class="n">b</span><span class="p">[</span><span class="n">MAXN</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">que</span><span class="p">[</span><span class="n">MAXN</span><span class="p">],</span><span class="n">head</span><span class="p">,</span><span class="n">tail</span><span class="p">;</span>
</span><span class='line'><span class="kt">double</span> <span class="n">sum</span><span class="p">[</span><span class="n">MAXN</span><span class="p">],</span><span class="n">ave</span><span class="p">[</span><span class="n">MAXN</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">init</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">b</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);</span>
</span><span class='line'>    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">T</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">T</span><span class="o">--</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>        <span class="n">sum</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">init</span><span class="p">();</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>            <span class="n">sum</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">sum</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">head</span> <span class="o">=</span> <span class="n">tail</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">que</span><span class="p">[</span><span class="n">tail</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ave</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">memset</span><span class="p">(</span><span class="n">ave</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">ave</span><span class="p">));</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">ave</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">sum</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">sum</span><span class="p">[</span><span class="n">que</span><span class="p">[</span><span class="n">tail</span><span class="o">-</span><span class="mi">1</span><span class="p">]])</span><span class="o">/</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="n">que</span><span class="p">[</span><span class="n">tail</span><span class="o">-</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>           <span class="c1">// cout&lt;&lt;ave[i]&lt;&lt;&quot; &quot;&lt;&lt;tail&lt;&lt;endl;</span>
</span><span class='line'>            <span class="k">while</span><span class="p">(</span><span class="n">head</span> <span class="o">&lt;</span> <span class="n">tail</span> <span class="o">&amp;&amp;</span> <span class="n">ave</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="n">eps</span> <span class="o">&lt;=</span> <span class="n">ave</span><span class="p">[</span><span class="n">que</span><span class="p">[</span><span class="n">tail</span><span class="o">-</span><span class="mi">1</span><span class="p">]])</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">tail</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>                <span class="n">ave</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">sum</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">sum</span><span class="p">[</span><span class="n">que</span><span class="p">[</span><span class="n">tail</span><span class="o">-</span><span class="mi">1</span><span class="p">]])</span><span class="o">/</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="n">que</span><span class="p">[</span><span class="n">tail</span><span class="o">-</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>               <span class="c1">// cout&lt;&lt;&quot;\t\t&quot;&lt;&lt;sum[i]&lt;&lt;&quot;-&quot;&lt;&lt;sum[que[tail-1]]&lt;&lt;&quot; &quot;&lt;&lt;ave[i]&lt;&lt;endl;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">que</span><span class="p">[</span><span class="n">tail</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="kt">double</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="n">head</span> <span class="o">&lt;</span> <span class="n">tail</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">que</span><span class="p">[</span><span class="n">head</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">que</span><span class="p">[</span><span class="n">head</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">ave</span><span class="p">[</span><span class="n">que</span><span class="p">[</span><span class="n">head</span><span class="o">+</span><span class="mi">1</span><span class="p">]];</span>
</span><span class='line'>            <span class="n">head</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">ans</span> <span class="o">+=</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">*</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%.6f</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">ans</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://whn757397540.github.io/blog/archives/">&lt;&ndash;Back</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树状数组总结]]></title>
    <link href="http://whn757397540.github.io/blog/2015/08/10/shu-zhuang-shu-zu-zong-jie/"/>
    <updated>2015-08-10T12:22:53+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/08/10/shu-zhuang-shu-zu-zong-jie</id>
    <content type="html"><![CDATA[<p>一维树状数组应用的三种类型总结。</p>

<ul>
<li>点修改，区间查询</li>
<li>区间修改，点查询</li>
<li>区间修改，区间查询</li>
</ul>


<!--more-->


<ul>
<li>点修改，区间查询</li>
</ul>


<p>这是最基础的树状数组了，树状数组的定义就是这样的，不过一般出 题不会直接出裸的树状数组，这之中需要一些思考.树状数组我就不介绍了，直接上一个例题吧</p>

<p><a href="http://code.bupt.edu.cn/problem/p/395/">BOJ 395. Tree</a></p>

<p>题意大概是给你一棵树，并给每个节点一个value值（1=&lt;value &lt;= 109 ), 让你求从根节点开始，一直到某个节点（称为当前节点）的这条路中经过的所有节点，value值比当前节点大的（包括跟节点）总共有多少个。节点数100000以内，要求输出所有的节点的结果。</p>

<p>废话不多说，直接说思路吧。</p>

<p>首先，需要对value值进行离散化，因为你只需要知道各个点value值的大小关系，二者相差1跟相差10000没有什么区别。离散化时记得等于要按照相同的数来处理。</p>

<p>然后，树状数组记录的是这样一个数组a[n]的和，其中a[i]代表搜索到当前节点时，离散化后的value值（以后称为v)为i的节点的个数。对于每个节点p，当搜索到当前节点的时候，维护树状数组的值，并求出比当前节点的v值大的总共有多少个（就是getSum(MAX)-getSum(v));搜索用的是dfs，当搜索到叶子节点后回溯时，要记得释放修改过的节点，重新维护更新树状数组。思路大概如此，如果理解了树状数组的话，结合代码应该很容易看懂</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define N 100005</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">tree</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">data</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">long</span> <span class="kt">long</span> <span class="n">val</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="n">value</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">v</span><span class="p">[</span><span class="n">N</span><span class="p">],</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="kt">long</span> <span class="kt">long</span> <span class="n">C</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">ans</span><span class="p">[</span><span class="n">N</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span><span class="c1">//ans[k]´ú±í´ð°¸£»</span>
</span><span class='line'><span class="kt">int</span> <span class="n">MAX</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">Lowbit</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span><span class="o">&amp;</span><span class="p">(</span><span class="n">n</span><span class="o">^</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">Update</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="p">,</span><span class="kt">int</span> <span class="n">delta</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">k</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">C</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">+=</span><span class="n">delta</span><span class="p">;</span>
</span><span class='line'>        <span class="n">k</span><span class="o">+=</span><span class="n">Lowbit</span><span class="p">(</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">long</span> <span class="kt">long</span> <span class="nf">getSum</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">long</span> <span class="kt">long</span> <span class="n">result</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">result</span><span class="o">+=</span><span class="n">C</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="n">i</span><span class="o">-=</span><span class="n">Lowbit</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">build</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">tree</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="nf">cmp</span><span class="p">(</span><span class="n">data</span> <span class="n">a</span><span class="p">,</span><span class="n">data</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span><span class="p">.</span><span class="n">val</span><span class="o">&lt;</span><span class="n">b</span><span class="p">.</span><span class="n">val</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">dfs</span><span class="p">(</span><span class="kt">int</span> <span class="n">now</span><span class="p">,</span><span class="kt">int</span> <span class="n">father</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">tree</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">size</span><span class="p">()</span><span class="o">==</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="n">now</span><span class="o">!=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">ans</span><span class="p">[</span><span class="n">now</span><span class="p">]</span><span class="o">=</span><span class="n">getSum</span><span class="p">(</span><span class="n">MAX</span><span class="p">)</span><span class="o">-</span><span class="n">getSum</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">now</span><span class="p">]);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">tree</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">son</span><span class="o">=</span><span class="n">tree</span><span class="p">[</span><span class="n">now</span><span class="p">][</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">son</span><span class="o">==</span><span class="n">father</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ans</span><span class="p">[</span><span class="n">now</span><span class="p">]</span><span class="o">=</span><span class="n">getSum</span><span class="p">(</span><span class="n">MAX</span><span class="p">)</span><span class="o">-</span><span class="n">getSum</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">now</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">Update</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">now</span><span class="p">],</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">dfs</span><span class="p">(</span><span class="n">son</span><span class="p">,</span><span class="n">now</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Update</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">now</span><span class="p">],</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>        <span class="n">memset</span><span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">v</span><span class="p">));</span>
</span><span class='line'>        <span class="n">memset</span><span class="p">(</span><span class="n">C</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">C</span><span class="p">));</span>
</span><span class='line'>        <span class="n">memset</span><span class="p">(</span><span class="n">value</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">value</span><span class="p">));</span>
</span><span class='line'>        <span class="n">MAX</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">u</span><span class="p">,</span><span class="n">v</span><span class="p">;</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">u</span><span class="p">,</span><span class="o">&amp;</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'>            <span class="n">build</span><span class="p">(</span><span class="n">u</span><span class="p">,</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'>            <span class="n">build</span><span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="n">u</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">val</span><span class="p">);</span>
</span><span class='line'>            <span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">num</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">sort</span><span class="p">(</span><span class="n">value</span><span class="p">,</span><span class="n">value</span><span class="o">+</span><span class="n">n</span><span class="p">,</span><span class="n">cmp</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">cnt</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">v</span><span class="p">[</span><span class="n">value</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">num</span><span class="p">]</span><span class="o">=</span><span class="n">cnt</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">val</span><span class="o">==</span><span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">val</span><span class="p">)</span>
</span><span class='line'>                <span class="n">v</span><span class="p">[</span><span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">num</span><span class="p">]</span><span class="o">=</span><span class="n">cnt</span><span class="p">;</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">v</span><span class="p">[</span><span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">num</span><span class="p">]</span><span class="o">=++</span><span class="n">cnt</span><span class="p">;</span>
</span><span class='line'>            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">MAX</span><span class="o">=</span><span class="n">cnt</span><span class="p">;</span>
</span><span class='line'>        <span class="n">dfs</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">ans</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">tree</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外，在放一道练习题，是我第一次接触树状数组时做的题，跟这道题一样，是一个很简单的有兴趣可以去做一做，<a href="http://poj.org/problem?id=2299">POJ 2299</a></p>

<ul>
<li>区间修改，点查询</li>
</ul>


<p>我目前做题还比较少，这种题还没有碰到过，就是实现对数组的区间修改，然后查询单点的值。看起来貌似是跟树状数组相反的，其实只要稍作变形，就很容易搞定。</p>

<p>设a[n]为树状数组求和的数组，然后设b[n]=a[n]-a [n-1] (将a[0]设为0）;那么b[ 1 ]=a[ 1 ] ,数组b存储的就是数组a的相邻两项的差值；那么区间修改就很容易了，假如要修改[ l , r ]区间的值，那么只需要修改 b [ l ] (因为b[ l ] 存的是a[ l ]与a[ l-1 ]的差值，a[ l ]，变了，a[ l-1 ]没变，那么差值自然就变了)和b [ r+1 ] (跟前面同理)。所以这样很容易实现区间修改，那么单点查询呢？你可以试试吧b[1]到b[n]加起来，然后你就清楚了。</p>

<p>至于这一部分的题嘛，我也没有见到过，毕竟做的题还不是很多。了解一下，知道想法，以后碰到了会做就行，其实树状数组更多的是作为一种中间的处理方法来用。</p>

<ul>
<li>区间修改，区间查询</li>
</ul>


<p>最后的这个，是最麻烦的，一般可以用线段树来实现，但这里我只说树状数组的方法（比一般的线段树要快一些）。</p>

<p>这个是不能单单依靠一个树状数组来实现的，先来进行下推导吧！这个推导的时候请自行揣摩一下，要自己推出来才能记得住哦!</p>

<p>首先，还是设树状数组存储的是a[ n ]的和，依然设b[ n ]=a[ n ]– a[ n – 1 ];通过上面的讨论，我们知道这样可以很容易进行区间修改和单点查询，但是呢，这里要求是是区间查询，该怎么办呢？得想办法再找到一个辅助数组。我们来进行一下推导（其中sigma代表i从1到n的求和符号）</p>

<p>则sigma(a [ i ] )= a [ 1 ] + a [ 2 ] + a [ 3 ]+……+a [ n ],把a[ n ]=b [ n ] + a[ n-1 ] 代入，可以得到 原式= b [ n ] + 2 b [ n-1 ] + 3 b [ n-2 ]+……+ n b[ 1 ]= ( n+1 )sigma( b[ i ])– sigma ( i b[ i ])</p>

<p>好了，推导完这些，你是不是发现了点什么？没错，数组a的前n项和可以用数组b和数组 c[ i ]=i b[ i ] 两个数组来表示，我们只需要分别设计 求 b[ i ]和求 c [ i ]的和的树状数组，就能够实现对a[ i ]的区间修改和区间查询啦！</p>

<p>放一道例题，是赤果果的区间修改，区间查询， <a href="http://poj.org/problem?id=3468">POJ 3468</a>  再附上我的一个AC代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define N 100050</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">long</span> <span class="kt">long</span> <span class="n">a</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
</span><span class='line'><span class="kt">long</span> <span class="kt">long</span> <span class="n">B</span><span class="p">[</span><span class="n">N</span><span class="p">],</span><span class="n">C</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">q</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">Lowbit</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">n</span><span class="o">&amp;</span><span class="p">(</span><span class="n">n</span><span class="o">^</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">Update</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="p">,</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">delta</span><span class="p">,</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">C</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">k</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">C</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">+=</span><span class="n">delta</span><span class="p">;</span>
</span><span class='line'>      <span class="n">k</span><span class="o">+=</span><span class="n">Lowbit</span><span class="p">(</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">long</span> <span class="kt">long</span> <span class="nf">getSum</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">C</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">long</span> <span class="kt">long</span> <span class="n">result</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">result</span><span class="o">+=</span><span class="n">C</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="n">i</span><span class="o">-=</span><span class="n">Lowbit</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">long</span> <span class="kt">long</span> <span class="nf">getSumA</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">getSum</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">B</span><span class="p">)</span><span class="o">-</span><span class="n">getSum</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">C</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">UpdateA</span><span class="p">(</span><span class="kt">int</span> <span class="n">l</span><span class="p">,</span><span class="kt">int</span> <span class="n">r</span><span class="p">,</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">det</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Update</span><span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="n">det</span><span class="p">,</span><span class="n">B</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Update</span><span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="n">l</span><span class="o">*</span><span class="n">det</span><span class="p">,</span><span class="n">C</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Update</span><span class="p">(</span><span class="n">r</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="n">det</span><span class="p">,</span><span class="n">B</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Update</span><span class="p">(</span><span class="n">r</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="p">(</span><span class="n">r</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">det</span><span class="p">,</span><span class="n">C</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="o">&gt;&gt;</span><span class="n">q</span><span class="p">;</span>
</span><span class='line'>    <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="n">B</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">B</span><span class="p">));</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="n">C</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">C</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%lld&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="kt">long</span> <span class="kt">long</span> <span class="n">b</span><span class="o">=</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>        <span class="n">Update</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">B</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Update</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">i</span><span class="o">*</span><span class="n">b</span><span class="p">,</span><span class="n">C</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">q</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">ch</span><span class="p">;</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ch</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">ch</span><span class="o">==</span><span class="sc">&#39;Q&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">;</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">l</span><span class="p">,</span><span class="o">&amp;</span><span class="n">r</span><span class="p">);</span>
</span><span class='line'>            <span class="kt">long</span> <span class="kt">long</span> <span class="n">ans</span><span class="o">=</span><span class="n">getSumA</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">-</span><span class="n">getSumA</span><span class="p">(</span><span class="n">l</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%lld</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">ans</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">ch</span><span class="o">==</span><span class="sc">&#39;C&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">;</span>
</span><span class='line'>            <span class="kt">long</span> <span class="kt">long</span> <span class="n">det</span><span class="p">;</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d%lld&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">l</span><span class="p">,</span><span class="o">&amp;</span><span class="n">r</span><span class="p">,</span><span class="o">&amp;</span><span class="n">det</span><span class="p">);</span>
</span><span class='line'>            <span class="n">UpdateA</span><span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">,</span><span class="n">det</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://whn757397540.github.io/blog/archives/">&lt;&ndash;BACK</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015年多校联合训练第二场]]></title>
    <link href="http://whn757397540.github.io/blog/2015/07/24/test/"/>
    <updated>2015-07-24T05:57:05+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/07/24/test</id>
    <content type="html"><![CDATA[<!-- more -->


<p>1002题： <a href="http://acm.hdu.edu.cn/showproblem.php?pid=5301">HDU 5301 Building</a></p>

<p>这道题实际应该是最水的题目了，非常简单，最大的面积的矩形的宽度肯定是1，而长度只有可能是5个位置之中的到边界的最小距离的最大值，这5个位置分别是，不能占用的块相邻的4个位置和中心的位置。敲的时候细心一点就好。</p>

<p>1004题： <a href="http://acm.hdu.edu.cn/showproblem.php?pid=5303">HDU 5303 Delicious Apples</a></p>

<p>这道题，在比赛时应该是做不出来的。根据曹霸的思路，是一道dp题。</p>

<p>由于苹果总数只有10<sup>5</sup>个，所以我们可以这样dp，先按照距离给果树排序，然后依次给每个苹果标号，编号为i的苹果与储藏处的距离记录在apple[i]之中。之后用两个数组，dp1[i]来记录顺时针出发（总是顺时针出发）最后取到第i个苹果时所花费的总距离（第i个之前的苹果都被运回了储藏处，这也是我们之前排序的原因。），则dp1[i] = dp1[i-k]+apple[i]+min(apple[i],L-apple[i])，因为取的第i个苹果有可能在左半圆，也有可能在右半圆，在右半圆应该是接着往前走走到起点比原路返回近。同理，dp2[i]表示逆时针的，同样i也要反过来，从大到小。。最后再暴力判断一下，对于每个i作为分界点来计算dp1[i]+dp2[i+1]的最小值即可。</p>

<p><a href="http://whn757397540.github.io/acm/hdu/hdu5301/">代码</a></p>

<p>1006题： <a href="http://acm.hdu.edu.cn/showproblem.php?pid=5305">HDU 5305 Friends</a></p>

<p>这道题如果数据范围大的化不会很简单，由于数据范围并不大，所以直接暴力枚举即可，记得稍微剪枝一下，比如如果有个人同奇数个人有关系的，就肯定不可能有符合的情况了。</p>

<p>1009题： <a href="http://acm.hdu.edu.cn/showproblem.php?pid=5308">HDU 5308 I Wanna Become A 24-Point Master</a></p>

<p>这个就是一个模拟题，我们的思路是，</p>

<p>首先1～3是不可能构成的</p>

<p>然后4～12手动构造，</p>

<p>13～18有如下规律：首先令k=(24-n),用k+1个数构成k，然后再加上n得到24，剩下的肯定是偶数个，就加一个减一个即可。（当然，这个到24都是适用的）</p>

<p>19之后有如下规律：当n为奇数时，我们可以用3个数构造一个2，再用16个数构造8个1，然后就可以构造出一个4和一个6，然后相乘得到24，总共花费19个数，剩下偶数个数，加一个减一个即可；当n为偶数时，用20个数构造10个1，之后就可以构造一个4和一个6，然后得到24，之后剩下的还是偶数个数，只需要加一个减一个即可。</p>

<p>之后就可以写出来了，我们的<a href="http://whn757397540.github.io/acm/hdu/hdu5308/">代码</a>在这里。</p>

<p>其实还有很多种构造方法，比如我们可以用5个1构造一个4，7个1构造一个6（先相加再相除），共用12个；或者用4个1构造一个3，9个1构造一个8，共用13个；这样，在12之后就可以统一写了，这是S菊苣他们队伍的思路。其他的当然也有，就不用一一列举了，就是写的时候小心一点，就是一个不算特别大的模拟题。</p>

<p>今天就先到这里</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015年多校联合训练第一场]]></title>
    <link href="http://whn757397540.github.io/blog/2015/07/21/test-new/"/>
    <updated>2015-07-21T23:10:54+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/07/21/test-new</id>
    <content type="html"><![CDATA[<!--more-->


<p>1001题：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5288">hdu 5288 OO’s Sequence</a></p>

<p>这个题，其实就是考虑每个位置的a[i]对答案的贡献是多少.找到从i开始向左都符合条件的最大区间，和向右都符合条件的最大区间，两个区间长度相乘就是a[i]对答案的贡献。</p>

<p>方法很简单，先处理出1000以内的每个数的因数，这个暴力预处理就好。然后扫一遍，扫到每个数，就找他的因数里面距离他最近的那个位置，就能求出区间的长度，左右都一样，最后求和就行，乘法可能暴int(吗？),反正转换以下肯定没有错</p>

<p><a href="http://whn757397540.github.io/acm/hdu/hdu5288/">代码</a></p>

<p>1002题：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5289">HDU 5289 Assignment</a></p>

<p>这个题非常简单，使用单调队列，维护一个最大值的单调队列和一个最小值的单调队列，然后设定一个头，每次当最大值和最小值的差不小于k就让头加1，否则在答案里增加当前的区间长度。具体可以根据<a href="http://whn757397540.github.io/acm/hdu/hdu5289/">代码</a>来看清楚</p>

<p>1005题 <a href="http://acm.hdu.edu.cn/showproblem.php?pid=5292">HDU 5292 Pocket Cube</a></p>

<p>这个题其实没什么好说的，算是一个结论题，仔细研究过魔方的人很容易就知道，而没玩过的人想想出来是非常困难的。就是按照官方题解的思路来喽，上面写的圈值+代表1，-代表-1，0代表0。当然正负反一下也可以，不过要保证对面的数字和为0.</p>

<p>1006题 <a href="http://acm.hdu.edu.cn/showproblem.php?pid=5293">HDU 5293 Tree chain problem</a></p>

<p>树型dp，本人这方面比较弱，看了题解才能写出来，玮神说这题要比第9题简单，2333。思路就是题解中的思路，关于后面的求和部分，可以利用树状数组（时间比较紧）。对于dfs过程中到达的每个点，记录达到这个点的时间戳和离开这个点的时间戳。然后以时间戳为下标来更新树状数组，在达到这个点的时候加上对应的数字（求sum[i]的和就加上sum[i]，求d[i]的和就加上d[i],用两个树状数组维护），离开这个点的时候减去这个数字，这样只需要对应求和就可以得到想要的和。</p>

<p><a href="http://whn757397540.github.io/acm/hdu/hdu5293/">代码</a>在这里，刚开始是建的双向图，然后给T了，就只好建单向图。还有就是这题要扩栈，在题目的hint里有提示，但是一定要用c++交才可以。</p>

<p>1007题 <a href="http://acm.hdu.edu.cn/showproblem.php?pid=5294">HDU 5294 Tree chain problem</a></p>

<p>其实并不难，就是敲的时候小心模板不要敲错了，我们的做法是先求最短路（用dijkstra），然后记录所有最短路径上的点的父亲节点，然后从终点开始dfs父亲节点，最终构造出一个最短路的图。</p>

<p>之后就是在这个图的基础上，设定所有的边流量为1求最大流（也就是在求这个图的最小割），这是第一个输出数据，第二个数据应该是所有边的边数减去边数最少的最短路上的边数，这个可以用bfs来求，不过我们是用了dfs来求的。</p>

<p><a href="http://whn757397540.github.io/acm/hdu/hdu5294/">代码在这里</a></p>

<p>1009题 <a href="http://acm.hdu.edu.cn/showproblem.php?pid=5296">HDU 5296 Annoying problem</a></p>

<p>这个题也是看了题解才知道怎么写，而且也参考了标程，首先处理LCA，记录dfs顺序也是用到了时间戳。为什么要选择dfs序最近的左右两个点呢？其实对于每种情况，不只是这两个点可以，也有其他的点可以，但是画图后观察可以发现，dfs序最近的两个点之间的路径到点的距离肯定是是所有集和的最近距离（说了好像没说一样，我也只是看了题解后画了画，并不知道怎么证明。），而实现上，找这两个点，利用了set。<a href="http://whn757397540.github.io/acm/hdu/hdu5296/">代码</a>在这里</p>

<p>1012题 <a href="http://acm.hdu.edu.cn/showproblem.php?pid=5299">hdu 5299 Circles Game</a></p>

<p>这个题呀，其实，在比赛刚刚开始，一道题都没有过的时候，我的猜想就是正确的，只不过太久没有做过博弈的题目，使得我并没有证明，然后最后又想别的办法。</p>

<p>这个题的证明基于几个结论：</p>

<ol>
<li>sg函数得到的sg值等同于NIM游戏的一堆石子的石子个数（至于多堆石子异或和为0先手必败就不用说了吧）</li>
<li>多个博弈游戏的sg值的异或和就是将这多个游戏组成一个大的游戏的sg值。</li>
</ol>


<p>那么在上面两个的基础上，就可以来证明了，首先，我们注意到，如果是一个圆套一个圆，那么这一组圆(假设有n个)就可以看成是一个个数为n的石子堆，其实就是说他的sg值为n(这个也可以通过sg的定义来证明出来)。假设一个圆内有很多个不互相包含的圆，那么每个圆都可以看作是一个游戏，这个游戏是有自己的sg值的，将这几个游戏取异或和，就会得到这个圆内所有游戏的sg值（设为sg1吧），那么这些游戏等效于一个sg值为sg1的游戏，也就是sg1个圆一个套一个，这时加上外面那个圆，其实对于外面一层来说，就相当于那个圆代表的游戏的sg值为sg1+1，这样就可以递归地得到所有游戏的sg值，得到最终的sg值。（刚开始就是猜想异或和加1，然后没有深入去想）。</p>

<p>至于圆的处理，也不算难吧，应该是扫瞄线的思想吧，用一个暴力点的方法，先对所有的圆按照最左侧的x坐标排序，然后依次扫描，每次扫描从当前位置开始往前的最近的那个圆是哪个，然后那个圆就是当前这个圆的父节点了，最终构成一棵树，每个节点代表一个圆，子节点代表圆内的圆，之后就按照之前所说的计算sg的方法来计算就行，终点节点为空圆，空圆内部没有圆，所以他内部的游戏sg值为0.</p>

<p><a href="http://whn757397540.github.io/acm/hdu/hdu5299">代码在此</a></p>

<p><a href="http://blog.sina.com.cn/u/5657719201">官网题解博客</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树状数组以及线段树总结]]></title>
    <link href="http://whn757397540.github.io/blog/2015/03/14/shu-zhuang-shu-zu-yi-ji-xian-duan-shu-zong-jie/"/>
    <updated>2015-03-14T18:57:26+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/03/14/shu-zhuang-shu-zu-yi-ji-xian-duan-shu-zong-jie</id>
    <content type="html"><![CDATA[<p>大年初一初二两天，除了玩儿，也就看了看这些，zkw线段树看了看，想了想还是放弃了；二维线段树看了看，马马虎虎敲了几道题，规范了下二维线段树的代码；二维树状数组重新回顾了一下，其实跟一维树状数组是完全一样的；然后重新看了看书上的树状数组，也是有一些收获的，接下来就谈一谈！</p>

<!--more-->


<p>这次先把该说的说了，最后集中看题。</p>

<p>首先，线段树我就不多做介绍了,只是来介绍下二维线段树的写法：二维线段树，简单来说，就是树套树，一个线段树的域是值，另一个线段树的域是那个线段树。具体的写法一会儿看我做的最后一道二维线段树的题目的代码，那时我整理过姿势后的板子！这里说下思路，就是通过第一个树来建树（域是线段树的树），这棵树维护的是第一维的区间，然后对应再每一个节点上建立一个线段树（域是值的树，假如称它为子树），这个维护的是第二位的区间；也就是说，子树是嵌套再外围的线段树里面的；其实不管是建树，更新还是查找，都是一棵树套一棵树，这些具体需要看着代码来理解会比较好，这里要说的一点，就是更新的时候，以单点更新为例，因为你要找到(x,y)这个点，我们想一下1维线段树，只需要找到目标节点更新值，然后递归更新回去就好；类比下二维，一样也应该是找到目标节点然后更新值，然后递归更新回去，但是关键就是，这个点除了要再第二维坐标上更新，还得在第一维坐标上更新，而且你找目标节点的时候，也不是只是l == r == y就好，还需要注意第一维坐标必须是在x处，但是又不能值更新第一维坐标是x的线段树，那么怎么办呢？其实看看代码就知道了，就是再更新的第一维的区间不是[x,x]，而是包含[x,x]区间的时候，记得在找到y这个位置的时候，更新下第一维的值就好！说的有点乱，还是等一会儿看代码好一些！</p>

<p>另外，zkw线段树放弃了，但是也不见得以后也不会看，只不过现在没有那个时间取研究而已！</p>

<p>接着，关于树状数组，我在之前的博客里面有讲过,<a href="http://hnnwang.github.io/blog/2014/07/23/shu-zhuang-shu-zu-zong-jie/">链接在这里</a>,里面提到了利用树状数组进行单点修改，区间查询、区间修改，单点查询、区间修改，区间查询的方法，但是那里面的区间修改，区间查询的方法，利用的是差分的思想，这里再来说一个再《挑战程序设计竞赛》中提到的多项式的方法，还是以<a href="http://poj.org/problem?id=3468">poj3468</a>为例，这个题在之前那个博客里面也有，那里面有利用差分方法的代码，这道题就是简单的一道区间修改区间查询的问题，我们进行如下推导：</p>

<p>如果给区间[l,r]同时加上x的话，那么每个节点的值将如何变化呢？我们设</p>

<p>s(i) = 加上x之前的sigma(a[1……i])；</p>

<p>ss(i) = 加上x之后的sigma(a[1……i])；</p>

<p>那么我们就有</p>

<p>i &lt; l → ss(i) = s(i);//区间里面的东西没有被改变</p>

<p>l &lt;= i &lt;= r → ss(i) = s(i) + (i-l+1) = s(i) + xi - x(l-1);</p>

<p>i > r → ss(i) = s(i) + x*(r-l+1)</p>

<p>那么下面我们如果及sum(bit, i)为树状数组bit的前i项和。我们构建两个树状数组bit0和bit1，并且设</p>

<p>sigma(a[1..i]) = sum(bit1,i)*i + sum(bit0,i);</p>

<p>那么再[l,r]区间上同时加上x就可以看成是</p>

<p>在bit0的l位置加上-x(l-1);//对应上面第二条的-x*(l-1)</p>

<p>在bit1的l位置加上x ;//在l之后(包括l)，每个都多加一个x</p>

<p>在bit0的r+1位置加上xr；//在i>r之后的式子中，跟在bit0的中加上的那个式子相比，少一个xr，所以加上xr，以保证再这之后的计算都是算的x*(r-l+1);</p>

<p>在bit1的r+1位置加上-x；在r+1之后(包括r+1)，每一个都减一个x，跟之前加的那个x抵消，从而达到指示[l,r]区间加的目的</p>

<p>这4个操作。因此，查询和更新的操作都可以在O（logn）的时间里完成。</p>

<p>更一般的，如果操作得到的结果可以用i的n次多项式来表示的话，那么就可以使用n+1个树状数组来进行维护了！至于代码就不贴了，这个只要推出公式来就简单了！</p>

<p>至于二维树状数组，非常简单，根本不用说。只要一会看一下一道题的代码就知道了，其实就是再一维树状数组的基础上加上了一维。</p>

<p>好了，接下来进入题目环节，简单的讲解几道题就好！</p>

<p>首先，一维线段树的，也是书上的例题</p>

<p><a href="http://poj.org/problem?id=2991">POJ 2991 Crane</a></p>

<p>这道题稍微用到了一些计算几何的知识，也就是个旋转而已；来说下怎么建树和维护，建树维护下面两个域: 一是第一条线段起点指向最后一条线段终点的向量； 二是（如果该节点有儿子节点），右儿子节点绕左儿子节点逆时针旋转的角度！</p>

<p>有了以上那两个域，就可以利用计算几何中的旋转公式来维护线段树了，这里说下计算几何上的旋转公式以及其推导方法！</p>

<p>假如向量p = (x,y) 绕原点旋转角度 β 到向量q = (x’, y’)，我们把直角坐标转换为极坐标，那么就应该是p=(lcosα， lsinα） 转动 β 到 q=(lcos(α+β), lsin(α+β)）， 运用三角函数和差公式可以得到 q = (lcosαcosβ - lsinαsinβ， lsinαcosβ + lcosαsinβ) = (xcosβ - ysinβ， xsinβ + ycosβ), 这可得旋转公式！</p>

<p>具体的维护细节就不说了，自己思考思考把，我的参考代码挂出来</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">maxn</span> <span class="o">=</span> <span class="mi">10050</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">double</span> <span class="n">PI</span> <span class="o">=</span> <span class="n">acos</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Point</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Point</span><span class="p">(){};</span>
</span><span class='line'>    <span class="n">Point</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="kt">double</span> <span class="n">y</span><span class="p">)</span><span class="o">:</span> <span class="n">x</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="n">y</span><span class="p">(</span><span class="n">y</span><span class="p">){};</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="k">operator</span> <span class="o">&lt;</span> <span class="p">(</span><span class="k">const</span> <span class="n">Point</span> <span class="n">p</span><span class="p">)</span><span class="k">const</span><span class="p">{</span><span class="k">return</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span> <span class="o">||</span> <span class="p">(</span><span class="n">x</span><span class="o">==</span><span class="n">p</span><span class="p">.</span><span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">);}</span>
</span><span class='line'>    <span class="n">Point</span> <span class="k">operator</span> <span class="o">-</span> <span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">){</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">);}</span>
</span><span class='line'>    <span class="n">Point</span> <span class="k">operator</span> <span class="o">+</span> <span class="p">(</span><span class="n">Point</span> <span class="n">p</span><span class="p">){</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">);}</span>
</span><span class='line'>    <span class="n">Point</span> <span class="n">rotate</span><span class="p">(</span><span class="kt">double</span> <span class="n">rad</span><span class="p">){</span><span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">cos</span><span class="p">(</span><span class="n">rad</span><span class="p">)</span> <span class="o">-</span> <span class="n">y</span><span class="o">*</span><span class="n">sin</span><span class="p">(</span><span class="n">rad</span><span class="p">),</span> <span class="n">x</span><span class="o">*</span><span class="n">sin</span><span class="p">(</span><span class="n">rad</span><span class="p">)</span> <span class="o">+</span> <span class="n">y</span><span class="o">*</span><span class="n">cos</span><span class="p">(</span><span class="n">rad</span><span class="p">));}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="n">Point</span> <span class="n">Vector</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Tree</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Vector</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">ang</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="n">a</span><span class="p">[</span><span class="mi">4</span><span class="o">*</span><span class="n">maxn</span><span class="p">];</span>
</span><span class='line'><span class="kt">double</span> <span class="n">rec</span><span class="p">[</span><span class="n">maxn</span><span class="p">];</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">buildTree</span><span class="p">(</span><span class="kt">int</span> <span class="n">now</span><span class="p">,</span><span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">lson</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">now</span><span class="p">,</span> <span class="n">rson</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">now</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">v</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">ang</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">l</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span>
</span><span class='line'>    <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">r</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">l</span> <span class="o">==</span> <span class="n">r</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span><span class="o">+</span><span class="n">r</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">buildTree</span><span class="p">(</span><span class="n">lson</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">mid</span><span class="p">);</span>
</span><span class='line'>    <span class="n">buildTree</span><span class="p">(</span><span class="n">rson</span><span class="p">,</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">Insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">now</span><span class="p">,</span> <span class="kt">int</span> <span class="n">aim</span><span class="p">,</span> <span class="n">Vector</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">l</span> <span class="o">==</span> <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">r</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">l</span> <span class="o">==</span> <span class="n">aim</span><span class="p">)</span>
</span><span class='line'>        <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">v</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">lson</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">now</span><span class="p">,</span> <span class="n">rson</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">now</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">l</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">r</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">aim</span> <span class="o">&gt;</span> <span class="n">mid</span><span class="p">)</span>
</span><span class='line'>            <span class="n">Insert</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">now</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">aim</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">Insert</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">now</span><span class="p">,</span> <span class="n">aim</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span><span class='line'>        <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">v</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">lson</span><span class="p">].</span><span class="n">v</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">rson</span><span class="p">].</span><span class="n">v</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">Change</span><span class="p">(</span><span class="kt">int</span> <span class="n">now</span><span class="p">,</span> <span class="kt">int</span> <span class="n">aim</span><span class="p">,</span> <span class="kt">double</span> <span class="n">ang</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">lson</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">now</span><span class="p">,</span> <span class="n">rson</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">now</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">lson</span><span class="p">].</span><span class="n">r</span> <span class="o">==</span> <span class="n">aim</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">ang</span> <span class="o">+=</span> <span class="n">ang</span> <span class="o">-</span> <span class="n">rec</span><span class="p">[</span><span class="n">aim</span><span class="p">];</span>
</span><span class='line'>        <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">v</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">lson</span><span class="p">].</span><span class="n">v</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">rson</span><span class="p">].</span><span class="n">v</span><span class="p">.</span><span class="n">rotate</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">ang</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">l</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">r</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">aim</span> <span class="o">&lt;=</span> <span class="n">mid</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Change</span><span class="p">(</span><span class="n">lson</span><span class="p">,</span> <span class="n">aim</span><span class="p">,</span> <span class="n">ang</span><span class="p">);</span>
</span><span class='line'>        <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">ang</span> <span class="o">+=</span> <span class="n">ang</span> <span class="o">-</span> <span class="n">rec</span><span class="p">[</span><span class="n">aim</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">Change</span><span class="p">(</span><span class="n">rson</span><span class="p">,</span> <span class="n">aim</span><span class="p">,</span> <span class="n">ang</span><span class="p">);</span>
</span><span class='line'>    <span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">v</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">lson</span><span class="p">].</span><span class="n">v</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">rson</span><span class="p">].</span><span class="n">v</span><span class="p">.</span><span class="n">rotate</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">ang</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">c</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">~</span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">buildTree</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">w</span><span class="p">;</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">w</span><span class="p">);</span>
</span><span class='line'>            <span class="n">Insert</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">Point</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">w</span><span class="p">));</span>
</span><span class='line'>            <span class="n">rec</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">PI</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">c</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>            <span class="kt">double</span> <span class="n">ang</span><span class="p">;</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%lf&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ang</span><span class="p">);</span>
</span><span class='line'>            <span class="kt">double</span> <span class="n">rad</span> <span class="o">=</span> <span class="n">ang</span><span class="o">/</span><span class="mi">180</span><span class="o">*</span><span class="n">PI</span><span class="p">;</span>
</span><span class='line'>            <span class="c1">//cout&lt;&lt;rad&lt;&lt;endl;</span>
</span><span class='line'>            <span class="n">Change</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">rad</span><span class="p">);</span>
</span><span class='line'>            <span class="n">rec</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="n">rad</span><span class="p">;</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%.2f %.2f</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">v</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">v</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，二维线段树：</p>

<p><a href="http://poj.org/problem?id=2155">poj2155 Matrix</a></p>

<p>这道题，解法十分简单，是道基础题，用到了一个思想，就是对于区间的更新，可以不用懒标记，只是重新维护一个域，然后不下传，最后求结果的时候从最底层回溯上去，或者在从上向下找结果的时候，顺便根据维护的那个域进行更新。这道题就是，因为操作一次就改变一次0或者1，所以只需要找到操作的区间，然后记录次数，最后算结果的时候看找结果总共操作了多少次，从而求出答案，（当然，不用记录次数，直接跟1取异或即可），这是我的第一个代码,有点丑，必经是自己写的,还是第一次，不要以这个为参考。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;queue&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define mid  ((l+r)&gt;&gt;1)</span>
</span><span class='line'><span class="cp">#define lson (now&lt;&lt;1)</span>
</span><span class='line'><span class="cp">#define rson (lson|1)</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">maxn</span> <span class="o">=</span> <span class="mi">1010</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">maxe</span> <span class="o">=</span> <span class="mi">20200</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">INF</span> <span class="o">=</span> <span class="mh">0x3f3f3f3f</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Tree2</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">,</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Tree1</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Tree2</span> <span class="n">T2</span><span class="p">[</span><span class="n">maxn</span><span class="o">&lt;&lt;</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="n">T1</span><span class="p">[</span><span class="n">maxn</span><span class="o">&lt;&lt;</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">maxn</span><span class="p">][</span><span class="n">maxn</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">Q</span><span class="p">,</span><span class="n">X</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">x1</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">x2</span><span class="p">,</span> <span class="n">y2</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">ans</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">buildTree2</span><span class="p">(</span><span class="n">Tree1</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">,</span> <span class="kt">int</span> <span class="n">now</span><span class="p">,</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">T</span><span class="p">.</span><span class="n">T2</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">l</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span>
</span><span class='line'>    <span class="n">T</span><span class="p">.</span><span class="n">T2</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">r</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="n">T</span><span class="p">.</span><span class="n">T2</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">data</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">l</span> <span class="o">==</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="n">buildTree2</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">lson</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">mid</span><span class="p">);</span>
</span><span class='line'>    <span class="n">buildTree2</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">rson</span><span class="p">,</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">buildTree1</span><span class="p">(</span><span class="kt">int</span> <span class="n">now</span><span class="p">,</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">T1</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">l</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span>
</span><span class='line'>    <span class="n">T1</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">r</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="n">buildTree2</span><span class="p">(</span><span class="n">T1</span><span class="p">[</span><span class="n">now</span><span class="p">],</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">l</span> <span class="o">==</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="n">buildTree1</span><span class="p">(</span><span class="n">lson</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">mid</span><span class="p">);</span>
</span><span class='line'>    <span class="n">buildTree1</span><span class="p">(</span><span class="n">rson</span><span class="p">,</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">update2</span><span class="p">(</span><span class="n">Tree1</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">,</span> <span class="kt">int</span> <span class="n">now</span><span class="p">,</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">l</span> <span class="o">==</span> <span class="n">T</span><span class="p">.</span><span class="n">T2</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">l</span> <span class="o">&amp;&amp;</span> <span class="n">r</span> <span class="o">==</span> <span class="n">T</span><span class="p">.</span><span class="n">T2</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">T</span><span class="p">.</span><span class="n">T2</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">data</span> <span class="o">^=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">r</span> <span class="o">&lt;=</span> <span class="n">T</span><span class="p">.</span><span class="n">T2</span><span class="p">[</span><span class="n">lson</span><span class="p">].</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'>        <span class="n">update2</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">lson</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">l</span> <span class="o">&gt;=</span> <span class="n">T</span><span class="p">.</span><span class="n">T2</span><span class="p">[</span><span class="n">rson</span><span class="p">].</span><span class="n">l</span><span class="p">)</span>
</span><span class='line'>        <span class="n">update2</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">rson</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">update2</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">lson</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">T</span><span class="p">.</span><span class="n">T2</span><span class="p">[</span><span class="n">lson</span><span class="p">].</span><span class="n">r</span><span class="p">);</span>
</span><span class='line'>        <span class="n">update2</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">rson</span><span class="p">,</span> <span class="n">T</span><span class="p">.</span><span class="n">T2</span><span class="p">[</span><span class="n">rson</span><span class="p">].</span><span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">update1</span><span class="p">(</span><span class="kt">int</span> <span class="n">now</span><span class="p">,</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">l</span> <span class="o">==</span> <span class="n">T1</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">l</span> <span class="o">&amp;&amp;</span> <span class="n">r</span> <span class="o">==</span> <span class="n">T1</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">update2</span><span class="p">(</span><span class="n">T1</span><span class="p">[</span><span class="n">now</span><span class="p">],</span> <span class="mi">1</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">y2</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">r</span> <span class="o">&lt;=</span> <span class="n">T1</span><span class="p">[</span><span class="n">lson</span><span class="p">].</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'>        <span class="n">update1</span><span class="p">(</span><span class="n">lson</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">l</span> <span class="o">&gt;=</span> <span class="n">T1</span><span class="p">[</span><span class="n">rson</span><span class="p">].</span><span class="n">l</span><span class="p">)</span>
</span><span class='line'>        <span class="n">update1</span><span class="p">(</span><span class="n">rson</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">update1</span><span class="p">(</span><span class="n">lson</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">T1</span><span class="p">[</span><span class="n">lson</span><span class="p">].</span><span class="n">r</span><span class="p">);</span>
</span><span class='line'>        <span class="n">update1</span><span class="p">(</span><span class="n">rson</span><span class="p">,</span> <span class="n">T1</span><span class="p">[</span><span class="n">rson</span><span class="p">].</span><span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">Search2</span><span class="p">(</span><span class="n">Tree1</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">,</span> <span class="kt">int</span> <span class="n">now</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">ans</span> <span class="o">^=</span> <span class="n">T</span><span class="p">.</span><span class="n">T2</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">y</span> <span class="o">==</span> <span class="n">T</span><span class="p">.</span><span class="n">T2</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">l</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">==</span> <span class="n">T</span><span class="p">.</span><span class="n">T2</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">y</span> <span class="o">&lt;=</span> <span class="n">T</span><span class="p">.</span><span class="n">T2</span><span class="p">[</span><span class="n">lson</span><span class="p">].</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Search2</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">lson</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">Search2</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">rson</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">Search1</span><span class="p">(</span><span class="kt">int</span> <span class="n">now</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Search2</span><span class="p">(</span><span class="n">T1</span><span class="p">[</span><span class="n">now</span><span class="p">],</span> <span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">T1</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">l</span> <span class="o">==</span> <span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">T1</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">r</span> <span class="o">==</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;=</span> <span class="n">T1</span><span class="p">[</span><span class="n">lson</span><span class="p">].</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Search1</span><span class="p">(</span><span class="n">lson</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">Search1</span><span class="p">(</span><span class="n">rson</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">X</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">X</span><span class="o">--</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">//cout&lt;&lt;X&lt;&lt;endl;</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">Q</span><span class="p">);</span>
</span><span class='line'>        <span class="n">buildTree1</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">order</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">//cout&lt;&lt;Q&lt;&lt;endl;</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="n">Q</span><span class="o">--</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">order</span><span class="p">);</span>
</span><span class='line'>            <span class="c1">//cout&lt;&lt;Q&lt;&lt;endl;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">order</span> <span class="o">==</span> <span class="sc">&#39;C&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d%d%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">x1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">y1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">x2</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">y2</span><span class="p">);</span>
</span><span class='line'>                <span class="n">update1</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">x1</span><span class="p">,</span> <span class="n">x2</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">order</span> <span class="o">==</span> <span class="sc">&#39;Q&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'>                <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>                <span class="n">Search1</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">ans</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>       <span class="c1">// cout&lt;&lt;X&lt;&lt;endl;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//system(&quot;pause&quot;);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://poj.org/problem?id=4819">hdu4819 Mosaic</a></p>

<p>这是一道简单的二维线段树RMQ问题，就是利用二维线段树更新的思想进行更新，参考一维线段树的RMQ的方法就好，注意在前面说的那几点。这道题的代码是经过我的整理的，虽然很麻烦，但也应该很清楚。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;queue&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define mid  ((l+r)&gt;&gt;1)</span>
</span><span class='line'><span class="cp">#define lson (now&lt;&lt;1)</span>
</span><span class='line'><span class="cp">#define rson (lson|1)</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">maxn</span> <span class="o">=</span> <span class="mi">1010</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">INF</span> <span class="o">=</span> <span class="mi">0</span><span class="n">X3F3F3F3F</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Sub_tree</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mindat</span><span class="p">,</span><span class="n">maxdat</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Tree</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Sub_tree</span> <span class="n">st</span><span class="p">[</span><span class="n">maxn</span><span class="o">&lt;&lt;</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="n">t</span><span class="p">[</span><span class="n">maxn</span><span class="o">&lt;&lt;</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">maxn</span><span class="p">][</span><span class="n">maxn</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">ans</span><span class="p">,</span> <span class="n">ansmax</span><span class="p">,</span> <span class="n">ansmin</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">build_sub_tree</span><span class="p">(</span><span class="kt">int</span> <span class="n">u</span><span class="p">,</span> <span class="kt">int</span> <span class="n">now</span><span class="p">,</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Sub_tree</span> <span class="o">*</span><span class="n">st</span> <span class="o">=</span> <span class="n">t</span><span class="p">[</span><span class="n">u</span><span class="p">].</span><span class="n">st</span><span class="p">;</span>
</span><span class='line'>    <span class="n">st</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">l</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span> <span class="n">st</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">r</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span> <span class="n">st</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">mindat</span> <span class="o">=</span> <span class="n">INF</span><span class="p">;</span> <span class="n">st</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">maxdat</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">l</span> <span class="o">==</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="c1">// st[now].mindat = st[now].maxdat = a[u][l];</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">build_sub_tree</span><span class="p">(</span><span class="n">u</span><span class="p">,</span> <span class="n">lson</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">mid</span><span class="p">);</span>
</span><span class='line'>    <span class="n">build_sub_tree</span><span class="p">(</span><span class="n">u</span><span class="p">,</span> <span class="n">rson</span><span class="p">,</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>    <span class="n">st</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">mindat</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">st</span><span class="p">[</span><span class="n">lson</span><span class="p">].</span><span class="n">mindat</span><span class="p">,</span> <span class="n">st</span><span class="p">[</span><span class="n">rson</span><span class="p">].</span><span class="n">mindat</span><span class="p">);</span>
</span><span class='line'>    <span class="n">st</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">maxdat</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">st</span><span class="p">[</span><span class="n">lson</span><span class="p">].</span><span class="n">maxdat</span><span class="p">,</span> <span class="n">st</span><span class="p">[</span><span class="n">rson</span><span class="p">].</span><span class="n">maxdat</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">build_tree</span><span class="p">(</span><span class="kt">int</span> <span class="n">now</span><span class="p">,</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">t</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">l</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span> <span class="n">t</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">r</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="n">build_sub_tree</span><span class="p">(</span><span class="n">now</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">l</span> <span class="o">==</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="n">build_tree</span><span class="p">(</span><span class="n">lson</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">mid</span><span class="p">);</span>
</span><span class='line'>    <span class="n">build_tree</span><span class="p">(</span><span class="n">rson</span><span class="p">,</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">search_sub_tree</span><span class="p">(</span><span class="kt">int</span> <span class="n">u</span><span class="p">,</span> <span class="kt">int</span> <span class="n">now</span><span class="p">,</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Sub_tree</span> <span class="o">*</span><span class="n">st</span> <span class="o">=</span> <span class="n">t</span><span class="p">[</span><span class="n">u</span><span class="p">].</span><span class="n">st</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">st</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">l</span> <span class="o">==</span> <span class="n">l</span> <span class="o">&amp;&amp;</span> <span class="n">st</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">r</span> <span class="o">==</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">ansmax</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">st</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">maxdat</span><span class="p">,</span> <span class="n">ansmax</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ansmin</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">st</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">mindat</span><span class="p">,</span> <span class="n">ansmin</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">MID</span> <span class="o">=</span> <span class="n">st</span><span class="p">[</span><span class="n">lson</span><span class="p">].</span><span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">r</span> <span class="o">&lt;=</span> <span class="n">MID</span><span class="p">)</span>
</span><span class='line'>        <span class="n">search_sub_tree</span><span class="p">(</span><span class="n">u</span><span class="p">,</span> <span class="n">lson</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">l</span> <span class="o">&gt;</span> <span class="n">MID</span><span class="p">)</span>
</span><span class='line'>        <span class="n">search_sub_tree</span><span class="p">(</span><span class="n">u</span><span class="p">,</span> <span class="n">rson</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">search_sub_tree</span><span class="p">(</span><span class="n">u</span><span class="p">,</span> <span class="n">lson</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">MID</span><span class="p">);</span>
</span><span class='line'>        <span class="n">search_sub_tree</span><span class="p">(</span><span class="n">u</span><span class="p">,</span> <span class="n">rson</span><span class="p">,</span> <span class="n">MID</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">search_tree</span><span class="p">(</span><span class="kt">int</span> <span class="n">now</span><span class="p">,</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">,</span> <span class="kt">int</span> <span class="n">l2</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r2</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">l</span> <span class="o">==</span> <span class="n">l</span> <span class="o">&amp;&amp;</span> <span class="n">t</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">r</span> <span class="o">==</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">search_sub_tree</span><span class="p">(</span><span class="n">now</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">l2</span><span class="p">,</span> <span class="n">r2</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">MID</span> <span class="o">=</span> <span class="n">t</span><span class="p">[</span><span class="n">lson</span><span class="p">].</span><span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">r</span> <span class="o">&lt;=</span> <span class="n">MID</span><span class="p">)</span>
</span><span class='line'>        <span class="n">search_tree</span><span class="p">(</span><span class="n">lson</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">l2</span><span class="p">,</span> <span class="n">r2</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">l</span> <span class="o">&gt;</span> <span class="n">MID</span><span class="p">)</span>
</span><span class='line'>        <span class="n">search_tree</span><span class="p">(</span><span class="n">rson</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">l2</span><span class="p">,</span> <span class="n">r2</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">search_tree</span><span class="p">(</span><span class="n">lson</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">MID</span><span class="p">,</span> <span class="n">l2</span><span class="p">,</span> <span class="n">r2</span><span class="p">);</span>
</span><span class='line'>        <span class="n">search_tree</span><span class="p">(</span><span class="n">rson</span><span class="p">,</span> <span class="n">MID</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">l2</span><span class="p">,</span> <span class="n">r2</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">update_sub_tree</span><span class="p">(</span><span class="kt">int</span> <span class="n">u</span><span class="p">,</span> <span class="kt">int</span> <span class="n">now</span><span class="p">,</span> <span class="kt">int</span> <span class="n">aim</span><span class="p">,</span> <span class="kt">int</span> <span class="n">dat</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Sub_tree</span> <span class="o">*</span><span class="n">st</span> <span class="o">=</span> <span class="n">t</span><span class="p">[</span><span class="n">u</span><span class="p">].</span><span class="n">st</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">st</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">r</span> <span class="o">==</span> <span class="n">st</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">l</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="n">u</span><span class="p">].</span><span class="n">l</span> <span class="o">==</span> <span class="n">t</span><span class="p">[</span><span class="n">u</span><span class="p">].</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'>            <span class="n">st</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">mindat</span> <span class="o">=</span> <span class="n">st</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">maxdat</span> <span class="o">=</span> <span class="n">dat</span><span class="p">;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">st</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">mindat</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="n">u</span><span class="o">&lt;&lt;</span><span class="mi">1</span><span class="p">].</span><span class="n">st</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">mindat</span><span class="p">,</span> <span class="n">t</span><span class="p">[</span><span class="n">u</span><span class="o">&lt;&lt;</span><span class="mi">1</span><span class="o">|</span><span class="mi">1</span><span class="p">].</span><span class="n">st</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">mindat</span><span class="p">);</span>
</span><span class='line'>            <span class="n">st</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">maxdat</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="n">u</span><span class="o">&lt;&lt;</span><span class="mi">1</span><span class="p">].</span><span class="n">st</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">maxdat</span><span class="p">,</span> <span class="n">t</span><span class="p">[</span><span class="n">u</span><span class="o">&lt;&lt;</span><span class="mi">1</span><span class="o">|</span><span class="mi">1</span><span class="p">].</span><span class="n">st</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">maxdat</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">MID</span> <span class="o">=</span> <span class="n">st</span><span class="p">[</span><span class="n">lson</span><span class="p">].</span><span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">aim</span> <span class="o">&lt;=</span> <span class="n">MID</span><span class="p">)</span>
</span><span class='line'>        <span class="n">update_sub_tree</span><span class="p">(</span><span class="n">u</span><span class="p">,</span> <span class="n">lson</span><span class="p">,</span> <span class="n">aim</span><span class="p">,</span> <span class="n">dat</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">update_sub_tree</span><span class="p">(</span><span class="n">u</span><span class="p">,</span> <span class="n">rson</span><span class="p">,</span> <span class="n">aim</span><span class="p">,</span> <span class="n">dat</span><span class="p">);</span>
</span><span class='line'>    <span class="n">st</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">mindat</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">st</span><span class="p">[</span><span class="n">lson</span><span class="p">].</span><span class="n">mindat</span><span class="p">,</span> <span class="n">st</span><span class="p">[</span><span class="n">rson</span><span class="p">].</span><span class="n">mindat</span><span class="p">);</span>
</span><span class='line'>    <span class="n">st</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">maxdat</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">st</span><span class="p">[</span><span class="n">lson</span><span class="p">].</span><span class="n">maxdat</span><span class="p">,</span> <span class="n">st</span><span class="p">[</span><span class="n">rson</span><span class="p">].</span><span class="n">maxdat</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">update_tree</span><span class="p">(</span><span class="kt">int</span> <span class="n">now</span><span class="p">,</span> <span class="kt">int</span> <span class="n">aim1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">aim2</span><span class="p">,</span> <span class="kt">int</span> <span class="n">dat</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">l</span> <span class="o">==</span> <span class="n">t</span><span class="p">[</span><span class="n">now</span><span class="p">].</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">update_sub_tree</span><span class="p">(</span><span class="n">now</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">aim2</span><span class="p">,</span> <span class="n">dat</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">MID</span> <span class="o">=</span> <span class="n">t</span><span class="p">[</span><span class="n">lson</span><span class="p">].</span><span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">aim1</span> <span class="o">&lt;=</span> <span class="n">MID</span><span class="p">)</span>
</span><span class='line'>        <span class="n">update_tree</span><span class="p">(</span><span class="n">lson</span><span class="p">,</span> <span class="n">aim1</span><span class="p">,</span> <span class="n">aim2</span><span class="p">,</span> <span class="n">dat</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">update_tree</span><span class="p">(</span><span class="n">rson</span><span class="p">,</span> <span class="n">aim1</span><span class="p">,</span> <span class="n">aim2</span><span class="p">,</span> <span class="n">dat</span><span class="p">);</span>
</span><span class='line'>    <span class="n">update_sub_tree</span><span class="p">(</span><span class="n">now</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">aim2</span><span class="p">,</span> <span class="n">dat</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">T</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ks</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">T</span><span class="o">--</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Case #%d:</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">++</span><span class="n">ks</span><span class="p">);</span>
</span><span class='line'>        <span class="n">build_tree</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>                <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">d</span><span class="p">);</span>
</span><span class='line'>                <span class="n">update_tree</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">d</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">l</span><span class="p">;</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">y</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">l</span><span class="p">);</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">x1</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="n">l</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">x2</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="n">l</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">n</span><span class="p">),</span> <span class="n">y1</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">y</span><span class="o">-</span><span class="n">l</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">y2</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">y</span><span class="o">+</span><span class="n">l</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>            <span class="n">ansmax</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">ansmin</span> <span class="o">=</span> <span class="n">INF</span><span class="p">;</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="c1">//cout&lt;&lt;1&lt;&lt;endl;</span>
</span><span class='line'>            <span class="n">search_tree</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">x1</span><span class="p">,</span> <span class="n">x2</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">y2</span><span class="p">);</span>
</span><span class='line'>            <span class="n">ans</span> <span class="o">=</span> <span class="p">(</span><span class="n">ansmax</span><span class="o">+</span><span class="n">ansmin</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>           <span class="c1">// cout&lt;&lt;ans&lt;&lt;endl;</span>
</span><span class='line'>            <span class="n">update_tree</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">ans</span><span class="p">);</span>
</span><span class='line'>            <span class="c1">//cout&lt;&lt;3&lt;&lt;endl;</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">ans</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>还有一道题，也是RMQ的，不打算写出来了，白白浪费了我好久的时间，总感觉自己没错，但是总也过不了，后来拿网上题解的代码去交，百度前2页的都过不了，我就郁闷了，怀疑是那道题的数据或者什么的出现了问题，后来放弃了，上面那个hdu4819就是我放弃这个之后重新找的一道题，由于都是RMQ，所以也差不多啦！</p>

<p>然后，二维树状数组，一道基础题：</p>

<p><a href="http://poj.org/problem?id=1195">POJ1195 Mobile phones</a></p>

<p>题意简单，代码也简单，不讲了，就挂个代码,纯属为了给一个二维树状数组的例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">//poj1195 二维树状数组</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#define N 1025</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">S</span><span class="p">,</span><span class="n">C</span><span class="p">[</span><span class="n">N</span><span class="p">][</span><span class="n">N</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">Lowbit</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">n</span><span class="o">&amp;</span><span class="p">(</span><span class="n">n</span><span class="o">^</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">Update</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="n">y</span><span class="p">,</span><span class="kt">int</span> <span class="n">delta</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">S</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="n">Lowbit</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">S</span><span class="p">;</span> <span class="n">j</span> <span class="o">+=</span> <span class="n">Lowbit</span><span class="p">(</span><span class="n">j</span><span class="p">))</span>
</span><span class='line'>          <span class="n">C</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">delta</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">getSum</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">-=</span> <span class="n">Lowbit</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">-=</span> <span class="n">Lowbit</span><span class="p">(</span><span class="n">j</span><span class="p">))</span>
</span><span class='line'>            <span class="n">result</span><span class="o">+=</span><span class="n">C</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">Ins</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">Ins</span><span class="p">),</span><span class="n">Ins</span> <span class="o">!=</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">Ins</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">S</span><span class="p">);</span>
</span><span class='line'>          <span class="n">memset</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">C</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">Ins</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>          <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">X</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">Y</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>          <span class="n">Update</span><span class="p">(</span><span class="n">X</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">Y</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">Ins</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">L</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">R</span><span class="p">,</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'>          <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d%d%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">L</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">B</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">R</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">sum</span><span class="o">=</span><span class="n">getSum</span><span class="p">(</span><span class="n">R</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">T</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">getSum</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">B</span><span class="p">)</span> <span class="o">-</span> <span class="n">getSum</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">T</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="n">getSum</span><span class="p">(</span><span class="n">R</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">B</span><span class="p">);</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">sum</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，K-th Number问题：</p>

<p>poj2104 K-th Number</p>

<p>这也是桶分法，平方分割那一节的例题，这里说两种方法。</p>

<p>第一是平方分割（桶分）法.首先，我们需要转换一下问题，直接去求某个区间的第k大数是很难的，但是，它只有100000个数，我们可以先假定一个数，然后看它是第几大数，用二分答案法来找到答案。（当然，这个得要求是有序的），这样，我们就变成了求k是要求区间的第几大数这个问题，接下来我们要想怎么解决这个问题。</p>

<p>先把所有的数分到几个桶里，每个桶的容量都是一样的，然后对每个桶里数进行排序；之后查询的时候，假如区间为[l,r]，没有完全被包含再[l,r]内的区间（最多2个）直接暴力判断，包含在内的，在排好序的桶里面用二分法比x小的总共有多少个。</p>

<p>具体复杂度看桶的大小而定，设桶的大小为B,则复杂度为O（(n/B)logB + B）;</p>

<p>总体算法的复杂度为O(nlogn + mlogn*((n/B)logB + B)));</p>

<p>第二种方法，线段树，或者说，归并树。这次的线段树不是动态的，而是静态的，直接说说方法吧！</p>

<p>线段树存储一个域，这个域存的是对应区间排好序的数组（是数组），要计算再某个区间中不超过x的数的个数，只需要递归的进行下面的操作就行：</p>

<p>如果所给区间与当前节点区间没交集，返回0；</p>

<p>如果所给区间完全包含当前节点对应的区间，那么就使用二分法对该点上保存的数组进行查找；</p>

<p>否则对两个儿子递归的进行计算求得结果；</p>

<p>时间复杂度是O(nlogn + mlog3n).</p>

<p>两种方法的参考代码都在<a href="http://whn757397540.github.io/acm/poj/poj2104/">这里</a></p>

<p>这里提一下，再第二种方法里面用到的一个STL函数，merge.</p>

<p>merge(a, a+n, b, b+n, c) 进行的操作是把数组a和数组b的前n项合并，存在数组c中！</p>

<p>还有，《统计的力量》中也有提到这个，不过我没太看懂怎么去敲！</p>

<p>好了，这次就到这里吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[坐标离散化]]></title>
    <link href="http://whn757397540.github.io/blog/2015/03/14/zuo-biao-chi-san-hua/"/>
    <updated>2015-03-14T18:57:05+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/03/14/zuo-biao-chi-san-hua</id>
    <content type="html"><![CDATA[<h4>坐标离散化</h4>

<!--more-->


<p>简单提一下，以后碰到例题再补充进来</p>

<p>这种方法适合坐标系非常大，线段比较稀疏的情况，原型就是给你坐标系和一些水平或者竖直的线段（可能有宽度是矩形，可能没宽度），然后问你这些把坐标系分成了几部分。</p>

<p>方法就是把坐标离散化，再不影响区块的情况下尽可能地拉近线段之间的距离！具体的写法参考《挑战程序设计竞赛》P165，今天一次性写的有点多，我就不继续敲他给的代码了，先占楼,回头碰到用到这种方法的题目的时候再说吧!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[折半枚举]]></title>
    <link href="http://whn757397540.github.io/blog/2015/03/14/zhe-ban-mei-ju/"/>
    <updated>2015-03-14T18:56:56+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/03/14/zhe-ban-mei-ju</id>
    <content type="html"><![CDATA[<p>这个，也是一种优化技巧，其思想来源于传统的双向搜索！</p>

<p>要点: 把要枚举的多个东西分成2部分分开来进行枚举，从而达到降低时间复杂度的目的，实际上是一种牺牲空间换取时间的方法，分成两部分来枚举的时候，就是先枚举一部分存起来，再根据存起来的这部分对剩下的一部分进行枚举。光说也看不出效果来，来看一道题。</p>

<!--more-->


<p><a href="http://poj.org/problem?id=2785">POJ 2785 4 Values whose Sum is 0</a></p>

<p>就是给你4个序列，让你从每个序列中选一个数使得4个数和为0，问总共有几种方法（统一序列数值相同的数字区别看待）？</p>

<p>这个如果按照正常的方法直接枚举的话，复杂度是O(n<sup>4</sup>)，但是如果我们先来枚举一半，看a+b+c+d = 0,则 c+d = -(a+b)，我们可以先枚举c和d的选取方法，总共是n<sup>2</sup>种，复杂的自然就是n2，然后再把这几个数字存起来进行排序，之后再枚举a+b,利用a+b是c+d的相反数这个性质，利用二分搜索，可以再每次用logn的时间找出对应的c+d，而枚举a+b复杂度是n<sup>2</sup>，综上，复杂度为O(n<sup>2</sup> logn).</p>

<p>参考代码理解一下就好。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;queue&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">INF</span> <span class="o">=</span> <span class="mh">0x3f3f3f3f</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">maxn</span> <span class="o">=</span> <span class="mi">4010</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">maxn</span><span class="p">],</span><span class="n">b</span><span class="p">[</span><span class="n">maxn</span><span class="p">],</span><span class="n">c</span><span class="p">[</span><span class="n">maxn</span><span class="p">],</span><span class="n">d</span><span class="p">[</span><span class="n">maxn</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">cd</span><span class="p">[</span><span class="n">maxn</span><span class="o">*</span><span class="n">maxn</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d%d%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">cd</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="n">n</span><span class="o">+</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="n">d</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>    <span class="n">sort</span><span class="p">(</span><span class="n">cd</span><span class="p">,</span> <span class="n">cd</span><span class="o">+</span><span class="n">n</span><span class="o">*</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">long</span> <span class="kt">long</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">ab</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">b</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>            <span class="n">ans</span> <span class="o">+=</span> <span class="n">upper_bound</span><span class="p">(</span><span class="n">cd</span><span class="p">,</span> <span class="n">cd</span><span class="o">+</span><span class="n">n</span><span class="o">*</span><span class="n">n</span><span class="p">,</span> <span class="o">-</span><span class="n">ab</span><span class="p">)</span> <span class="o">-</span> <span class="n">lower_bound</span><span class="p">(</span><span class="n">cd</span><span class="p">,</span> <span class="n">cd</span><span class="o">+</span><span class="n">n</span><span class="o">*</span><span class="n">n</span><span class="p">,</span> <span class="o">-</span><span class="n">ab</span><span class="p">);</span>
</span><span class='line'>           <span class="cm">/* if (ans != 0)</span>
</span><span class='line'><span class="cm">                cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;&lt;&lt;b[i]&lt;&lt;&quot; &quot;&lt;&lt;ans&lt;&lt;endl;</span>
</span><span class='line'><span class="cm">            system(&quot;pause&quot;);*/</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%I64d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">ans</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外一个例子就是超大背包问题，就是背包问题，不过限制条件不适合用dp：1&lt;=n&lt;=40, 1&lt;= w[i],v[i] &lt;= 10<sup>15</sup>, 1&lt;W&lt;10<sup>15</sup>;</p>

<p>n比较小，就考虑能不能枚举，但是直接枚举复杂度是2n, 240铁定是不行的，所以，需要再优化。这时，就可以利用折半枚举，把所有的物品拆成2部分，先选一半，再选一半。实际上就是先枚举一半（2<sup>20</sup>），假设枚举的这一半是w2,v2。存起来后，我们可以排除掉所有的w2[i]&lt;=w2[j] &amp;&amp; v2[i] >= v2[j]的j,按照w,v的字典序排序后很容易做到这一点。之后声誉的元素都满足w2[i]&lt;w2[j]等价与v2[i]&lt;v2[j]，我们要计算的是max{v2| w2&lt;= W-w1},就只需要找到满足w2[i]&lt;= W-w1[i]的最大的i就行，这个可以用二分搜索完成。复杂度是O（2<sup>n</sup>/2 * n）,是可以在时限内完成的！</p>

<p>总结：对于枚举情况很多的时候，并且跟顺序有关的时候，可以折半，先枚举一半存起来，然后用二分查找的方法降低复杂度！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开关问题]]></title>
    <link href="http://whn757397540.github.io/blog/2015/03/14/kai-guan-wen-ti/"/>
    <updated>2015-03-14T18:56:21+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/03/14/kai-guan-wen-ti</id>
    <content type="html"><![CDATA[<p>反转问题，开关问题，关灯问题！这是一个什么样的问题呢？说实话，我也不清楚，那就不清楚地说一说呗！先来看两个题，再根据这两个题再来分析下这是一个什么样的问题！</p>

<!--more-->


<p><a href="http://poj.org/problem?id=3276">POJ3276 Face The Right Way</a></p>

<p>简单说下题意，给你n头牛的朝向(B向后F向前)，给你一台机器，机器的作用是，你先要指定一个k，然后机器每次操作反转严格的k头牛的方向（B变F，F变B）。问让所有的牛朝前最少需要反转几次，对应的K是多少（如果次数相同，输出最小的K）。</p>

<p>首先，区间的反转顺序对于结果是没有影响的；其次，如果对同一个区间反转2次以上是多余的；有以上两点，问题就转变成了求需要被反转的空间的集合。</p>

<p>那么我们就考虑最前面一头牛，如果这头牛需要反转，那么包含这头牛的区间只有1个，所以这个区间就必须要反转；在把这头牛反转之后，在剩下的牛里面再选取最前面的一头，依然是一样的。所以我们就可以通过首先考虑最左端的牛，然后不断重复最终求出结果了！</p>

<p>以上便是这种方法的精髓。可是如果我们直接按照这种方法来模拟的话，我们来分析下复杂度，首先，需要对所有可能的K都求解一次（N）,然后，对于每个K，我们都要从最左端考虑N头牛的情况，最坏的情况下又需要进行N-K+1次反转操作，每次操作需要反转K头牛，所以总的复杂度是O（N3）,这个显然，对于5000的问题规模，现在是不能在规定的时间内解决的！所以，我们需要优化。（这个不属于这种方法的内容）</p>

<p>这个，我们可以设一个f[i]代表区间[i,i+K-1]是否进行过反转，反转过就为1，否则为0.那么对于某头牛，我们只需要考虑在它之前的包括它的区间反转次数的和，而我们求的时候是按照顺序来的，所以这个和也可以用O（1）的时间求出来。举个例子，再这个和sum从i-1向i转移的过程中，很显然需要sum-f[i-k]（因为f[i-k]不包括牛i），根据这个sum求出f[i]来，再把f[i]加入到sum中就好，具体看看<a href="http://whn757397540.github.io/acm/poj/poj3276/">代码</a>应该也挺容易懂的.</p>

<p><a href="http://poj.org/problem?id=3279">POJ3279 Fliptile</a></p>

<p>这个题意也好理解，给你一个m×n的格子，每个格子可能是黑色（1）或者白色（0）,然后你可以进行的操作是可以选择一个格子进行反转，那个格子反转会带动周围的4个格子（上下左右）也反转，问题是最少进行多少步能够把所有的格子反转成白色，如果没有可能，输出IMPOSSIBLE,否则输出字典序最小的反转方案。</p>

<p>跟上一题一样的分析方法，首先，对同一个格子进行2次以上的反转是多余的；其次，反转的格子的顺序对结果是没有影响的！那么接下来，我们需要考虑找到一个可以确定反转方法的最靠前位置的格子（就像上一题最前面的那头牛一样）。但是，假如当前只考虑这些格子的左上角一个格子[i,j]的话，当前还没有确定反转方向的格子中，除了[i,j]之外，实际上还有[i+1,j],[i,j+1]两个个格子可能对他产生影响，所以我们不能非常容易地确定某个格子是不是必须要反转，所以我们要想办法把不确定因素减少。考虑下，假如我们把最上面一行的反转情况固定了，那么，能够影响到最左上角[i,j]的就只有[i+1,j]这一个位置（[i,j],[i,j+1]都被固定了），那么我们就可以根据[i,j]的状态判断[i+1,j]是不是需要反转了（因为这时能影响到[i,j]的只剩下[i+1,j]了）；事实上，我们只需要固定第一行的反转情况就好，因为如果第i行的反转情况固定了，那么根据[i,j]能确定[i+1,j]的反转情况，在跑完一行之后，第i+1行的也就固定了，以此类推就行了！至于怎么固定最上面一行？枚举就好了嘛，怎么枚举呢？记得状态压缩吗？n的范围只有15，所以，你知道了？</p>

<p>我的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;queue&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">INF</span> <span class="o">=</span> <span class="mh">0x3f3f3f3f</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">maxn</span> <span class="o">=</span> <span class="mi">11111</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">d</span><span class="p">[</span><span class="mi">5</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">},{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">}</span> <span class="p">};</span>
</span><span class='line'><span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">20</span><span class="p">][</span><span class="mi">20</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">ans</span><span class="p">[</span><span class="mi">20</span><span class="p">][</span><span class="mi">20</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">20</span><span class="p">][</span><span class="mi">20</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">get</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">xx</span> <span class="o">=</span> <span class="n">x</span><span class="o">+</span><span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">yy</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">xx</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="o">&amp;&amp;</span> <span class="n">xx</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">yy</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">yy</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="n">res</span> <span class="o">^=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">xx</span><span class="p">][</span><span class="n">yy</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">solve</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">get</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">))</span><span class="c1">//i-1,j位置的砖头是黑色的，i,j位置的就必须要翻转</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="n">res</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">get</span><span class="p">(</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">))</span><span class="c1">//都翻转完之后最后一行不是全白的话，就说明无解</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">INF</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">res</span> <span class="o">+=</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="n">INF</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">n</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">memset</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">tmp</span><span class="p">));</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">tmp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">n</span><span class="o">-</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span><span class="o">&gt;&gt;</span><span class="n">j</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">;</span><span class="c1">//要保证字典序最小</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">tp</span> <span class="o">=</span> <span class="n">solve</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">num</span> <span class="o">&gt;</span> <span class="n">tp</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">num</span> <span class="o">=</span> <span class="n">tp</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">t</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">ans</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">t</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">t</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">num</span> <span class="o">&lt;</span> <span class="n">INF</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d%c&quot;</span><span class="p">,</span> <span class="n">ans</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">j</span><span class="o">==</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">?</span><span class="sc">&#39;\n&#39;</span><span class="o">:</span><span class="sc">&#39; &#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">puts</span><span class="p">(</span><span class="s">&quot;IMPOSSIBLE&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//system(&quot;pause&quot;);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面总结一下这种思想可能会在什么样的情况下用到，只是我自己对比这两道题的解法总结的，如果发现不全的话欢迎补充，发现不对的话欢迎指正：</p>

<p>首先，需要确定两点，第一是顺序无关性，第二是状态有限且有序性（这两道题都是2种状态，而根据我的理解，感觉如果不止是2种状态但是状态的变换是有序的话，也能借鉴这种思想，只不过会很麻烦，可能有其他的方法）；第三就是你每次操作是把一个位置从一个状态转换成下一个状态；第四是对每个位置可以选择操作和不操作。</p>

<p>在满足这以上条件的情况下，可以考虑下能不能用这种方法来解决，这时候我们需要考虑找到一个可以根据之前的操作状态确定来确定当前位置是不是操作的位置（比如第一道题里面的最前面一头牛就可以根据它之前的牛的操作情况来确定自己是不是要操作，而且是确定的，操作就是一定要操作，不操作就一定不操作，第二题里面也是一样，在确定首行之后，[i+1， j]这个位置的操作就能为唯一确定，必须是唯一确定！！），能找到这么一个位置的话，还要确定，对这个位置进行了对应的操作之后，依然能找到下一个这样的位置，这样就可以依次递推到最后了！</p>

<p>不知道我说的是不是清楚,最后再说一句,记得14年多校有一题,貌似跟这种思想挺像的,忘了有没有做出来了!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[连通度总结]]></title>
    <link href="http://whn757397540.github.io/blog/2015/03/14/lian-tong-du-zong-jie/"/>
    <updated>2015-03-14T18:56:00+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/03/14/lian-tong-du-zong-jie</id>
    <content type="html"><![CDATA[<p>做<a href="http://poj.org/problem?id=1966">POJ 1966 Cable TV Network</a>时遇到的问题，用到了一些网络流的知识</p>

<p>这个其实首先是一个概念问题，要想明白什么事图的连通度，我们需要先搞明白什么叫做连通图！</p>

<!--more-->


<p>在图论中，连通图基于连通的概念。在一个无向图 G 中，若从顶点vi到顶点vj有路径相连（当然从vj到vi也一定有路径），则称vi和vj是连通的。如果 G 是有向图，那么连接vi和vj的路径中所有的边都必须同向。如果图中任意两点都是连通的，那么图被称作连通图。如果此图是有向图，则称为强连通图（注意：需要双向都有路径）</p>

<p>严格的定义是这样的：</p>

<p>对一个图 G=(V,E) 中的两点 x 和 y ，若存在交替的顶点和边的序列 Γ=(x=v0-e1-v1-e2-…-ek-(vk+1)=y) (在有向图中要求有向边vi−( vi+1)属于E )，则两点 x 和 y 是连通的。Γ是一条x到y的连通路径，x和y分别是起点和终点。当 x = y 时，Γ 被称为回路。如果通路 Γ 中的边两两不同，则 Γ 是一条简单通路，否则为一条复杂通路。如果图 G 中每两点间皆连通，则 G 是连通图。</p>

<p>(PS:以上内容摘自百度百科)</p>

<p>那么，搞清楚连通图是什么以后，我们就能够知道什么是连通度了。首先，连通度分为边连通度和点联通度，对于这两个概念，是如下定义的：</p>

<p>设G = (V, E)是一个n阶图。如果G是完全图Kn，那么我们定义它的顶点连通度为  κ(Kn) = n – 1  否则，定义它的顶点连通度为  κ(G) = min{|U| : Gv-u是非连通的}  即最小的定点数，删除这些定点后能让这个图不连通（这里没提有向图应该是怎么样的一种不连通，不过根据我的理解，应该是指的不是强联通，也就是任意两点不连通就算是不连通了）</p>

<p>图G的边连通度定义为从图G中删除边而使G非连通的最小边数，用λ(G)表示。  这里的图G=(V, E)代表无向图或有向图，且没有自环和重边。</p>

<p>那么对于边连通度和点连通度，应该怎么求呢？</p>

<p>有向图的边连通度：如果是对于2个点来说的边连通度，那么其实就是这两点之间的最小割！根据最大流最小割定理，很容易用最大流求出来（建图边容量为1就行）。但是如果是对于整个图的边连通度，其实就是要对任意一对点的最小割里面的最小值了，而事实上，我们不需要遍历每一对点，只需要固定源点然后枚举汇点，再固定汇点枚举源点就行了（这个的证明就不说的，因为只要理解了最小割的概念，很容易就能想明白！）</p>

<p>有向图的点连通度：这个相对麻烦一点点，不过其实也就是边容量无限了（因为求点连通度不需要断边），然后点有了容量为1，而之前在网络流的总结里提到了遇到点也有容量的时候该怎么解决，很简单，就是直接拆点，把一个点p拆成两个点v和v’，然后由v指向v’一条容量为1的边，然后所有指向原来的点p的边指向v，所有从原来的点p指出的边变成从v’指出即可！之后的算法跟求边连通度一样</p>

<p>无向图的边连通度：在网络流中也说过，怎么把无向图转化成有向图，这里不再赘述！</p>

<p>无向图的点连通度：一样，把无向图转换成有向图，然后按照有向图点连通度的建图方法来建图就好！</p>

<p>下面来说题：</p>

<p><a href="http://poj.org/problem?id=1966">POJ 1966 Cable TV Network</a></p>

<p>这道题，就是直接的一道让你求点连通度的裸题，很简单，按照之前说的方法建图来求就行！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;queue&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">maxv</span> <span class="o">=</span> <span class="mi">11111</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">INF</span> <span class="o">=</span> <span class="mh">0x3f3f3f3f</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Edge</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">to</span><span class="p">,</span> <span class="n">cap</span><span class="p">,</span> <span class="n">rev</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Edge</span><span class="p">(</span><span class="kt">int</span> <span class="n">to</span><span class="p">,</span> <span class="kt">int</span> <span class="n">cap</span><span class="p">,</span> <span class="kt">int</span> <span class="n">rev</span><span class="p">)</span><span class="o">:</span><span class="n">to</span><span class="p">(</span><span class="n">to</span><span class="p">),</span> <span class="n">cap</span><span class="p">(</span><span class="n">cap</span><span class="p">),</span> <span class="n">rev</span><span class="p">(</span><span class="n">rev</span><span class="p">){}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">u</span><span class="p">[</span><span class="n">maxv</span><span class="p">],</span><span class="n">v</span><span class="p">[</span><span class="n">maxv</span><span class="p">];</span>
</span><span class='line'><span class="n">vector</span><span class="o">&lt;</span><span class="n">Edge</span><span class="o">&gt;</span> <span class="n">G</span><span class="p">[</span><span class="n">maxv</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">level</span><span class="p">[</span><span class="n">maxv</span><span class="p">];</span><span class="c1">//¶¥µãµ½Ô´µãµÄ¾àÀë±êºÅ</span>
</span><span class='line'><span class="kt">int</span> <span class="n">iter</span><span class="p">[</span><span class="n">maxv</span><span class="p">];</span><span class="c1">//µ±Ç°»¡£¬ÔÚÆäÖ®Ç°µÄ±ßÒÑ¾­Ã»ÓÐÓÃÁË</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">init</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">G</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">addEdge</span><span class="p">(</span><span class="kt">int</span> <span class="n">from</span><span class="p">,</span> <span class="kt">int</span> <span class="n">to</span><span class="p">,</span> <span class="kt">int</span> <span class="n">cap</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">G</span><span class="p">[</span><span class="n">from</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">Edge</span><span class="p">(</span><span class="n">to</span><span class="p">,</span> <span class="n">cap</span><span class="p">,</span> <span class="n">G</span><span class="p">[</span><span class="n">to</span><span class="p">].</span><span class="n">size</span><span class="p">()));</span>
</span><span class='line'>    <span class="n">G</span><span class="p">[</span><span class="n">to</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">Edge</span><span class="p">(</span><span class="n">from</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">G</span><span class="p">[</span><span class="n">from</span><span class="p">].</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">bfs</span><span class="p">(</span><span class="kt">int</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="n">level</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">level</span><span class="p">));</span>
</span><span class='line'>    <span class="n">queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">que</span><span class="p">;</span>
</span><span class='line'>    <span class="n">level</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">que</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">que</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="n">que</span><span class="p">.</span><span class="n">front</span><span class="p">();</span> <span class="n">que</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">G</span><span class="p">[</span><span class="n">v</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Edge</span> <span class="o">&amp;</span><span class="n">e</span> <span class="o">=</span> <span class="n">G</span><span class="p">[</span><span class="n">v</span><span class="p">][</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">cap</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">level</span><span class="p">[</span><span class="n">e</span><span class="p">.</span><span class="n">to</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">level</span><span class="p">[</span><span class="n">e</span><span class="p">.</span><span class="n">to</span><span class="p">]</span> <span class="o">=</span> <span class="n">level</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="n">que</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">to</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">dfs</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span><span class="p">,</span> <span class="kt">int</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">f</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">v</span> <span class="o">==</span> <span class="n">t</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">f</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="o">&amp;</span><span class="n">i</span> <span class="o">=</span> <span class="n">iter</span><span class="p">[</span><span class="n">v</span><span class="p">];</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">G</span><span class="p">[</span><span class="n">v</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Edge</span> <span class="o">&amp;</span><span class="n">e</span> <span class="o">=</span> <span class="n">G</span><span class="p">[</span><span class="n">v</span><span class="p">][</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">cap</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">level</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">level</span><span class="p">[</span><span class="n">e</span><span class="p">.</span><span class="n">to</span><span class="p">])</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">dfs</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">to</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">min</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">cap</span><span class="p">));</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">d</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">e</span><span class="p">.</span><span class="n">cap</span> <span class="o">-=</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>                <span class="n">G</span><span class="p">[</span><span class="n">e</span><span class="p">.</span><span class="n">to</span><span class="p">][</span><span class="n">e</span><span class="p">.</span><span class="n">rev</span><span class="p">].</span><span class="n">cap</span> <span class="o">+=</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">max_flow</span><span class="p">(</span><span class="kt">int</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">t</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">flow</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="nb">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">bfs</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">level</span><span class="p">[</span><span class="n">t</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">flow</span><span class="p">;</span>
</span><span class='line'>        <span class="n">memset</span><span class="p">(</span><span class="n">iter</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">iter</span><span class="p">));</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">f</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">((</span><span class="n">f</span> <span class="o">=</span> <span class="n">dfs</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">INF</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="n">flow</span> <span class="o">+=</span> <span class="n">f</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">reset</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">m</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">addEdge</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="n">n</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">addEdge</span><span class="p">(</span><span class="n">u</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="n">n</span><span class="p">,</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">INF</span><span class="p">);</span>
</span><span class='line'>        <span class="n">addEdge</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="n">n</span><span class="p">,</span> <span class="n">u</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">INF</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="o">~</span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">addEdge</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="n">n</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot; (%d,%d)&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">u</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="c1">//int s = n, ans = INF;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">INF</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">t</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">t</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">reset</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">);</span>
</span><span class='line'>            <span class="n">ans</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="n">max_flow</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">t</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">s</span> <span class="o">=</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">s</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">*</span><span class="n">n</span><span class="p">;</span> <span class="n">s</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">reset</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">);</span>
</span><span class='line'>            <span class="n">ans</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="n">max_flow</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">t</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">ans</span> <span class="o">&lt;</span> <span class="n">INF</span> <span class="o">?</span> <span class="nl">ans</span> <span class="p">:</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
