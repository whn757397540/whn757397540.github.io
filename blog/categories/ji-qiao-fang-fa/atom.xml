<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 技巧方法 | hnnwang's Blog]]></title>
  <link href="http://whn757397540.github.io/blog/categories/ji-qiao-fang-fa/atom.xml" rel="self"/>
  <link href="http://whn757397540.github.io/"/>
  <updated>2015-03-14T21:33:13+08:00</updated>
  <id>http://whn757397540.github.io/</id>
  <author>
    <name><![CDATA[hnnwang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[坐标离散化]]></title>
    <link href="http://whn757397540.github.io/blog/2015/03/14/zuo-biao-chi-san-hua/"/>
    <updated>2015-03-14T18:57:05+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/03/14/zuo-biao-chi-san-hua</id>
    <content type="html"><![CDATA[<h4>坐标离散化</h4>

<!--more-->


<p>简单提一下，以后碰到例题再补充进来</p>

<p>这种方法适合坐标系非常大，线段比较稀疏的情况，原型就是给你坐标系和一些水平或者竖直的线段（可能有宽度是矩形，可能没宽度），然后问你这些把坐标系分成了几部分。</p>

<p>方法就是把坐标离散化，再不影响区块的情况下尽可能地拉近线段之间的距离！具体的写法参考《挑战程序设计竞赛》P165，今天一次性写的有点多，我就不继续敲他给的代码了，先占楼,回头碰到用到这种方法的题目的时候再说吧!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[折半枚举]]></title>
    <link href="http://whn757397540.github.io/blog/2015/03/14/zhe-ban-mei-ju/"/>
    <updated>2015-03-14T18:56:56+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/03/14/zhe-ban-mei-ju</id>
    <content type="html"><![CDATA[<p>这个，也是一种优化技巧，其思想来源于传统的双向搜索！</p>

<p>要点: 把要枚举的多个东西分成2部分分开来进行枚举，从而达到降低时间复杂度的目的，实际上是一种牺牲空间换取时间的方法，分成两部分来枚举的时候，就是先枚举一部分存起来，再根据存起来的这部分对剩下的一部分进行枚举。光说也看不出效果来，来看一道题。</p>

<!--more-->


<p><a href="http://poj.org/problem?id=2785">POJ 2785 4 Values whose Sum is 0</a></p>

<p>就是给你4个序列，让你从每个序列中选一个数使得4个数和为0，问总共有几种方法（统一序列数值相同的数字区别看待）？</p>

<p>这个如果按照正常的方法直接枚举的话，复杂度是O(n<sup>4</sup>)，但是如果我们先来枚举一半，看a+b+c+d = 0,则 c+d = -(a+b)，我们可以先枚举c和d的选取方法，总共是n<sup>2</sup>种，复杂的自然就是n2，然后再把这几个数字存起来进行排序，之后再枚举a+b,利用a+b是c+d的相反数这个性质，利用二分搜索，可以再每次用logn的时间找出对应的c+d，而枚举a+b复杂度是n<sup>2</sup>，综上，复杂度为O(n<sup>2</sup> logn).</p>

<p>参考代码理解一下就好。</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;string&gt;
#include &lt;set&gt;
#include &lt;algorithm&gt;
#include &lt;map&gt;
#include &lt;queue&gt;
#include &lt;vector&gt;
#include &lt;cmath&gt;

using namespace std;
const int INF = 0x3f3f3f3f;
const int maxn = 4010;

int a[maxn],b[maxn],c[maxn],d[maxn];
int cd[maxn*maxn];

int main()
{
    int n;
    scanf("%d", &amp;n);
    for (int i = 0; i &lt; n; i++)
        scanf("%d%d%d%d", &amp;a[i], &amp;b[i], &amp;c[i], &amp;d[i]);
    for (int i = 0; i &lt; n; i++)
        for (int j = 0; j &lt; n; j++)
            cd[i*n+j] = c[i]+d[j];
    sort(cd, cd+n*n);
    long long ans = 0;
    for (int i = 0; i &lt; n; i++)
        for (int j = 0; j &lt; n; j++)
        {
            int ab = a[i] + b[j];
            ans += upper_bound(cd, cd+n*n, -ab) - lower_bound(cd, cd+n*n, -ab);
           /* if (ans != 0)
                cout&lt;&lt;a[i]&lt;&lt;" "&lt;&lt;b[i]&lt;&lt;" "&lt;&lt;ans&lt;&lt;endl;
            system("pause");*/
        }
    printf("%I64d\n", ans);
    return 0;
}
</code></pre>

<p>另外一个例子就是超大背包问题，就是背包问题，不过限制条件不适合用dp：1&lt;=n&lt;=40, 1&lt;= w[i],v[i] &lt;= 10<sup>15</sup>, 1&lt;W&lt;10<sup>15</sup>;</p>

<p>n比较小，就考虑能不能枚举，但是直接枚举复杂度是2n, 240铁定是不行的，所以，需要再优化。这时，就可以利用折半枚举，把所有的物品拆成2部分，先选一半，再选一半。实际上就是先枚举一半（2<sup>20</sup>），假设枚举的这一半是w2,v2。存起来后，我们可以排除掉所有的w2[i]&lt;=w2[j] &amp;&amp; v2[i] >= v2[j]的j,按照w,v的字典序排序后很容易做到这一点。之后声誉的元素都满足w2[i]&lt;w2[j]等价与v2[i]&lt;v2[j]，我们要计算的是max{v2| w2&lt;= W-w1},就只需要找到满足w2[i]&lt;= W-w1[i]的最大的i就行，这个可以用二分搜索完成。复杂度是O（2<sup>n</sup>/2 * n）,是可以在时限内完成的！</p>

<p>总结：对于枚举情况很多的时候，并且跟顺序有关的时候，可以折半，先枚举一半存起来，然后用二分查找的方法降低复杂度！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开关问题]]></title>
    <link href="http://whn757397540.github.io/blog/2015/03/14/kai-guan-wen-ti/"/>
    <updated>2015-03-14T18:56:21+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/03/14/kai-guan-wen-ti</id>
    <content type="html"><![CDATA[<p>反转问题，开关问题，关灯问题！这是一个什么样的问题呢？说实话，我也不清楚，那就不清楚地说一说呗！先来看两个题，再根据这两个题再来分析下这是一个什么样的问题！</p>

<!--more-->


<p><a href="http://poj.org/problem?id=3276">POJ3276 Face The Right Way</a></p>

<p>简单说下题意，给你n头牛的朝向(B向后F向前)，给你一台机器，机器的作用是，你先要指定一个k，然后机器每次操作反转严格的k头牛的方向（B变F，F变B）。问让所有的牛朝前最少需要反转几次，对应的K是多少（如果次数相同，输出最小的K）。</p>

<p>首先，区间的反转顺序对于结果是没有影响的；其次，如果对同一个区间反转2次以上是多余的；有以上两点，问题就转变成了求需要被反转的空间的集合。</p>

<p>那么我们就考虑最前面一头牛，如果这头牛需要反转，那么包含这头牛的区间只有1个，所以这个区间就必须要反转；在把这头牛反转之后，在剩下的牛里面再选取最前面的一头，依然是一样的。所以我们就可以通过首先考虑最左端的牛，然后不断重复最终求出结果了！</p>

<p>以上便是这种方法的精髓。可是如果我们直接按照这种方法来模拟的话，我们来分析下复杂度，首先，需要对所有可能的K都求解一次（N）,然后，对于每个K，我们都要从最左端考虑N头牛的情况，最坏的情况下又需要进行N-K+1次反转操作，每次操作需要反转K头牛，所以总的复杂度是O（N3）,这个显然，对于5000的问题规模，现在是不能在规定的时间内解决的！所以，我们需要优化。（这个不属于这种方法的内容）</p>

<p>这个，我们可以设一个f[i]代表区间[i,i+K-1]是否进行过反转，反转过就为1，否则为0.那么对于某头牛，我们只需要考虑在它之前的包括它的区间反转次数的和，而我们求的时候是按照顺序来的，所以这个和也可以用O（1）的时间求出来。举个例子，再这个和sum从i-1向i转移的过程中，很显然需要sum-f[i-k]（因为f[i-k]不包括牛i），根据这个sum求出f[i]来，再把f[i]加入到sum中就好，具体看看<a href="/acm/poj/poj3276/">代码</a>应该也挺容易懂的.</p>

<p><a href="http://poj.org/problem?id=3279">POJ3279 Fliptile</a></p>

<p>这个题意也好理解，给你一个m×n的格子，每个格子可能是黑色（1）或者白色（0）,然后你可以进行的操作是可以选择一个格子进行反转，那个格子反转会带动周围的4个格子（上下左右）也反转，问题是最少进行多少步能够把所有的格子反转成白色，如果没有可能，输出IMPOSSIBLE,否则输出字典序最小的反转方案。</p>

<p>跟上一题一样的分析方法，首先，对同一个格子进行2次以上的反转是多余的；其次，反转的格子的顺序对结果是没有影响的！那么接下来，我们需要考虑找到一个可以确定反转方法的最靠前位置的格子（就像上一题最前面的那头牛一样）。但是，假如当前只考虑这些格子的左上角一个格子[i,j]的话，当前还没有确定反转方向的格子中，除了[i,j]之外，实际上还有[i+1,j],[i,j+1]两个个格子可能对他产生影响，所以我们不能非常容易地确定某个格子是不是必须要反转，所以我们要想办法把不确定因素减少。考虑下，假如我们把最上面一行的反转情况固定了，那么，能够影响到最左上角[i,j]的就只有[i+1,j]这一个位置（[i,j],[i,j+1]都被固定了），那么我们就可以根据[i,j]的状态判断[i+1,j]是不是需要反转了（因为这时能影响到[i,j]的只剩下[i+1,j]了）；事实上，我们只需要固定第一行的反转情况就好，因为如果第i行的反转情况固定了，那么根据[i,j]能确定[i+1,j]的反转情况，在跑完一行之后，第i+1行的也就固定了，以此类推就行了！至于怎么固定最上面一行？枚举就好了嘛，怎么枚举呢？记得状态压缩吗？n的范围只有15，所以，你知道了？</p>

<p>我的代码</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;string&gt;
#include &lt;set&gt;
#include &lt;algorithm&gt;
#include &lt;map&gt;
#include &lt;queue&gt;
#include &lt;vector&gt;
#include &lt;cmath&gt;

using namespace std;
const int INF = 0x3f3f3f3f;
const int maxn = 11111;
const int d[5][2] = { {0, -1}, {1, 0}, {0, 1},{-1, 0},{0, 0} };
int n,m;
int a[20][20];
int ans[20][20];
int tmp[20][20];

int get(int x, int y)
{
    int res = a[x][y];
    for (int i = 0; i &lt; 5; i++)
    {
        int xx = x+d[i][0], yy = y + d[i][1];
        if (xx &lt; m &amp;&amp; xx &gt;= 0 &amp;&amp; yy &lt; n &amp;&amp; yy &gt;= 0)
            res ^= tmp[xx][yy];
    }
    return res;
}

int solve()
{
    int res = 0;
    for (int i = 1; i &lt; m; i++)
        for (int j = 0; j &lt; n; j++)
            if (get(i-1,j))//i-1,j位置的砖头是黑色的，i,j位置的就必须要翻转
            {
                tmp[i][j] = 1;
                res++;
            }

    for (int j = 0; j &lt; n; j++)
        if (get(m-1,j))//都翻转完之后最后一行不是全白的话，就说明无解
            return INF;
    for (int i = 0; i &lt; n; i++)
        res += tmp[0][i];
    return res;
}

int main()
{
    scanf("%d%d", &amp;m, &amp;n);
    for (int i = 0; i &lt; m; i++)
        for (int j = 0; j &lt; n; j++)
            scanf("%d", &amp;a[i][j]);
    int num = INF;
    for (int i = 0; i &lt; (1&lt;&lt;n); i++)
    {
        memset(tmp, 0, sizeof(tmp));
        for (int j = 0; j &lt; n; j++)
            tmp[0][n-j-1] = (i&gt;&gt;j) &amp; 1;//要保证字典序最小
        int tp = solve();
        if (num &gt; tp)
        {
            num = tp;
            for (int k = 0; k &lt; m; k++)
                for (int t = 0; t &lt; n; t++)
                    ans[k][t] = tmp[k][t];
        }
    }
    if (num &lt; INF)
        for (int i = 0; i &lt; m; i++)
            for (int j = 0; j &lt; n; j++)
                printf("%d%c", ans[i][j], j==n-1?'\n':' ');
    else
        puts("IMPOSSIBLE");
        //system("pause");
    return 0;
}
</code></pre>

<p>下面总结一下这种思想可能会在什么样的情况下用到，只是我自己对比这两道题的解法总结的，如果发现不全的话欢迎补充，发现不对的话欢迎指正：</p>

<p>首先，需要确定两点，第一是顺序无关性，第二是状态有限且有序性（这两道题都是2种状态，而根据我的理解，感觉如果不止是2种状态但是状态的变换是有序的话，也能借鉴这种思想，只不过会很麻烦，可能有其他的方法）；第三就是你每次操作是把一个位置从一个状态转换成下一个状态；第四是对每个位置可以选择操作和不操作。</p>

<p>在满足这以上条件的情况下，可以考虑下能不能用这种方法来解决，这时候我们需要考虑找到一个可以根据之前的操作状态确定来确定当前位置是不是操作的位置（比如第一道题里面的最前面一头牛就可以根据它之前的牛的操作情况来确定自己是不是要操作，而且是确定的，操作就是一定要操作，不操作就一定不操作，第二题里面也是一样，在确定首行之后，[i+1， j]这个位置的操作就能为唯一确定，必须是唯一确定！！），能找到这么一个位置的话，还要确定，对这个位置进行了对应的操作之后，依然能找到下一个这样的位置，这样就可以依次递推到最后了！</p>

<p>不知道我说的是不是清楚,最后再说一句,记得14年多校有一题,貌似跟这种思想挺像的,忘了有没有做出来了!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二分查找及其应用总结]]></title>
    <link href="http://whn757397540.github.io/blog/2015/03/14/er-fen-cha-zhao-ji-qi-ying-yong-zong-jie/"/>
    <updated>2015-03-14T18:55:45+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/03/14/er-fen-cha-zhao-ji-qi-ying-yong-zong-jie</id>
    <content type="html"><![CDATA[<p>二分查找及其应用总结
二分搜索法，是通过不断缩小解可能存在的范围，从而求的问题最优解的方法。经常会出现的是二分搜索和其他算法结合的题目。</p>

<!--more-->


<p>(PS:有关二分姿势的选取，可以看看<a href="http://blog.csdn.net/u012139398/article/details/38637311">峰霸这短小精悍的博文</a></p>

<ol>
<li>首先，最基本的，从有序数组中查找某个值。</li>
</ol>


<p>这个问题，再stl中有lower_bound()和upper_bound()来解决，这里给出一个内部算法结构，再简单说说STL的用法</p>

<pre><code class="c++">int lowerBound(int a[], int n, int aim)//返回值是&gt;=aim的第一个位置，如果不存在，返回最后一个元素之后的一个位置（也就是n）
{
    int l = -1, r = n;//初始化解的存在范围，这里求lower_bound的时候采取的是左闭右开的

    while(r-l &gt; 1)//重复循环，一知道解的范围足够小
    {
        int mid = (l+r)/2;
        if (a[mid] &gt;= aim)//如果mid满足条件
            r = mid;//解的存在范围变为(l, mid]
        else
            l = mid;//解的存在范围变为(mid, r]
    }
    return r;
}
</code></pre>

<p>当然，这只是针对整数的情况，而根据实际情况，还会有可能是其他的元素，或者其他的要求，要视情况而定。不再多说，提一下STL库里的两个函数的用法:</p>

<p>首先，lower_bound(a, a+n, d)返回的是数组a里面（a可以是任何有序的数组）,元素值>=d的第一个元素的位置，如果不存在，则返回的是最后一个元素之后的第一个位置，注意，他的返回值是指针！</p>

<p>然后，upper_bound(a, a+n, d)，与lower_bound（）类似，不过这里找的是>d的第一个元素的位置，不包括等于，不存在的情况与lowerbound相同，返回值也是指针</p>

<ol>
<li>假定一个解并判断是否可行（二分答案法）</li>
</ol>


<p>这种解题方法并不是第一次用了，什么情况下用这种方法呢？如果在求解最大化或最小化的问题中，能够比较简单的判断条件是否满足，那么使用二分搜索法就可以很好得解决问题。</p>

<p>举个简单的例子：</p>

<p><a href="http://poj.org/problem?id=1064">POJ 1064 Cable master</a></p>

<p>我们如果假定答案是x的话，那么每条绳子最多可以切成floor(L[i] / x)段，那么我们只需要判断所有的绳子最多可以切成多少段，如果能切得比K段更多（或者相等），那么就能知道有可能切得更长，这个判断就对应了之前代码的a[mid] >= aim的条件了；同样，反之就说明切得太长了，需要往短了切。所以呢，参考下之前的代码，很容易能写出这一题的代码！我的<a href="/acm/poj/poj1064/">代码</a>仅供参考。</p>

<p>这种类型的题目还很多，记住两个要点：最大化或者最小化问题中;能够比较简单地判断条件是否满足；在满足以上两个条件的情况下，二分搜索法是一个很好的办法，复杂度是O（判断的复杂度×log(maxans)）.</p>

<ol>
<li>最大化最小值问题</li>
</ol>


<p>类似最大化最小值或者最小化最大值的问题，通常用二分搜索法就可以很好的解决（实际上，跟2的二分答案法是差不多的）。不多说，挂个例题和解法就过了。</p>

<p><a href="http://poj.org/problem?id=2456">POJ 2456 Aggressive cows</a></p>

<p>定义一个canMake(int d)函数,代表可以安排牛的位置使离得最近的互相仇恨的牛的距离不小于d。这个问题只用贪心法就很容易判断了（具体过程不说了）。之后进行二分答案就好！</p>

<p>参考<a href="/acm/poj/poj2456/">代码</a></p>

<ol>
<li>最大化平均值</li>
</ol>


<p>这种题呢，说实话，还没有太多印象遇到过，不过既然书上提到了，这里就来讲一讲罗！先来看问题：</p>

<p>有n个物品的重量和价值分别为wi和vi，要从中选出k个物品是的单位重量的价值最大。</p>

<p>这个问题，我刚开始看到的想法就是直接贪心按照单价排序不就好了嘛，可是后来发现这种贪心是错误的（给的样例就能证明）。那么我们可以这样来假设，定义:</p>

<p>C(x) = 可以选择使得单位重量的价值不小于x。</p>

<p>那么原问题就等于是求满足C(x)的最大的x。那么解决了判断问题，就又可以二分答案了。关键我们是怎么判断C(x)呢？假设我们选了某个物品的集合S那么它们的单位重量的价值就是 sigma(vi)/sigma(wi)。</p>

<p>因此就变成了判断是否存在S满足下面的条件</p>

<p>sigma(vi)/sigma(wi) >= x;</p>

<p>把这个不等式变形就得到</p>

<p>sigma(vi - x*wi) >= 0.</p>

<p>因此，我们只需要对vi-x*wi的值进行排序贪心的选取，判断从大到小前k个的和不小于0就行了。每次判断的复杂度是O（nlogn）.</p>

<p>通过上面的内容，我们会发现，不管怎么样，用到二分答案的时候，我们需要先找到一个判断条件，然后对答案进行二分。二分，更重要的是这种思想，它不仅仅是能够搜索数值，还能有更广阔的应用！</p>

<p><a href="/blog/archives">&lt;–返回</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[弹性碰撞问题]]></title>
    <link href="http://whn757397540.github.io/blog/2015/02/17/dan-xing-peng-zhuang-wen-ti/"/>
    <updated>2015-02-17T18:56:45+08:00</updated>
    <id>http://whn757397540.github.io/blog/2015/02/17/dan-xing-peng-zhuang-wen-ti</id>
    <content type="html"><![CDATA[<h2>有关弹性碰撞的问题,我们先来看一道非常简单的水题!</h2>

<!--more-->


<p><a href="http://poj.org/problem?id=1852">POJ1852 Ants</a></p>

<p>非常简单的一道题,简单分析下就很容易出来,由题意知道所有蚂蚁速度都是1,碰头后折返继续走.这个就可以看成没有折返而是碰头的蚂蚁穿过对方继续走,这样就可以看成每个蚂蚁都是从自己的位置一直走到掉下去为止,那么就很容易知道,所有蚂蚁都掉下去的最短时间就是蚂蚁到两个顶端比较短的距离中最大的那个;而最长时间按就是蚂蚁到两个顶端比较长的距离中最大的那个! <a href="/acm/poj/poj1852/">参考代码</a>还是贴出来,虽然没什么必要</p>

<p>我们由这道题引出弹性碰撞问题,大家都学过物理,知道弹性碰撞是个什么东东,如果物体的质量相同,那么在某个位置发生弹性碰撞后,物体会交换速度.比如上上面那道题,就可以看成以1速度运动的蚂蚁和另外一只以1速度运动(反向)的蚂蚁相撞,之后发生了速度交换,对于这种情况,都可以按照这个蚂蚁的处理方法,看做物体互相穿过继续运动即可,下面来看一道稍微复杂点的例题!</p>

<p><a href="http://poj.org/problem?id=3684">POJ3684 Physics Experiment</a></p>

<p>这个题,首先,我们先考虑加入没有半径,也就是说小球可以看成是质点的时候,先看如果只有一个小球的话,可以根据物理知识求出t时刻的小球位置,我们知道,不及阻力和摩擦的话,这是一个周期运动,半周期 T = sqrt(g×H/2),那么我们很容易知道，在前半个周期，小球做自由落体运动，那么t时刻的位置是（假设t在前半个周期且在第一个周期） pos = H - 1/2×g×t2， 同样，在下半个周期的话，小球做自由落体运动的逆向运动，容易求得 pos = H - 1/2×g×(2*T-t)2;</p>

<p>上面的分析是针对一个小球的，如果是多个呢？那其实就是可以按照之前所说的处理，把弹性碰撞时发生的速度交换看成小球相互穿过后继续运动即可，那么我们可以求得所有小球的位置，之后对这个位置进行排序即可，因为先落下的小球一定在后落下的小球下面，这样就可以把小球的位置一一对应起来了！</p>

<p>那么，如果加上半径r呢？实际上也不难，思考一下，小球运动的空间其实都是H那么高，因为每个小球都是无隙排列的。（仔细思考下应该能绕过这个弯儿来），那么我们就只需要按照之前没有算半径的时候的方法计算，再最终结果对应第i个小球加上一个小球的直径即可（因为在那个小球下面除了空的空间以外，还有i个小球！）</p>

<p><a href="/acm/poj/poj1852/">参考代码</a></p>

<p>总结一下，其实这种题目的重点就是：把速度交换变成互相穿过而行，从而使复杂的问题简单化</p>

<p><a href="/blog/archives">&lt;–返回</a></p>
]]></content>
  </entry>
  
</feed>
